package ocaml.editor.newFormatter;

import ocaml.parser.ErrorReporting;
import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "OcamlFormatterParser.g".
 */
public class OcamlFormatterParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LIDENT = 1;
		static public final short UIDENT = 2;
		static public final short SHARP = 3;
		static public final short LPAREN = 4;
		static public final short LET = 5;
		static public final short END = 6;
		static public final short LBRACKET = 7;
		static public final short TYPE = 8;
		static public final short MODULE = 9;
		static public final short EXCEPTION = 10;
		static public final short EXTERNAL = 11;
		static public final short CLASS = 12;
		static public final short OPEN = 13;
		static public final short INCLUDE = 14;
		static public final short SEMISEMI = 15;
		static public final short RPAREN = 16;
		static public final short MINUS = 17;
		static public final short VAL = 18;
		static public final short EQUAL = 19;
		static public final short AND = 20;
		static public final short BACKQUOTE = 21;
		static public final short FALSE = 22;
		static public final short TRUE = 23;
		static public final short LBRACE = 24;
		static public final short STRING = 25;
		static public final short INT = 26;
		static public final short FLOAT = 27;
		static public final short INT32 = 28;
		static public final short INT64 = 29;
		static public final short NATIVEINT = 30;
		static public final short CHAR = 31;
		static public final short BAR = 32;
		static public final short LBRACKETBAR = 33;
		static public final short CONSTRAINT = 34;
		static public final short RBRACKET = 35;
		static public final short COLON = 36;
		static public final short COMMA = 37;
		static public final short MINUSGREATER = 38;
		static public final short METHOD = 39;
		static public final short INHERIT = 40;
		static public final short SEMI = 41;
		static public final short RBRACE = 42;
		static public final short MINUSDOT = 43;
		static public final short LESS = 44;
		static public final short INITIALIZER = 45;
		static public final short WITH = 46;
		static public final short COLONGREATER = 47;
		static public final short GREATER = 48;
		static public final short COLONCOLON = 49;
		static public final short QUESTION = 50;
		static public final short OPTLABEL = 51;
		static public final short UNDERSCORE = 52;
		static public final short AMPERSAND = 53;
		static public final short STAR = 54;
		static public final short PREFIXOP = 55;
		static public final short BARRBRACKET = 56;
		static public final short BEGIN = 57;
		static public final short LBRACELESS = 58;
		static public final short NEW = 59;
		static public final short AS = 60;
		static public final short PLUS = 61;
		static public final short IN = 62;
		static public final short INFIXOP0 = 63;
		static public final short INFIXOP1 = 64;
		static public final short INFIXOP2 = 65;
		static public final short INFIXOP3 = 66;
		static public final short INFIXOP4 = 67;
		static public final short OR = 68;
		static public final short BARBAR = 69;
		static public final short AMPERAMPER = 70;
		static public final short COLONEQUAL = 71;
		static public final short GREATERRBRACE = 72;
		static public final short LABEL = 73;
		static public final short DO = 74;
		static public final short DONE = 75;
		static public final short THEN = 76;
		static public final short TO = 77;
		static public final short DOWNTO = 78;
		static public final short ELSE = 79;
		static public final short TILDE = 80;
		static public final short OBJECT = 81;
		static public final short QUOTE = 82;
		static public final short DOT = 83;
		static public final short FUN = 84;
		static public final short FOR = 85;
		static public final short IF = 86;
		static public final short WHILE = 87;
		static public final short MATCH = 88;
		static public final short TRY = 89;
		static public final short LBRACKETGREATER = 90;
		static public final short FUNCTION = 91;
		static public final short ASSERT = 92;
		static public final short LAZY = 93;
		static public final short LBRACKETLESS = 94;
		static public final short WHEN = 95;
		static public final short FUNCTOR = 96;
		static public final short VIRTUAL = 97;
		static public final short SIG = 98;
		static public final short OF = 99;
		static public final short LESSMINUS = 100;
		static public final short MUTABLE = 101;
		static public final short STRUCT = 102;
		static public final short PRIVATE = 103;
		static public final short REC = 104;
		static public final short DOTDOT = 105;

		static public final String[] NAMES = {
			"EOF",
			"LIDENT",
			"UIDENT",
			"SHARP",
			"LPAREN",
			"LET",
			"END",
			"LBRACKET",
			"TYPE",
			"MODULE",
			"EXCEPTION",
			"EXTERNAL",
			"CLASS",
			"OPEN",
			"INCLUDE",
			"SEMISEMI",
			"RPAREN",
			"MINUS",
			"VAL",
			"EQUAL",
			"AND",
			"BACKQUOTE",
			"FALSE",
			"TRUE",
			"LBRACE",
			"STRING",
			"INT",
			"FLOAT",
			"INT32",
			"INT64",
			"NATIVEINT",
			"CHAR",
			"BAR",
			"LBRACKETBAR",
			"CONSTRAINT",
			"RBRACKET",
			"COLON",
			"COMMA",
			"MINUSGREATER",
			"METHOD",
			"INHERIT",
			"SEMI",
			"RBRACE",
			"MINUSDOT",
			"LESS",
			"INITIALIZER",
			"WITH",
			"COLONGREATER",
			"GREATER",
			"COLONCOLON",
			"QUESTION",
			"OPTLABEL",
			"UNDERSCORE",
			"AMPERSAND",
			"STAR",
			"PREFIXOP",
			"BARRBRACKET",
			"BEGIN",
			"LBRACELESS",
			"NEW",
			"AS",
			"PLUS",
			"IN",
			"INFIXOP0",
			"INFIXOP1",
			"INFIXOP2",
			"INFIXOP3",
			"INFIXOP4",
			"OR",
			"BARBAR",
			"AMPERAMPER",
			"COLONEQUAL",
			"GREATERRBRACE",
			"LABEL",
			"DO",
			"DONE",
			"THEN",
			"TO",
			"DOWNTO",
			"ELSE",
			"TILDE",
			"OBJECT",
			"QUOTE",
			"DOT",
			"FUN",
			"FOR",
			"IF",
			"WHILE",
			"MATCH",
			"TRY",
			"LBRACKETGREATER",
			"FUNCTION",
			"ASSERT",
			"LAZY",
			"LBRACKETLESS",
			"WHEN",
			"FUNCTOR",
			"VIRTUAL",
			"SIG",
			"OF",
			"LESSMINUS",
			"MUTABLE",
			"STRUCT",
			"PRIVATE",
			"REC",
			"DOTDOT",
		};
	}
	static public class AltGoals {
		static public final short interfaces = 106;
		static public final short toplevel_phrase = 107;
		static public final short use_file = 108;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjVGMS5bNt$vsPfGnSIdA3a5fgQTWL14K9YTsb4Mcm205RKLv1CH35JWpimiPkKMoniBk" +
		"xutNk$tjkpDmxpyop3wlk3$xlxldSFkVSxpqtPvwPMSRsky9ViBKJvy9$qlkJFscIznVtAP" +
		"zDy7u5n$ojdLX$yfqch3gxbVsN$SwkTxeuJPqSDf1AM4qsXfNwy$bSzmtM1$vbpfFmr$EvK" +
		"N9Vbo4hT7TmTtJ$u#xiDd0RketSncuJzosKhukHsMocM5#sEniiyZV27Uq#wpxD1gHAAUvY" +
		"C#LtTkzdsMmdjwrxdhlIFTFjwlPX4vndtPlSE$sUMpivE$j528lOAlOMOZRrH0#CSroKxxc" +
		"rapFLxukmhpEBrKBCfZtzlRPwwkptWT#7TMTz$2ZjvS$Rsidhu$T6sDlhpdP4pAPv$jojdZ" +
		"hwlU3tefcCc4rp$U5REpa7U5$2luNrPhsyPTvAxmJlM6#zTwVtjFSRolVUwgaJyEyD$BkoV" +
		"Yduz$QFsTh9wm7ynm0$vcyA$cFyexPsOhM1$oZWn$XFmN#KV#JMJgm1y1y9$FkogIduZ$IF" +
		"sDh9VGVuZqYm$n7#uLix0VdE$k4sSlwBVvj$c$iSoW$RseaLUGlWO$QoiMmKQyjQidfiUxQ" +
		"TtyvRYFAHMpkn8lyiVwGpWStnZpNmx#qVwun3#OYjdLWZj624ymhhnJvpNZLQS1$x1ENzAe" +
		"VOlHMMB687#lsS4Um0DaoWFmEvkrOEiTShBFaYsm3$RVOOs#ISn7PXto5toTPEueosn1zME" +
		"UJTKc7PD$opbV#6$uPtBVaciMQYP9W$j7A8DQ#e97yPinE#ju2$Z7WxyarYJx0DtdtWQ4Ja" +
		"xY$3Vu#yUoigoLxrspcFyZQLGwn3HINz#$px4BQk76A55PNqx$NlHTYqSeXrgQYaVxz$FyB" +
		"EbKEiQuKbCJuHTgeSOZqhAkblz3SYx5Wvn7QlgAJ$bFyKmWwLGsot2al#mBv7M50vnFfLM1" +
		"9xByAsbKDiQ4KbdMfE7OHvbKDiH4Kb1SuythvoY9LLLDBPaVL1sAvoY9rUKKadc$L2sB9oo" +
		"6bLKKd$Fuw3i4NbaDEkefB#SS3PWkTN3h695PRCTZeYpAqSObCgAkcCmbwMotCgXzZCYaew" +
		"PTWZSlnHbKFiu8fAEYUmVkwhVadb43kqmf8$i5yHLjAlCSxvTffzax5ieUFuyznNtEFSDzq" +
		"vxa7kzQp8FT1vqBtFlTRj9#$BE7IFeBHoY1rRKKdt5lOEmgChXrXXXINfRiRHl5db4AwWAY" +
		"hP5ojNCxup4QxmT$vtYPrSKKawgU0AlnuHSDRxTucTLb59vqzn9w9vvP2$jAAIukJNdEzIE" +
		"SJEhAYaUnAkd7VXhIg7sDaLbiHEWB2Ixa1vvzjfPqN6zwwwuUJNffoTO83tHgNTetezakwK" +
		"gQHxDty7$6$pTzZdYBtZr2FV9BypEyTxjxB6kDCWCkPxP2pxbd#Myj$YRx42yarYA67dUXz" +
		"LrYpmzu#CxHuPoxxfdwFyD$cRR0Zv9hc$#kUmOTxdVABp2klZxk$EvnFvH7Sz#V6KyFJNH7" +
		"TTiemaznFtC#zI4Ti89v$#sZEH#tqhzI4RvZZUwxnnvP2$NuLbEv8bUKTOiYFyzMdkjiLRi" +
		"YCicS4TD#ygeNyZdBJaqHdVvOCbwLwTmDa1E3l0Nv$cdbaypWx0cS4TDt#EqByHJkByDkDx" +
		"TT$vin4sh1poPrLOja7ba3#pmh9rAuVy6HMMhLyvv4#li6oJoY5$MeLb9uWPFG4pUWByzUJ" +
		"7KyACde0PdIWZYTPmvq0HsmWdPhG$DP7xVIlreJ$aNw7btkMn#LFy8VnHVxKt3$7L$dB4uM" +
		"oY4lweTpgxdMzYYy2$oLl0D$5D$hxac#H0cp$uto1M3VN5bKn6sUiuntxb3pRFXqu1dGyTS" +
		"Jxq1plLKJOFPNFTW$p1tk4eUyHfxntZCASXBs6liMxk$YoBb$0IVp3vyUGT5cgXfnNS0ztz" +
		"sAUGsITPHfBpiFiKAnBw9w6#7kB4sYQHkxkPolBuA7QyyoZE7R$pKOWNaXzFhBFxA2jYhhj" +
		"1F4NUdkt5f$Yxe6HAiemahw5p5lkBOlv4k3ETA$m9$fb9t7O9JbfT$Ty8eVyRxygxEeNanr" +
		"DeGUy#DWCMF8eTw9$0kxB3asKa#IUm8k94R3puvPb$poHkvq8pvMtaXQm$8VHQyK9Uw3KZF" +
		"vv2X4vt$tSWNEh$pcw0pDt9CfAScyKTLTA$2rAJtKFzaxn#ITp#IPPi1pwF5U4QV9xJZSz3" +
		"l1tvDhaZuSRmUSOeNEMi0yARlJci5oHVLNopPEZSZtY9EqxbJd07E6C9eJl5BVDMetoorzN" +
		"hnbQvmr6wkpl8tSiTuWvp9xcJtMdk360ORTL$4F0vy6$Y1y7VY$nuCYnOssyBV7Un0vqIo9" +
		"oQB2E9ZNV6Sg7V6OdKWSw9tbIsD97xFrPwlBUlDuMFP#Cvo9$7noUHUAvzgEUvtxadkZyxP" +
		"xERsMgl9lBFIfRXIgjNpNc5Oh3rUAU4zVTFPZoH#sGhFTOPu#p3n$gFyh7mvv4VJ#uVx3h$" +
		"KVTB$r7KG4y1hYEipWlkpyaoab33QgmpYB5Ra2fbxLYXTqmIDrjcfMl24lrvJUy8NfFNz3k" +
		"J7qzc$xf$q1m6riTuJLWYKKQI$vZVWJWH#nMkW$#hKmFu4hYTULQwchFSVP5NyuxcrNWrTt" +
		"$ouyd0Tpbx2$W#SEPZZQhcjqkMKP8dy9jWFyIycr7VYSulxZFEHKdSJcqhFOPFm$mOuzL7R" +
		"0ncyfWa2l6vpM310ztFVLf3nxWF9SieoGUyqz0AnDXTgEbMrtD$SnvBulP7MUaQV5#sddou" +
		"6XX$DP98p8zXOipLnlpuZTtjpMRt8$#HP1b9$ZodDkO7OfWVGe$pN$Pe4hTtZPMkBkwQLNT" +
		"FvjLvTU2hdaIO7z3iVaa8$NRkpwAUsv5$UxAC9Ey7Rv3xfeWrXllMosQhsAeaRkTfAvt5Fs" +
		"5FyYnlJyGG5tuiEQUP2FaqpDj961LPV5AoZ2JtRRyja27cjU5Px5dNOoyxPoPnmrfcUhHp2" +
		"dk5ZyPy6ir7#uNanvF0zeTO$xvqV$QMm0Qh$SxE2rZ$4cMKv6PlPtTxYdad8$M6UxlV2VPB" +
		"u0O#CrsBVmnijRmwY24k$5YYzSyv7DRRsNjEt45Vv3oE$gtblPGi8ybxXRtbZQCO#mBkIw#" +
		"jU4OagPuVhNGP$u3znClOZuWXBlnOOaLkjbl7hUlMS#i7JmVNnVhyKBAC9FTF$Xv$dsB#4$" +
		"0H5$WIkB6#cEbI$t7tO5xA$k2byFyaFvw0Rp7pdIndUszpWAyXBtKFb#Lk$oH9foQ$oTbEw" +
		"EY3r8dEJavTd6YIkEjRQO$rSXh3hyuz#7t8jmdd5m$d5uyLUOkSPaw#qznf4U23fBDBZ0oT" +
		"NsICpY#Td1vEJpg$EBt0N#GKE$sy#JY$UD7p2qau0orTmvozdA7mn$DXy2UIRnFmYL3WcuQ" +
		"prNHdHe2lAMHcnyYK6F41a9dZx8TOcNCG#8z1#X3lOE2JvG9VoEySQkaQuXo1kJJ4EP8FWN" +
		"yK#JO1dmW97pGlSOvrZW$mvQ3anXYP4YC#m5dbdEwSWLYPSmxgEDUvm5dZdGbyLAhi5$8xQ" +
		"onTWvrBd4lXh#M3GNy9toBW4w6mttNyT#S6$bk0Bn#IDyN8b1Zn0VnN$hDpAs9bpWRmt#Cy" +
		"vJpdNGXyLAhn1VpEIvQklPoNdTVWlyxtWlyv#V4ay7tX$EJyxlmHu6i1cR#IPIIvZkkwDH2" +
		"MkJNXvxWjtIxUnKOvuGjItY9BUa#tkzk3x#aKy3qHxqr#FE7AT96JwpHqYznYMl$OAkyjRn" +
		"tVqti$MKQIzubxWBjGw5y4jyHTndfupvWSm1V6LrZIWznJkCC70TyWn7ydFvwSzkwvJalW#" +
		"zPTvPxjRd3FPwlT2$WWx1#9CfBSYznBt2j4x5AujUuDh8TxgyKnp8ZVPadluTxZtilt0Buz" +
		"4F#T$7XoscF$Q0ryFxaFkWy3tsFk4#xpa7aXMKQI#vAxoNqDOPdxBloFtO#0xsEZdFetJ7r" +
		"gIU$kVk$#b#yEVBiZ$ZlvyOJ#TPssJaClowlXDN4tU8szkbuzb4nDbf7ajVHolJneB$FQ8z" +
		"NOQyTwOCq8oWM#aBkd9JtGw#NrvGE1Ro0V27m3amZsM#MS1tmFUqLUiRi1uw#$XtnlzsGPI" +
		"TxUtd2l1DhBl0b8JVDcubpBmdA1BqozPaaFy0xm3kG3W6y07m1y0v88zZl8kGpu7lSEzOw3" +
		"$Vw3AwJZ8NzYiemaRuNRr6qbOglWplREySxrBZ0vW2$aliAItirRwrtDTmE#tH2$WNoRiFw" +
		"94FXkSAu2lkkz6xtRlDjP7#ykxtx8F10ZKsB41tYFUIzuBoDMvhq3$W#zh$X$tLUn$b6fNl" +
		"z2wPyiNVtvZ$nxtX$u#eE#4Rv5m2T2fpt$sZl3QSY$uz$oFvdwu$t9fSYK6F41cjCja$po3" +
		"$YeLECB#2Fw#WdPVi3NZ#BasmHy8iJuOnx67xF#4cHAZBZ6rq$WwsVWerADB#2FwDjLoEuA" +
		"VBjId7oRW6zNd5zs5VZMfE2Bbw7pYunDqFZe$2Bv0toxffnVKZ4KYrgAWQ#OukJR17p5m5S" +
		"iy5sPWYzUXl39M1HViO6lE0LVAeOYKKiHy1LHd7oRWAy8#8e4lfjIyCNB43uPY#8hCl0LXV" +
		"W4xxGO37r5BNs1ho$5oRS9#Fe2Nr#1xuuKVF4oX4$6elZw6lZw6lY8TreCXZwYbZxaj6yJy" +
		"FK1lZxEQIpcBvHnPnaoX4$6elZwo9H3vxy#CVV$eXXSxodakEIqRnFmkS3d9k2Bbo5yCXR5" +
		"vofyAu7FJHb$gHX6Y5f6aDE#JS0t0lX6nA4B9S4pov0XV38MnHVe0RuHCVQpCBXdy96Ybf7" +
		"aj6#JIswCv8l15yW0NoX3#6GiYc#aWMza3BueXk6Ybk7aj1zF2VZIofYIMdyecSHjfVSMl7" +
		"kJqtuy9U1BAsDAQlsXP1AtbHugU8UIqtuy9U1BAsDAQlsXP1AtbUujU7kJqtuy9U1BAsDAQ" +
		"lsXP1AtbUucUBkHqxvDc1$TC3#w9U0BP30$GXcQ7p8MdH#17ioFRZ7p8ugXYwYb2pdjnrC2" +
		"lhGofgJM7qecSLlfSO9t73djnrC2lhGofgJM7qecSLlfNeAt5pdjsuJ#xON#xPM0Bv11$uO" +
		"orByo5ktVG0$wjrTC$qOnz1Irz2IdVPk0hoVmzKp05yW0NoX3#6GiYg#dWQzd3BueXXwYbX" +
		"xaj6yJyFK0lXu9#08Pu0jb29#CHV7rCF3rYC4NnT1TrDATdFPj0hxkmDUT5VdX717V9q3OX" +
		"tVtBb9yimmPmYTZKNpTVP9Z$Xd0rpq67ygjsjzWVLWHVRdD$SjTpoynlkkmZz$5RUNj0sMN" +
		"8p$skGysoLtdxOPQBm7NP6SnsyWluPTuazaLR85t5dBNkfS3sM9lCRkQNUOUYRXyaeknIzp" +
		"3sVdi0dOXkuXTpAvaLx5hsBK2UKVZgOIExltqL8BrvJQcljoMoLihJBfqvIf6pqg87F5KWY" +
		"tt863TIJdyBFz1IaVeQSfdNuFZ3iWVu7Scg$gZoAfE0tSz#uMV5Ooti$XPP5NmNexSMAkYr" +
		"UkSDzt7fJMSjztMVbkSlScgyc#jkF#$cVsSQbLdKvnL$GqeUufbEvs1hmtuxnSZnh2gtrPQ" +
		"bNz4sDrExcNUy#mjTttaIpTKr#li5u4YVaGmO3$0tTxhv7phTNHharsHjzdl8Kcq2RwtlzV" +
		"1#TxToEvKJmBrWDQVgIoEs6z#3oSFs1j9xFu6QqGKIUn2i$bTajl4VSAVcUTSxVt8hnFFE5" +
		"tdpkVNmLzFlat#1duTUkYwv9Q1fotAvtix4Z#Q8g$khaCl7OoQvz4pJeYV3DwD$6JPCg7pP" +
		"79HSj#N8LISn6Qx7$9h1C9hWF0Q#El9jmbQf4j6ACldOqmI$zSAuJL#Hx6gA8JUa#mN83n9" +
		"8Rp6EO2V1AwJeWI48eJiGMmk45vL7h6VuLXYgIZ1VBZAxmXhYnmQuvGVndGSiHLQ4WXNe6n" +
		"52bqbGp4YKJU$iZpoBkTNekwaqddaenUkz2w23Id#jPgvaAJGEvrodGCG$GMn4mt94u7on1" +
		"IwKeOaILhusl88xLWBpgHIfdrXGn5NbXCnxopDWVXYn4um94yWbq9hPQZQkPPVKHw1IxZaK" +
		"dw5zoSNwvNC0PQ$d3TLx0$dRSh5IlcM$nPYzsf9PpE$5nBtskHi8XxC$guAuHNyyl88FNWv" +
		"TiwaKaO#48eUbJaAeOpz5mX5hl#sJx75MX885qDYiKr021xsDDmpubkebzFwYRKqVlrydhs" +
		"GRltqpWhNJ#oSMBNTpLYrd$CB907V0h$0woBMpt3jPyYxp7k2mZXYoqbIhf$U9N4xAlzGx5" +
		"i50lk7KUn2zdLXdGVZiNj$kkkCbH$sXEOyO6$a#Mu#ubZTd9#TJmcvmstipflU4#vEo6dkl" +
		"2srEx#QsfqVdCrkDPm6cjhxbhD9OYVatfU4tFaknUg$IUJEDzw6PAl3Rk#9dPvXHt#FzdNi" +
		"Mf6Ttjdi$OdyZN0AERNHVmyZOaEMa2J7Dr3Q95Q3hCutn5hzXn0xS4Im#rrm2djTdGpZdxq" +
		"z5YFcJzJRXKZmFUNzvMxcnr9UbXkE6hyGVHjOdSg5L04$Ll0cZfhKquB67Y87L#9uIKBk5z" +
		"hZHPrZD$jF#oJzTNIyE8Shg#FyuIponj1u2RL7nmiqORpGoSaQBtTBv5etD7tdSBxAMG$Ed" +
		"mCChTnT69rxLyNhnlcZcbWvLab#vow#2l5BwOJcJqTihVEPoF#EJcZiFEF923effvpGWZTD" +
		"gKUEPf4$MI9TuZkgyuDOaPQGExuff$Nfq7ftZ1dF1XF74MmketvunZ$Q#rrAUDp$HfAG$oR" +
		"BOViBNhcYCLdYV#FygFbIINA9s7DQGk4nofobiEvnkip$naJAZpEGIYHVA$h6kTx$cXy7oz" +
		"yi#kSuYbE9SoEL1dmf5EhG#W9KHXb$mbyfKl0HHzeavrh$D7ybyayJCYlzhnHHwYkXAxW73" +
		"9wlA8zA0xuK4kKg9kDYL5qZzPbb$3yYfAkOhwmdllSrRFKLepFobug#yWxtltGMe5UF4LeN" +
		"EfDaAKxRA0tuKiWxJCS4AXLwooaUwXUebiYGSgqUN6AWabe#K$IbTvJ$6Ly2VSzA3HId4ky" +
		"GAWtuKYZKeVK5jZRA#Fqw1xhlfxHDCbzp#9yg8WsVfipBJocFIWE#50frX19QsYwZ59VNV9" +
		"yw3N26U1pdbyTj8axudoWY3P#aeFg4ygWqu4iXoILZMa9BXsNyGPs3MX#aj4qotxbIQVbOq" +
		"IVUMVx7MX$EBqoN2l#JW2#5GXsXX9Qso$Wnkip$s1fNnnZZIchvID77pht#H$mOhP4VGt4g" +
		"4Vx70LyAXJgqlW1Lf8mVeSlyZonKHnYef9P35NtaFE0Voey8K1r1SIeH$aS1Nmg5EhI#05M" +
		"aZ1#ko$n3BLI76wYabaCK7UeyuH$23mzG7KvnAX7#eG5V2eKwjBu0LQIC7wRB$4CiL8SPgA" +
		"IMnOeESPxn5$F30bI7KPnAX7z8m9T2eGwjBq0LAUD7wp9$iONgQ0ELrB98qMAtZR#81tisF" +
		"vhYL2BynG5V2eKwjBu0LQIC7wNB$4KMggCCL5BBGaMBtCx#GdvKWEeeYbE9y1S5V2aKwj3w" +
		"0bIHCdwaBlCNMgYED519BGShMkWM#WVp8mDKHrASIeI$CE1BeL27rXUWYfJnGtMPVx25wb0" +
		"3bTJoeQA3tMx#XpoOF$nGYbE9y0yE#58erA7r1QZCCfoMlOjqcVzXufbBQlb0qOTkN$y38H" +
		"BSjPEbmlymu4kXK4SeeUgEbCaS6ORdOTJ5$LMIi99$uA#Ivs6iv9U3F$6i7MeB$d0ULdVjv" +
		"3sALVeyJ74YjYBXFApUmmDVu4TebU8GrYLzgYKY32JpJ1bP4iHblqZzfoWQGhwH3aZd6MyP" +
		"CT5xZo1u6kNFf4gA#emudPA3EACxDI6ljpYnvkTKx4d$IVSBkZSjx$6mZbA$b4HfOitEGq7" +
		"wIOHFcgMwpjYQYmpiuNtLXqJDVL3pgGBvASarmq8OBS9kz3i3eplYYAzdj3U$o3O8pUyAlj" +
		"TTBbB9TvNVn1LQH#TDZpbl###WLM#xcqLjx#XhLGTfyd5ztbPVd$llE9lesjVPnDBU5qc#n" +
		"lMlbMyDWlTQd#wbNnibdHSxDfWkjoLbIHZNQVXh5LrBlf4EIEVPaqsF3LrkIyeIMuxYxfF#" +
		"6aLhoKVkcYXX7CZG7WSdAYrAnfQK9OOS2xXELRI6V2CT4EgJeLtVVKgBah4bPKaOvqi3hcl" +
		"a$mv2wXh$6hwKV9lOGXKgEJ731lEbCaxvijIIOM4wQ9$akaBHDUGRwO3GFXdQxPkcj2WPMr" +
		"AM678iuBf4qHNa6#c0K9yCxVhqIKV9s9Aon91Z0TVLYYuXtqW7XFfaQDTtezAYP6n9MMB8i" +
		"O3hAaLNas#a0q9zChJhUq1fKJAsf2mnv5Z0TQMYgyWtqW6XFXbQzJcrb1ObOqlA4aEE1LoN" +
		"AxgIV2CT4EgJeLtVJAL5oTYIiiIGOm7NPOek9zz81uJwP6ZNjx$IecHiILbYoB60wr95bv5" +
		"lf0D2VJAqwvkhj2WPMrAM678iuBfOqQNa6#c0K9yCxVh#exGe6LjIbXXoBE2wID75v1lfW5" +
		"2V3Atwt1PAYvAn9MM98SS2hWiKNKI#aGu8zSdGhazVRoaPMrAM678iu3fFqGNa6#c0K9yCx" +
		"VhKbPgMiILbYI770gvp5Pr7lf4E2FN9qAvFNKLh6LjIbXXoBE0wNz6vv1lfW52V3AtwF8U9" +
		"ixb$ljCcLLBeD#8w3Vz2HUUJRwG3GdqojEjhfBGe6LjIbXXoJ7FHd$XTvqBnbCUnE7t9ho0" +
		"m$OkwN#2#BdyRIlVh21Fd9$QIVwQ8N#jk5kULvLAxFDlHxnVcxphYF5CWVmL0F55xwkdBtQ" +
		"n$quzgzoQ5lne9gRI$CKZjqL#DGkr#6xzDwDk$II5dkjz6nTh4aP19VPQYJQ2zjT$QyDjeF" +
		"KhdDCeNiTPnf6KYjRVMEcpBw9eGgYl6yYqZwpVhHA#gkXDxDMFjMzAheTtbgDmcjV#xbgco" +
		"UvNTjoxjLNQlillMPPb$MRlygz9UfRrAUvNsAkrLsgkq$szeJt#VWF9q#C$V9w0y7VwZzma" +
		"ojao5xXDi0xrQfRrA#nQl1DtyRg4Vin9qqs4S2PdKbQ1ReBshtzNmksazWVQkEemZBHEflQ" +
		"lM4La9kcezcLj6yffrOYLGEhRbNgtINgNzVqUx$RGNU2BQot#pWidtC6#DVM9cXNyhQ8Np7" +
		"M8hmBKYXMwL8McGH9LfNylOagBCYCiqQmLVF8dYduYI4obElasiI8Nq5puXe9u6rZAsfD8P" +
		"oabEEZqTZ#WW$tYK74znycr2VJAChq$9s9Aon91Z0TSoH8$obo6rZEBasuJwP1XVdvAn9MM" +
		"993qUH5m#XpL8rKjSNz1uyBz86WyefwV$lf0a9MGOj4EadE#SDtLAlDNyHVXEc1w9pcPBxd" +
		"DHy#VEfeIQFtUheQxF9Ka96OOQPCrYL7TIFEiezDU9cF9jqdbQY$sMKb3#EM9rj0ozfHJAg" +
		"zhNkVJkntKYVXtRmR#EukJRfFCIwbFb8bP7ouZwhhFb$Ej4VJT1mrV#JIYvYUBaswJp4kfJ" +
		"vRQagEycMyw$oMq7$qR6lDh#ZIYvaUBasuJnASFuyQbaHAnE8CD2JK5zClS6zEXm$mQKt41" +
		"nyctIUMZPN$HrWaZxL3c$1B4wMaQqBv2dFoftEu3tUlggWNyzIgwdEFas4OyCOObPuLE0Re" +
		"5xeBjSbvEF#guFUNLSpWAlC#Kwt9kgMdjzq3yxkUszCfOq$xx1$2i2rsBrlbHeuG#GIy$kV" +
		"#Fjv3MLiy2RuOjte$oR$M$WRXQn27a5CfIrUws3PpNVbv9I9enfNXtdaoLHBfyC3C6AHczw" +
		"KWdbErzfFfkSpLGk9P4#K18zmSaFbBaYVxAAKTw1$3JD5o7ai$caHN0MQRt2IlEeN4XBpjE" +
		"2MYdt04aYxu0GFscYT#Ce3#K7QZwRXCnXL2guzfSavFVN#WpzbBS$lrZpHGZvQCC1aakruO" +
		"2W3IWNqfBpObqgSlUJ9FBsCzgmlsh3Ve9dVyrdav0vZae5rmn9Gdw6rcVefxmP$3BDPvDNY" +
		"FBvf4Lm5Xc8g0qplBs4D74ESn$HfTuGXDCbYRpfHXjcg3PC5pmpD9zDGkOKAXLSSoG9#JbQ" +
		"dw6VykRmYpHVX2wICeYTBNMOY4JvsG7dHRgKOdosehCfBahE5l4vAZvRyCm9#2oICbGgk6P" +
		"94fAp0dsAK#NDufTglWXTAcKGMoDrQ0rI5kLh0ivBTId5zFxEr#Zz79nhP7qKfpoKpj9yDa" +
		"aPAXMQh1rRwpFE3vJtERzGyzb4#L8Blq3lzk5vWyefNtBo2tKfnVXCHHTGNE2#WE9I2#8pA" +
		"HzoC#D8ob0fnVIQJP9qSb7w5ASyGoUlsV8CpMUwY$KPoEjCSlBqvOfth$IQBK$ZA4sZ2Tpq" +
		"57jhhGjhjj9bQihiP4#QM96hxWz2a$5D85ENqDT9XeOrtWphPPEz0iKdh05TwQueEdaZerO" +
		"D$sIzGiz3wV63un6gDzJbjKwoHNcwl08Fgv7VNX9PrMyVnHJcQJwRTBcsXRQhtvul5psxd6" +
		"BQjubAPIYUsflEvDjJiunHiroyiTDUSb9h91BPqyXFQobMWjWtXjL7$erHCpnYSVtstnApz" +
		"yhJ8otbZkJxk6FGfdt424onE9qZ$3yWCSkZBqOm4IznrTVNv5UndCtGCyKjSqVwVv0kqkCE" +
		"TpQbVXKByd#IBjMBVwRg4Z7nXIq$#3QmEnmkzGjRylt6GyXftoQTPuu6iXoqpHTwruTbai$" +
		"VFuWdtvbx7Vv8$tLtZFywnSatIRHCvBiRtLdggqluirlApzGjTKSY7ADRoi#Civeea#l$cV" +
		"v$fTNucQH3w5ejOgcwLgVg8kb0rsh$BwLhDLyjTJdBH4pqWFelLqEIUi3$Yr$hZ77wy6kXw" +
		"rh4UvCVeJjagQZl3d8s2SaxXBj1yEEQ036Atn0bKVAa28K#nq7iIOiqpzL2ucgahXRngrFe" +
		"Rbag#E#6VxTDGbBoN2$uhnSnYbyV9IfH3lpECiS9#a5PK9TB7S6OkvxwWIpeSvzJFpZzmvb" +
		"0VAeVWh#4Vj1Vxw8lKeXlVZ7pscGVNtrBB#6RNyXt3lDt2zxNc#plXhpTKgX745fV6BF$d4" +
		"4e6vA#Ddz8z6w4#UVjIEkWqbpU#hMV#AgUcircgxqM#cu4Icgb#GRGZkuruQn9UcTKb6tah" +
		"hvtvov8NhV25SOTxgvF$NAmyvfgQDfdm0DxlfBKGZeZ6FSJOxKvHnlQ9lzjRSVzazgyKV#e" +
		"jl6sjlXHgdlQtUZtqD$3YoDtbfRnNalkwL1p$BmCQ$Jxg$yZIJBzoKK9DOeGDNwMMYD6QR0" +
		"II2q9Ay4ULExl8GdnFQ8KvEqkTEqkAOo5fFC4to0XDqWIfQEayn2E4xBZa1hdZnCnYuIcSQ" +
		"p8Lss4Z7MdIih0tIKGtCNw#tU9#5rHqdb2omBt5zIu0BeN#0ie7IMTn#YxKtU1Ltn3Ilic2" +
		"Svntadm1wNgYMWRGAibhPTopOnREVbzCgIM8xw0tsSJoV3xvDWGd6g4n8qJdOUr$YcoDks1" +
		"nghNMuul#kFBY8ylevZs8xHGXe9x8JcRX8pCFrvm7e$uyTgtIUSbh#nSt9kYawdWJtUrjgF" +
		"Wtv6SzasYbLtcQztE7kBCleU8xwsbHRY3aDb1n2Y#WqsIHpej5xIXH5rneipfw#p6Hae9TP" +
		"suGtcx4zz1QtB6uinkxtE7g2lE9IALg2d0KcJOC#plNGcBsESggc7f5cX8wLErIbLf#1$Mm" +
		"CzGSk4fIcX0Vgm6zohrJRSpzDKVFuEVeNSwnDHE5vpUOdUwJ5eX$lv5E$ZT9H6tzEq$oXDt" +
		"BRh74ULdWa5eBgSLSVTnCcq5RBwziFpsvBHlqRleJVZ2lOloTstIqixj2BSJ4jk96CMtiqd" +
		"mRYTT81UnWYwJEeBrThlqwot$Y6ydtsjtRk4V#LT7lmXALk3tY7VTwKi9b$DxA6qJh7qr#S" +
		"wfqJVcwHihwetvjIg71TzOqM$IntvZnHeHh$gtWruLCUNRfFDOBliGEvhypjKiyxh4VvMkI" +
		"zpTz7M9#Df9eRzPoDANEJQ32eLl4F9lWL$YwzzzdsFrMHCsqdy5#RVuhw3y5Ur7w1OP2Ws2" +
		"H4jkOSE5J$5NX4RZBfHgBSdGIVuzyltrshT9vybU2Mr5ey8lTbxrYndrIx5DGlzw#IL8xpl" +
		"lUxRM#zgJlygfNWd#Odk5ow$vVIKfZ8KaQdY0Gly1SjetYMVphyWNiMneoRR9Vy3RdkIeBF" +
		"oJkfqtvGdO7#UyBSx5hQCdPMUpqq2VXWsxR19IOw5zd3zMkB6KjadoI1VzyyS8$Z72KNoCJ" +
		"Ppkyy4dHt7oJP8oK8JvxeyM24UBcF9D4lMDbYu5HnaGZ8PFhaoaBP8yqjdpGROYABF$Q3vq" +
		"uV8hLGUJumTJsYPLMY9ZGAVc0zyeIZQIqxvDCi$n4FwX4Og$uUnMzb$sExlUwU8qTN9eFlX" +
		"tivfi2Np4$BlvHl9jaYMWUuGk6kdtQDycdSVbzngVXRvdAKw#JK7UCuBp6SWyGt7oRGhonF" +
		"D8$6d8F4rnycqAyiItR$XJa7cAukJRfFFyWQ950nt77qXnycqAyiJExm#0p02Aas#JpXDrq" +
		"szI0$ddaYWT9JNBvAzU0unv9x#L#QMYpuDOG9elwJuGPBuG6hxm5l0l#1VkCUJRf7HOp#K8" +
		"6VajpCyKVH740bASdoNM$WN$L6ZuL99xcew5f7H4lg79F$DV5jPucPp$Cl#KV9FuHwBqGVz" +
		"bsZsnfaPsJt#JaA6lEstIladyTCfZ3$kRh1d#dCYdxyy#1zeaV8E0x7Jmd2zZnAlmajJ3$7" +
		"pskFym#1xs7wQqJU0w7ppdoHWFllv0CVyXolSV4kuXIji4hlF0SwwCyM2te9Z$2ENxZmX7l" +
		"qazOXEupWNFEJB6WwzSKCn$YVBzbuHxYT8sWUiSyAoKCNvE88kO$o9VYVQ#2BuN$HSfRHEu" +
		"LifyYe5NozANSkchm8$xBu3l1OgJRnAdtoFWawCu#IQnnwaytTrFOooTwid$Iy4yyGkDk0E" +
		"1lHxvV#aJXFTpz1H1ShAKOlnKDJvUevZ$6ZdGAy8tY9#YIwrHzQp8VvOS$7l8Dmard29BAS" +
		"RLT#3yPuJKC#H0pmhV8CaZdMZTJoBdUUtxpuEU4Rv1OQaGofNt8Nnw$cuM#VwReEU5Rn3zT" +
		"YXuf4NfdkSw#Fln#HGdtoIw3o7pmITtgGL2RW4vxPiKbbBCwjVXaNwbNydeVBs4x#Gku3jH" +
		"d7oBwWXzTIX6SV8jgerHy1glJJ6AaszIq4uHuoz97oleIw2TX6$ISwByEPG$1weZV9FazSQ" +
		"x50FLZbwD15#fezD9WUuH0M2Mh5kD1$gL#5d$JacSJiZaB#URuPz0ladokotEqvvy1h343t" +
		"zZ5ZrYtu7oxpJg4Vf5lk8HtyaB$q$SSAqBc6bC7EA$IyzjYdDqYV#krYNlG3cRTPf2uXHtg" +
		"SIgw#oWU5BkXY4SouQR6AWULHQSrpMFyMUUwKl2R5cFBxxZBloKig04lYGTD#lnzPVW3r6f" +
		"9LG6hkz5#liK3DgcgbnI4FzMn8GFE$sSmlyjXV2$nObRyQhmFUb7dehzLeUwND7tAYxMGUb" +
		"792N$BnJ2b$IjZ8iIkRRyvFzYIVsYmw3y9#Tz#E$9k2#V2dm$r118IlxtAOGlwHSP5oK$IZ" +
		"#2ydqTwd95Fwdu3oBtXr1382dvVw0GlgJtPLoKV2TzIeKZplz1ZZXmwN99FyguTPNxdRbE#" +
		"UfUa0nT#YfdYQn9s5xUctsHukJp5xLlae7#EsRynOzwJklv4lBvyzgtI7o7dxz0CT2BmZT9" +
		"x5ZyDOfHd7oBNXNbhvBJlaMtY$BRlNluxHGdtoBn33#$bM8K9zyYSMNERw4OnSatIRMz0Rz" +
		"5zmzVHwi5#NoTzYsIN$g$cM8K9zyalT8AlbcfAm8NTmd8vwzetwI0#rIhBqgC$X4hhUgVsq" +
		"J$t4OnxPiKeBcDgUj5HbTercvWhIns2OlDiTQv04rIRdn9c3DSvUXw3X7r38#WEKJLlIG6$" +
		"V00lVopLcjtU#TZvrldGxTsW2a5ZVEkypquUpdlMHYZBO#ps$28tKpqHgwpZCrodbVxH$0y" +
		"IOej0hlHqn0QgRDxefsrxVIpMcIBMGAHZOTowAHS68jqlvHSPRlmVxc8Sq8CKcUPAgCItIw" +
		"DT7agKl6KHu7ee#7EO5cFslV3NXlkdov9w3vTbGYR#WT98dxo8Kkv1qgYDFaYF40Ie$z3Su" +
		"1VA3IHDILYgLyX5lg8ZqZhPq9VeUm9gTyPvgidiqcNgg5GfvNUW#nHedM9C2Y1xba2su56t" +
		"W7gZiu1YNFk7NkK62MHyLDENloSaxQ$Gv90SeSrnlKVvQraSUC#SaA2hLNTq1ICUgK$ferg" +
		"r0iDNdKBgL6tm6RKBTApL7w9yUw5b8oPjVJkHUfgvus9M3EcRl6t9D7gHdzu8zBQsSOaLx3" +
		"urOvPPR5s3X38rUxE35Oxvcs7rQv4zHBrf#JNlNG8MscqLRTUz3hradE7pFCU3RZ2$oIzAB" +
		"GMualueWWz97c4e$X34RfJvZlqHW75xupGNJeVZk9tHUW1dGz7yGTi4hWUo6YdIyd1LNvAd" +
		"dLTMMASroAhktjEydeVcpVSsBkaHLDtkk6YDvSuBwgzAsc#2hcqptKPPUw5QSekDieYjd3N" +
		"s3c9zKNal1qojQ7N865lPaastBBJGf2RVkx7rPLwMb1$$B5G0#9B#6Cs4QVYIOT8rPDf7te" +
		"3KkvS1RRmzc3MkI$ZVXggePJJNy6VLvh4xmwq#7LDmrdOdt5sZ#fQcNeVH$Dxe$#6zIQcM6" +
		"zbOBsvsdhy3Qg9VFw6zatAw4uYxNMRAeJnxPWULYT1xmExXrdqUVx2b1oTAepq09qQIwmK2" +
		"tfuVb1If4AQgwESqS5pR2NcQ13boVTMgEGafjuESeQdpDNXPdlu8s6AqpteHoBqiE0HVoB#" +
		"S8JMotnHJl7rDidyS3yrTjR8NxYVXh7KFdJte7wAoT#JyhrQMXl5dDi2tHjZ90OdQ1gQaBz" +
		"tGlw8XFnH2Vcb2VcZ4$B79kIFJyYVc92$JqB#lWdvKnFofoVapqp8dvsGVsf2$ka9#QiJyg" +
		"zCoByw8V#wXFmR4$BlICX$EI7$FP5lZFZe$yfC7V7Y92t#h9Lf3Edp4kpjlMgFUFgTpQKxP" +
		"7V7$#RchEV1$q2BvqYUc#0T6yKSW#ZD1AJlsQkrLyjgvOk2v#C4sKyJyhyGEljQE#i$ax9F" +
		"2ooozcvfAbodPShSIogQCi#YmTasBcRscPkdLrPtEpCMZazRBamvhuNZKyc9UpnkXp2LEGu" +
		"lNzRk5eI8d3U2UqRC9TTJnAghd5rJDBrcvhWTG#tEMw4cbVFEbg1pFWWmVHJ4Ff4wozVYvI" +
		"Y9BmFPhuEOloKutAoWZtA3c2zmE32Hnx9ODLQTrM0rMIss7Su8Ex0TMMss4yjcTLXTd1hgi" +
		"mPiPzQGDMADSHfgofgn79oyybW#QyvQu5pHYkt2MhCsk4vjnzgp0jQ1TMITM6VM1IUJhgmR" +
		"wyvwi9wi5#lD#c1#5B5YjYlhn$gptTW0DX3pPGysYEt9zcA3sH0sb0rZUsECZX1NleoLiZ9" +
		"WMnx1HbUzKu1j8LlDPcm3xSXIxNWaWYqR9TIELzbhbTGEMOFTZhB4TfHPxN2m3f7yQ3Q6ZM" +
		"NZs7Ws0JqmYUr3xxLizNtmCj2L0Ps3TJcAReheWO#tYR4qJRLZ5hiffXrRFtudw0TtcyGVs" +
		"hzqcyJ$$ulzjrNyLVR$lyM$R1l7hySFdIYsHVmBjt7xLuFkLCjJRxoxJU1V16nb0cKxTWGx" +
		"aXt5ZcR7u5gm2x1j6$ZpWVzBr175$$CsWRyrMY3jtmWepHRaLoB#E$wc$Lk2Tb7e9rOQwlC" +
		"hZFfoTWLGtyskOlUYdbTGJ#MX$ZjhlSlAAWtdGt$ZEft6X8Sw2E57AGXReuwwR6QbjQJrts" +
		"Z98j4IYV2858GqZbPLOaiUht1BI5$bZPtRjX6S3ROHdFEs4PpBjX6SPTl86knk8pWNLHZdM" +
		"UpiAdl#W#id8TeMvdlbukooZVJxYcq4PtQ5SNQ1dYgSKPojjf5#h$XytrRMpyh5#S4sWlE2" +
		"RMH$ZyxtJLjWJvhlSt7IdiyMi8FPGfnf5hD3sA7iC7PuS5#cygxqAcxnvzcSRU8Agd97SCM" +
		"le2eNP$usWdDRkTBRLav#5Jy1LAuzr$n$lnFCsyfsWkXTxWUsO2TWuYwtn#uL6EkbO7I0il" +
		"9Q4hthChU2TvHFIa4u2tMqgiIMH4VNFzUIbgXZb$$3bcHdt99Tjf4hkIfB$dCuiwjwl0fX5" +
		"SAj3E722i$eVmSXFSSSzvjtDX3I$bSFDgGd1gf3AbhZ4F7RS2lKo20pAi2MdSBvzR$sVCJ3" +
		"i5uI$lF5EROuyNmuXAqroaQnfQ9i6LlEJc3qVqFlHfd7VX1ufwJ1Ux6XXNvb9YrN0MzskIF" +
		"Y1dQZ#Zs6yCvL9zQa4R7A6X7qNs4U4EUJamJ21caGjcGNefxlsIMg3uv0sM#YTyj3s8fjLB" +
		"$44C9yr94DYII4NIo4z6vdja1OJo3yDWt2q8Ahq1wo8Dal7tMLXx0bMhPBW52V#PCGxcSXV" +
		"1m8imH2Ho3CoX1Xja1OZzq4X9#MYt2vi3eXx0w4DP3R06Cp2M5B2s5Py5p3neJd6k8GEkn1" +
		"WP3gpKUhoaDO4Y2i9n1#nZv7JcQzJFWw1NsS6Rwvq27xU556VRo$G4ZuJX6Zi0OxBUDHo4J" +
		"eGGVXyzBW8nlK4#lJ$QWXYzqihhaoiLydb4fyMS17p#arG4vcFSpGfbE1ArlWItq#CSHNWX" +
		"Mh9HiD78i4riO2ArcZF7nKWrndRWQ#ClHI0upAJF5bWJoiSeJFoR1$IqJ$ZXRsQvN177QCE" +
		"Lm3savBW##f2BuoQDJuqlLlYEynN8KIlc#Gbm#DvVUle#mdvySHMAC#ISGtDu8lsvWVwVet" +
		"n7SQueJF4$YUB1VVPeo6bWAV0tmrmN4IT2JXwvI2x$q0NsRpOoviy1wx1wsf1toNPc2$kSR" +
		"y83sdiGioNAEPqET1elpv8Tzn8eGjWP1IzO6lNRduvc9CpG$ijnWQd3JhNxy8FiRM0zyN0b" +
		"$rDFXMMGYpWJ1RsA$yNNWmABHVDZXMi3iJyVMEu7jQs6zvkVENi9K8RAE1xM9X0oUZzMyXk" +
		"nus97mBK7ihSAIpNnGVVTtAOy#KQpzQ$wO1s$K2cylc05dzZDQ$HfZlGmI#5QYzFUeY#Spx" +
		"bzuyA2qNtoBZl1e#7PpP$6NY3DqJjVGMjQJ35rrVIe710p$XMvyMNolsA7jPhAuclixbudi" +
		"BUEuH#5on$j4zrsHyYoBuN9pIFVQ8m9Vwve29Roue2pojB7ojoyMtZArJywELM5zQWVFCH7" +
		"oj8$XQWpnW8tnVbOFlV6XV6C6tAeDtDnUgNmq8twKYdOolLGJVfUBDaOK2NwjoyCcQiYryJ" +
		"hduo7hrWlwbKUAcmUT6y3q62GzzGFXOEVZeky3aJ7mxbOkFPAuEpWVr4ByW3Rvh8$ZcipN1" +
		"#IhrsjJ6buKhpHMetyHN$lgy0kNoUQ3U0bzssl4NdR#Tq1eFjHE#QzFWMmP9kZ8bVbeV7A0" +
		"zCyFrRo6xCh1VTPJFJODlHGHVFR5$B4gu2sxY6oRmNGZPeRZMd2z6LIRxnvlWb$TkXW5V5f" +
		"i9V2iotZ$8#fdX6wBmLMTl0zyxmBSYe$FVGiZF3yv$3dj3pBGaV6z4y5qjpbMPuCjM#BAnn" +
		"z6r#hFY$5p#VOHV12VXkrxWoqwBRs44NokiQfdXSnG#McCk4MlDbHdDZqk51RNzwi7gSy6J" +
		"X6z#olvnUuRu#WNzUnFmrSCLqit0vvQBRptAfVrk5#FF5Jj8fkjVAmDVklrj6Ke9tqEGM8O" +
		"S5rPObz7wJ2jUos3#jcJBn5LF4ZwMSdvX0RvqwpDfbNU#yCVL7yk7AmUVuWG##Bq3oGHyAB" +
		"7m2Lw53x4q#50AVDpwgy9NXUz$0HzSUVXMyPY$Yk9BlhwCucDFRztuChLV7BgjgN#hy5NXg" +
		"y9NXQyANnM#$n$nqQzQWMvn$mLXHhzVslYeHGWp$NsGxgGi4dUzirWDyGjc#5s78OGEkke1" +
		"OVnJ2QUpvgmUMH3k73QDlI8G4hePR2eG2dJ0Fbi#zu6uUEv3MAzpAZg1t35#2QeH$98MVBa" +
		"D71b$kOsmmoK#KI7i92rBpqh0iiYvWTq8lpESVg82VSZMKi#BUzF5CS#crWLbmLvtWMUQkF" +
		"llYg$dLSDrQWtqS8kWPya#rETJODME2SWSM3MV5Gl#6W8TuO9LbOukGdyXR9XgrU8ugx9Ik" +
		"1aaXJ0BhaJeCR#7rzwowXI1VLQgLI5LX#oQP5NaDuS5mXw4NGLsrLUoJN2rsB7iEDOBTfLF" +
		"0a4hspMnh#w2rgaedIwnir8B#oA97VdThV7xaleTuG1s83ieW$5Iokf2Hy8JEA9bBM2dLcZ" +
		"RVjIFo5aasjCHckyGDTDuWMRazK9zwYai6ZUnCt#8NfdOkUoyJ9vn0cUv2CLycmTDDDAoGe" +
		"HgLL48OMq38Nhi7q88QvTlmphYUO5IQKCr7ZhAkGy7X6haRn52CVepGPW5YTB4vwpg2OHq1" +
		"onBsr3DkevgzBOIDfmcPeA9i1xgcvRMXgtW$Y4R2XpnDfngs73sber38VCFZKEsdDehLpmH" +
		"hiIQ9X6knfecR2ZsCjE6XR48YmaXrPSvGfJM5R#F$Ys4Y6q1Gl5xUvQnziSW4wC6YDAkdrE" +
		"DzNEsq5S0VONX6YhsQh5#Xck$q9pDJaw$twdrirMQ7RLxF7PPW$3lIwXXER07oCcUD1g1VJ" +
		"hicIrsTjbdXBn617i#ErdirxGRnsilXFOIrZAoRnKhxE5uw1vlTRZi9EHaTO51tmtRHLYW8" +
		"AMVwMcskXWFzOCTbzf8CuknrLoV9kD625czRddd6B7gsP9KLaUjFF5sgGwxB4UfA1DyCp2I" +
		"2yICoOVbmr7Zc5QNPnAqg8xQovAVEqqvBGJOqrWz72#9keVOuqNn5kXpIdIyOBrGPmMKpf7" +
		"ZfPoJIEfukT96BiuCTEwz1IVdNGCCvPrxIzLSKkSwze8#zmhPZlfK7dn1AvIbCqxggJnoEh" +
		"B$CZd9mehw9Bj8hbf2adPyuoIhzEbxYDQpmKWRpmQh7L$smoYsL4aijv5Yd5t7fiYnPzbj$" +
		"upEt8KXKY5jdhcfPwh78qMlM4YDbOMUOguXTiVbuSekpjihWMfA9gY4N18g9cPuRp6gKgy4" +
		"7eGcUYQyfR1VZn2LxbNM9T3Q8x3L5gDYFzgeH9wmLSmJttNj9xupijLTwL6nYsDHlPI4wX$" +
		"gmTV$cHuCPq3SjPp8fvKpWYhTlFpxgFIyLEYASTNenZwFFKJi8fM4AZDReQPe3quDKR7P$u" +
		"Qj$iwuKdB1kAf2LOMg2bKLgdyBbJf3PNJcYgBIEPoh4zS$lkC4gEnpdKOn5MU66h9UN8dM0" +
		"wfqrqzJkFKdxWEBktRot8DKz#2EfNvNBVuyhAw9UF9Tyr9rrrpVqPoewjnN#B5tzKM9kckE" +
		"cEmNUTTSNuCL9zMdThhwzlKAzHutxj8ZdbWVbrTeeZw5TIhgqpNFJcnfeV5ykhWtpUKzdec" +
		"ofP1i8PxVIcxf1f4comk4giVBj$4YuzwQULzrejbcTOUwd3O7rtJLK7CDTYdYbxCh1CTLmg" +
		"z3DkRfhkNeJQc9udsQNPIb2zG8rwErK8pTml3zKXhXg8$cJ76IRZLdagznTGzrhyZO2CTY#" +
		"h6XUsXBnc9ajkcniKNriGtbrvSq3fIMVxnz$qHzGdDCVT2SMj#7HdtwYlwEuAxWLjc#glgg" +
		"wgkghwg#glh#B#jZJgPdl$#xzeaOrLWS$AwZpttw5$LoVc7WNDtjbcNw#P82KNy#v#7PZdF" +
		"xTntHtaBrgr5nkllqWiEyJryG$AOVqHwUxLJRAl8hGA9spatjydghFEsPOwySxK7#DgXTZy" +
		"fjKNkLtQlildLPfihkLNRVkhHlotRdwgzAUvNsAkrLsgkqLsclqbwblKfxbVOgxLNQgxHNQ" +
		"Q$INgLzwzTkF#q55$rbebpTNBv7L3tXYHdw$IhD4pEiHV1EdFNxbV2xRFalU29UYRyOmbtq" +
		"$rDzmHDKz4IGVEhm8ixb6yWye$TFUE9JXo9TAFpkwhV3tWf9CUSf8x7GajFFEoRyTYZUHfY" +
		"IISt2dwAUPMUYvZHFll784rQH9xlqquLJh7VowIsbrFuxEPFncLbzTl#bhuyziJNLzy$D1z" +
		"b$vSs7i7tgFQBu$gkRldtWKUqJFFe9iexfxMcz0Ncj$CvxvlDFhFMdgVgBWtRNOS#Ly$uNl" +
		"VNLIZtRQJ#Z47r2#luCrile6y7sivf6Uw8hU5nxu7urPcH#CAlJlEafEEbzwTQ1hcAbgxCe" +
		"2ziZTLLFq5LNl1itHEcIRyEF2gpKMRnf99z5ri$xJU5Y9ugkJ05#$MwSh3VD4z7qRfpT1gs" +
		"hgWtRQXkeNiopwdAtqMqGiSxYL9Es3QALSd#LRnaCKREct3QGhgesR7jjuEdFq78#Q5JXUw" +
		"AMBlNyLC8x7rm$dJN4MYsjTmDjL29CYmfkKMZPo7vYl3$2WtS#Gckmqurwpv6M3NgqNCicp" +
		"VPWTSZ0gfnsmY4Mfb59jgXe3zcwCh6g7cM1x2ZM8TY92yN9edlQaqnql5bZMNpXHxt7BpWc" +
		"gb6pRpcOEjXZcTw6h#YeOQMsnSrtSiBUAzzEGXTzowAUwfzWRbkOyjM9IfnwM3jkVo49vtv" +
		"OLVxNWphqrMMf9$4BIS6RCV6wH2pb2s0yzjqbsQSyuwiBmUyORtd5l8qcudIwIjxbw5HSH$" +
		"ydazHwXGRvrPPUi9fyraDzIoniAKdAbkhP8LiAnB5Vwz9MmvghhAOG2rrYpSr85tqtBQskH" +
		"LeN3ywtYJqmMFzN8Ta7x8oO4ouBloWJRosnYyZ$xYPE$qfNqkcVYJaglzdLAKMV$5vFtV9r" +
		"XRWmJjFWuZmpN5eNv#B$LEaLJw$e0bSupbGFTHGpYYoelpLtXZ6hYhdnP77QcQ1Ng4LgnQh" +
		"5xVV8oh#3TRhnbjev2TSgtOttuvA$eT4ASwDrERNrJAU3xIVcL$VqEiBPJ5$LqteYEsZuld" +
		"yoblt2kowS9xqpAig2sOpuqZJhLh32O0RMYEcjDUNrXcMDz2qCdoQBFy6T7cfZv$pFQKiPO" +
		"S6yx8KHbaxRBi48Qv$SqyO8YvsNOOtXx8fV1SLRfVhy4LCZHcduZa7hv1h5tjHJVwyhhXwk" +
		"tw7K9w9oEGKVwUsK6JVzfv5qcf5J1jv5mLsFJf6U5dSzL9rbcIDa5sNABVuNIbdooK5mp11" +
		"trkMR79tIsB4iWo#Fig3ciZXjNEmrgXN6NfEs$nO1OHcNUw1jF$rcPRcwGbpnerBZYkxDQN" +
		"4bNrUq2EO3wKftmYt7eZJlpE$KnStsU2kaxjw2n$pcNRzGcpYprr2ZqRZELIV#XA#AXYiuw" +
		"nTeAi6PtRR6H7azezwZJzwV8dkxu8xixK9J9MX8xLEbhKh3$x06UIN3kN6AgYDdQFgzLSmg" +
		"#IKtcg5wf#kOsTwQIIj4k0rPylz6G$dhBTPGwaqFgtlo5MyBkOR#dVLMjo7bgZoZzHOrw$K" +
		"s$ZyeTXSyj4kfkvvnBGbslEZlHtHr9hzu87qwwUjlhEZVRnDFWK5xwByefZbv9EsZrXTsMa" +
		"IkIwHDrAbBsJq$fcNqJOOEWTt3B#s9PmYI4IKzGo3kX7NHVSyZNuOHiKvoRB4v6RNOk7SXf" +
		"FM#LKsChRXnr4cj7sI1BZGgHAxgbK1Fshj7wSwBeh$gbpCpMgMR6VA$bd4UkGVLJ$ZHhw3s" +
		"ZFaAQfbzpX7ynS5epuTiY$BkGl6KFz4dQMH5UTfMMVDzHZeBfSU1Cso6ROWvuStGE29QrNo" +
		"GjasU3wADQZv0b$qjlepkAYhU6QhUqWZlHBNUx1kWI7STaN6zmQZfzB$76OpUSgv51P$axc" +
		"IF#t3En$sFKosP#EsmVgBsLe6EfUbhD#hkjtNKhaPYQkqiw8sabQuVvcdo#ApEu#wsoxkik" +
		"jOM2NTPg#lT9P3hgEPEsjNXVr5MhOOfil$4YfxkxgVHfzN3hnI7CqoWNndqzEhCq4EgOxhn" +
		"8KTLT3ndDggsj2x1OvvCVv9IrhmfHoeuiv2zQwHfLmCffP71DOPSVaBlT0Zho6oNYg0oJu#" +
		"baTFZH5K$TYci9ucZHwnSYMi3yjQalpuG6kgR5bLhMB$4siehhvzGhlkWFZU#i2XaQiYJbq" +
		"93VP0TxJ7P1wnbN1#8TLIseOFnoxpi4RkU3aOzuI#fkYuwEOVtf4l3axEOXnFLxwtxYdhQ4" +
		"RTHJw7rQoyzuKcZGvu9vyHXKTmbKe$no$54TOuAp#ibkguWnwmhfKtgZ5mlhap4z1Ti8a#D" +
		"XlK4zzFbDnPxmm9qfwmurCnZhYkID5jIXUPNCjNpgE9$$SH#Krj9HfwA3R$QQTKddd99gIz" +
		"LqgvFI$slrMUCkDvgn2NLPwvJXUOw5I8L$b8nCwO4Q39U4nN$56xynOzwlIOcQIjt5SfWpK" +
		"o7DbFvYfQhbfQ5TnhiFQi2DThhRkfgaM7$HFRw3iPgePy2ogH$B3HAlZIoIfkhM#hrPTmg6" +
		"h$EnUR6buGvG6Ejrg9LDP1heGbNwLJqQaKFrszhjJPcaxPRAXfw5hi3#myxtigDte#BiPlO" +
		"mmoa9depbor2xgqAKVWyISGMHj#UmaxLIDNJ435sJhMT$7q5LhBmIBjnkTUd8DNVLBFv1LA" +
		"xlJ58rPEr3SJkgtzDqMt8Zq5AJtbq4FrPIkqIzNItUor#VCQFY3JZ9CnpeIChiEOY0xr6B4" +
		"la7HFBpcY3x0d9VqRmYtHfa5TOKVHoxAJ7RiyvDiSU9M59olX9cnS$vvBGwp4UI2UEUnuv8" +
		"M7K1tMdZFguDWfRgxQUOIBDlExeV8zj4SttbDMEths8iv9Pj#oV9AkR$S5kIMjdk#R4Cscm" +
		"vgUrSxYIPBhQ8OxLBfmH0L8z8s9NLJLYQGvV9lDKB#qhonGd2ws5Cy6#yLVXN5x79Lwb$tl" +
		"b0bVTrF6NKKwdc3pplDR1k4yLtUcMfbdlu$9A8#yHnVG9UCHOrdjNqdnLeodTSrrcAvPcLf" +
		"QoGovD$ht6h2z6RajjcE6fP4jF2q5kshaVEwjIJWj1UNdpePGRTq6I40NrLB0FJLk8AuSQv" +
		"O#Br7uAiAJjBmFpqipuu#y9fDezHLVCVPp0Tal$RUkLU$hEu4wYsEkM$diO0slOyw11IewM" +
		"R63t05Udkp35msSIvWNdeKKgx1xkzEAfcWxcQ13bYVTMHD#VoyvJwOkYSzMyGqIsDoJJx0A" +
		"2emBb8h#kOU#K$nmOj23SJyDOqenAohyiq8OOkoP8NRF5cghog$B$cVoCHxp8CrUcaxTen3" +
		"CvujcL2QleBN875RpbhBDHfE1z8GNp5bh4q7MPrSfh$eQLOzVUlvUoJmkSssllbgQCyqltb" +
		"BMtWYaUVnPD776nAsjSFzhdv31$ZJ4#0pdu9wVNaXu7kzR64TZfHRXRTKo4jwPeMcEzh$zS" +
		"55bAVN$RIX6B9DdikostzHRs5ilAEexHNzkRu9KmDc8emdqP6tSwOnqGxxGhOurlGzREZ7M" +
		"UozXU#Oov8nXp6ZCs#58c$sQYV3BAniD1BkiDngeTZhpz6Aj#Di93aFyamYMCrSGUl##jJB" +
		"oUrVLxnEz3tbu8Do2lDsE3Nc1iJZl6zgo9i0l2tHZhtWjkFkhjnrWtb7M$ch5QinXh#3FYx" +
		"pBMw6cK#S3K6bYXh$f6nhPhoPY7TZWdCrPZ5uHVCBRp7wZq0UJ3DPp8sAZDu0CkMiksNu3q" +
		"Dp11DM3vax5wFpBMeo7SIBGd5$NEHln4ngPaGRO1yj2M7W$2$SfOpywe5#tQ0VXwpe5RW$Q" +
		"$Xhn2ndRquCR1NG3PEi26jWo2NDPAy82$scZaDsDipFk8$uLwhe0yPAUC0cynOxsWT#yZ4V" +
		"yluh3Jp36mLtNWGvsD8DS6Tkcw3lmJWAi#Gk3i1BoJqBwPqy5J2hbZmNyMoWvchFvvQE$lo" +
		"9#1zD7WEH0ufu3dBiQoeRV93eX$YphH5xtRG5T7yAr76N3DN0ZUFP0F$Xhefp7exneOFdMA" +
		"q4$expeNWlTnv4zYhEwNg1Fufu2ltWcejp$SHumrSE6Wky59S1WdEnV00SVEhm1$SpZmDLm" +
		"AzoWS#gTHUxXES4T15$YRTMDiAlgbCUpO67qw0#DnuiMm2VguBUpJ4ENjpc1i#2cCDKLRnd" +
		"#2SepTYUYBgQs0xLhaTqKSEeUZRyVSpzW4j7lAEsZNLOmLOCnF08wE6FCJWAK3sZy1OtiEw" +
		"XiBN6DXwwQmpzZduBx2FAaBXt4w0VWSuAhv1CenZYRk3JpGNwi9CAE#PcZdLBIxrZp4qRUr" +
		"7e5kp8i9vqD#44BOVoB6JabJzDqqzFSr60jx8XzsgOl#sWvjQ0R#YVz1V3LqtmnxelxjqBw" +
		"si4jZiWtcs$QdGGxZfHdwejaTw4$e7lCgOpcOJsrH$qpCbKOzm8$vFlDDv85l131jZ$WuoE" +
		"s0SJNkCc136tV0tCc13QSU11q$eBqjW0rZQEgXwFUNeVzhyC1kDVk03sEWBk8vcAybi5iEn" +
		"kcuE#5G7yDwWLMNZNiF#HWRdJ4#2w2ZP2tI1y1XNSc1lReYRqVqHGxMeTuOP#Cml$kiGXx6" +
		"ylZjuFA0$NAaqTQIiKXtHtWC#XkBIVlFC1TWzm9WQNm4T61yvUpFM2dcLybtu2b36hR9GLl" +
		"cODxbODnFmjhK3XZcm4Ova9c4TQKTwXpn2$A09mVzFGbsQOz#o87T9tsE#Bde0yoXwbWZQc" +
		"CCxOrrgEHCrFaCqk0fkHlOCVzBi2vr19uSw2$5cj81kZej0txCxKxFmuQO$mxitHbwcc2Uv" +
		"60Svbo4$EiOwuBwNAnLEU3DWGsdmePTCAQRe7zpe7ygT7TvYx52pCz2pCcf60U5a6z6wm7Q" +
		"bOFo7CXCmzpeY7Lm9wnLELYdSZ2Vfc7z788rB1VzceCvEWtpfIl6nhG1o4CtzK1#4zYrDiR" +
		"Cg2jX3s2jWRKb5#ElBTQQCR1fEwnLux2sDi6waDiMZkOZmectmpqBNR1FBiPxxlReFworEs" +
		"4DQe9wPgA#N8olQHZRkTXNff4yvcJVOR0vnjOqhCNPc6UTeQSlR3FjTTZjCV0CXyCOoaMTk" +
		"PWxkLFXiFRaOisfTWv2ZA6H61#3i1#DGTjAiJUDXRq6mruJVq8Qzir5l$V1VbTAQoBwbw6k" +
		"nh1pFUmxEsDDg8zvL$CIs13hMKsCzJuOhxaObxN0qnPsAyNyRee#x8EsDqQT1KYNehx6c7#" +
		"b3uE7sjWJwQSOsmVgNQmZOx4VvM8EkUZJqW#GZxMa3Fl1FXYlPMZtFXWx#w2#VR1#bM4CxW" +
		"Dxx0dRx8Cvl#V7235kEs8joiLOoGN6CgpjWx5tb64Vwe1#chmZoj7ldT1$dJ2#EwAzkPWld" +
		"T2ERAn$dJ1Uip4Mwg0VSh46TqQ$jaLzkHYJPQYdFVRA0epl9fyY3sjVP#mJ7R3lTSCy7ja1" +
		"xSNuoyKSwOpzj0lsl4bOgze2lmTRUx1v5$H3CzYfo$Lmi6aXnb3XgN2Gyo2JXRKx2#tFmZf" +
		"T3VQe1ZjKXsmkwYs3dGg0lm1yNQdlmPFx4EAmUNNexeWrf6ysi07tti0w36jZ4up9fh3fCD" +
		"YZATQAlk39HTrziNurnRhR5tRCnVpeWFufWxvc6BDxqho0tVfYVkQ#YFD23SP6mnxDCAzoi" +
		"DRqnVpBmLfI1Amvi44HndeEsbAq0lpe#oAioxdGLuH#peKhXXtoqC$5M9$oWAru4KBWAiQw" +
		"b0zinQWZ7zXsfNyJ3qoxOhmt1uvTCNQR0yUkmDuSTUyA6xH0$RjYJhH0$VsmJxH0$Vs684J" +
		"z$J2sMwB##XYt3M7ZFEoRjN26g8KrPRk1SC2q7ThO5lEXsMzOlx6cvS6UssDlc8O#R8HzQX" +
		"hE38qmhgRJleuzR3ZcxlPeGs$CpppCaHtwmc5Dh0#xDqA$ZgIvXRftm5XjWdwhWt5M1$jWN" +
		"ctCUPmjyZ1c#s6D78xzkX$Qd8UvrXzhMqjWwO#nrHAw##DSaGSRzmUEF8UnLh1LKzWq3vZx" +
		"OvuqnZZeZt6TXxLyDxWyz7qhsB4DrfeyhFDvMBzsmrmV3SoxOMqV2NsjKDTkDp2s2#oRXt6" +
		"$6yRiBh3nIDYZ4TRttfZ3pR0Mvc7$tn7rTSDytHlpT2JgQmIzlT6cfXWZUPXlEw9Tmu6l3T" +
		"gH1$bTq4T3q2z3Q3t0#6oBzMSena8UpZj3iQUrmxhG3dtG0EqVYJscAVfnHyoFfh1l4vo3y" +
		"k1gOtzlYZDa7lfl0CRtS8o5scXJTOozsjYh1c1F6e2vkHFsYvsmL#o4#PODtNceRm3sa#6e" +
		"UnJEUTcOktbOBni0PmECaJpWtnbOHw5DsHyYZZLlRupZ4JX7xeszfWbjhS0x2dqx6cjaC#p" +
		"DJT6d8v2UZdbO3#jJK$H3E#1eZpuSZBDAtak80$DesACRx3WKVDCnn$Emdmp5$6cATQCnR3" +
		"OP$PA7$Rezsbc0Vfo4lXuBV0DWhqcmnMZ4Hs0zROf#oSDwsGHza8SrQp1iFG1xQ1xQs0Wuf" +
		"sFkDiN#C1Zdm26mKoEaHzCP2ZZoiCSDeJQXRTEn7ZJ5cM88pgb3xe6ZFiEv9n#uiOsneTZR" +
		"Xe9tDERNKEndGy4p5FYwObqSXZ8NxHwAkJ6KO#r1MJxgpiUOdew#6euwcs5yviFc#JauCy8" +
		"Emt5#oyUOR8EzPY36zMZCdNpm3CGwEW7hpWJqrGIS0MRWscO2rgE1iFS4h0aTw5o5yyamu9" +
		"s0$fw1kP2FSJSG$JyHSs4WC8t6dZCCkiUWWsOWFnzZVdVqxqJKNmVzrGTdrJuOjxjZpkwEz" +
		"IuVzUoElNy4#g8fndu#pcbDS6tKk1uSncXJZCTydFqQea$oKRuxzlRMM5FQOErfI6SVh37L" +
		"i0QCnpuw5lrQG3empiTZp3L5lup1zKSph9y5wAlni6iph6cpqGVDi3$aeRqpOQTyx0lvsDF" +
		"gOarfZxrwBDQEV8oB4epzUj3N3Mj4FQm5#HZN#OG9ux8zviPCsAq8ySPeQm7iDWdxVZxMv7" +
		"oSB$EnrXLXxDP5$VbeMsTSOuq7hguu6nPWRXVXZ5yFwzzupCNni6S#nca#vbqHnbDzN4UsX" +
		"nqcaopQEmdpFHzpQJBwFXzhPp7sgYQOFzqmBYV1hfEnZZN3UC$7UQKOTK$0MCp76Z0PUs4x" +
		"x5kJaTSEvwJ9c5yvq9kFjMeOpg#JCGwQOknFnZYPZ7hp8TSCzfwCyzBUiF##r4wCytsnlkn" +
		"BTi1#N1Djc8svsGos6h49zeMz9i7sksCyvsFlguCvj0VEMQCmNkjW$ysZXuB1imVIhR7Mx8" +
		"5rDHzrryKwl0VcUMkuFGWlSDJ5DU0WpAysMFy6xGuTECVKmvbb4CvvRR1FDCFQEHRZni5uS" +
		"B3EkLXRNBJFfRc2Qu8EjR2$OBusntZpiEusnzphWBxti2ysRuIz6Ej#Syo1B9ntcsEFpuAE" +
		"vZH#eASvhcEQ5yhx0GtRot3dnoZadFzAeSnpC8#hhT1fcUVzQgURZJVJAkyQ5Vucmvp1AZm" +
		"lvCdvJ8QvlSEywagkuI8PrcmamxfO2skglBgO3xMcXZArBedMdud3ddfzQjwWgrJzLykm7g" +
		"ubjwyduzKKtktFCMLWhszj7RJNidLsNfiUTdh7qsJO$MjL7yReZhV9UDkNGhwEpS9ukvPXl" +
		"D4ofGVdvkw3PBp7BZAilHXhy7MHThsZv5wMuKuudmxP8InlYFD7jXErHrW#P5uOppupcQ$E" +
		"ugIol#k07VtUOxACDyvIuJmPjXqempRdXFnDi5OtEKd6gmy9ytkSBSDk0nGVrgGcs9UhAzl" +
		"KK6EsQROCM$zMFhRg3u7$Y32zynzAnwio7DO$NcvmGpkzvyuoR5WWGrfBcZMmUMgV6yQtkp" +
		"gCD#kUZA$P62C#KTMXvZsxGkKFLVbmZR5FDyF5JOzdwJefVTkRARirUokc36UUPkV9U8xAo" +
		"pqibIztGnZFQwZ2EQbyELbskk51CcpKHTMtEImRVcAg$4uDP3YYhGphDf7XlZU7F8tgot1A" +
		"qp1loc8PpinJF3z4TSlynchTgBOep6j6Ps6i#uttaUczi2$iVA1gJokuuJBUivhAmvwLCqV" +
		"bxMhhxtc8dMwhnd9EVnNEL#sRfTBOKtDMoFZ84fLtaKeVhdJU6D#MEXU5yQPxox35Cqh7uK" +
		"QRLyRBvzsbUESglhTK#lYG9xz66CzvGkMDas77MBqXVwDI9OTzUUOPCZxrSnbsECBcxNo14" +
		"VzOXbrnlcnex3rDbicmInS34$RCcUUe$ADK7iwx#owKyMauw#Py8kEvRGsvtyFud5DLU8iA" +
		"xx6npNbHXMgjcFEc2liPF3#fy7TJDixHkgT2d2LosnZvcvGENuKuS#Jk5fRlf#R679mpSmU" +
		"MLqz57UffOgTxVfpAqqMDXRsAuMumx315XeLrLAZcLA6QTtJlQCvC5Tz3bVsWqfXtSmuCTO" +
		"qPByCPFMGuyqOLtgt2brIeziwPNwZm5ndESbLOMuLgBPdLMeLTLTXFXMfzdJLMXTDLgFQmM" +
		"KUgy0GPDfoaS0ThlEamVt5zd1jP3thbg72C2bSgNV#LuVXicx#HMdls#Y2I$wEk5#FcAuLh" +
		"jT8nKgKlKU5rCjpdQHbEkoBKa$kHoljDtjkQNbscfzSFUIOU5iPdtQd2Huoyvupu6mgVgdk" +
		"d1j3xXL6kvcAZRsHO5zSgkTnkMvFE1hx7a7uFzi6rHkxZDbytdEVR72$ZZN7DqAItZ6VX#Y" +
		"Kl9#JBsrFL$OEHDypK5UV0h#PXaquAooS6hfzLsP8mRq#rzkwLXVBRLJquny$UJiMpP3ZgN" +
		"YMx8fHjjbCOtoylZFTwF8pdZPRXrFRnUATtiTDvE3CsnJLNdh76J1zawFuhmezhyJcujiuh" +
		"jlD7l9TQLzvqkaTWvxMTQQVdd2Z3HeCZiceUbwZvaqVtMfwJyT8obKVt92u5tZSCx9$PUhe" +
		"V8yCPMKfclRpNCVK0cHwvHfMhEJT3rJTx9rMkrh0PrbwKsjRPQht8UptCou$Qup6bIxMv6P" +
		"TXpaYRhrDBEztuOfK$3t5rhT5KdHdoSCOhLUUQF3LlEXhxLjvtYl$jLCnvlokSQet8MPFAa" +
		"szSH#PyAyDSTKvflbUKN#MVgsJL6Qo6kcxCDyPiyq#LheL6NUgwe4KlbJvCXWtVbM7D7LM#" +
		"MkiBibGxrifmwbyghVRPWcbAtz5X7RchPDZqGwMh57qtKyPdh0lvPdSDuytKcZbRdHrcF6t" +
		"mgRwSOPnPPv#lmYkDF7Lko3yQTHVf$AXZRC8fEevhqXTaNaUS9TkFaF7sQhmMgFD1WThdEc" +
		"I5EkZFUOFznXmuDt3V8$q3t8#8Q$SWqWyY$0dXJmXN8rpDFCEvmfs9$3EHFfFLXCk2goRIh" +
		"oF$TPHVZ2elHlnYv4ddikK8buDlUH3FKg6PhyjSThjmMN3LsKVGzH7o7mBV2OYVWFW9g5k6" +
		"7iDf7Cw5yzWZmbM3SrNST3hV3SeVHVWewlW4UZz1#Z6uJuLpsEEe$pwKtwV2TQXd7SgU4Cv" +
		"b5uBdGX6IgyOk0TyboBi4vPU8jCSse#n9X4yYJKyhl2rS5foddAkSJB#3E7OczXduoNqEti" +
		"yHFWMCvBv0#WjM0uw#Ykl0KPW5LmtEOwSYVYhoJqNyP#Zw4k6NqFULS9vohd8U#nfoqddi6" +
		"uHt8FnME8TjHFffn9z6$4x4wLdqfP1RYhoJaJuPyJ3CKY4vX$sY7AusuLps3EBFGEvwXDy9" +
		"vx534HwAiaEXur2qur2HvwbqDQFSLULPAh#MugjfoFmTfp7KC9ndrEsnGu35TfvoBboMYbS" +
		"pdAVoNICqunxR03qR4By18RaR4JVT6yYxHZYFNORqPGXVGFe5XBSWJUvMuRBOSyX$3l5hXS" +
		"jYXuE7tA#8$ugy#n6$7xZUHVWkmkV1$ppYLwBiIl1G#1$a$GTvCdILetHD4HwB$D2PQHSko" +
		"t2kAg$6ZaT8xaNmlOZmFU6giPkHlXbyBo5y2NbtGUuUXFTWlBmldAkS1vS5LrsvcY9lBNZM" +
		"GdOjucV3dONqMKYJsoISnwv2U1N2ow47EpsSo#v5tht8kniwFqRyOyHVXjwNaNuBwRV0Suv" +
		"m7ZiTwTCHBa6u1EN783m6lCU8U3KuZns5lACG7WcP8n6NZk9PS3hVK#dgHhoQ2jsWx3h8Ne" +
		"VoSn6IEm$vvo7yG3Z6FaJu8Sfl4uwUXdBWN7OqmgEHTn52#gywho1y1U5hmhbm3diLyOK83" +
		"qxZZXFEJN7Ba4zkld0UkmbvDm7RJKYl#OVS5SAvAfHkiN0UMu1m0SgaSuGxJJYF7O7m28Hp" +
		"4Sv5k0ZX8X5ciHCHFn7nKn2UWl0aX2SXN0azAqLektd8lnfslHfyRoftATAN8ZmVuVa8SVA" +
		"4SzW522z0k0BX2eI7AVVx$mDsdd9Y");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	public ErrorReporting errorReporting; 
	public ArrayList<IndentHint> indentHints = new ArrayList<IndentHint>();
	
	
	private void addHint(IndentHint.Type type, int indentPos, int dedentPos)
	{
    	IndentHint hint1 = new IndentHint( type, true, indentPos ); 
    	IndentHint hint2 = new IndentHint( type, false, dedentPos );
    	
    	hint1.counterpart = hint2;
    	hint2.counterpart = hint1;
    	indentHints.add(hint1);
    	indentHints.add(hint2);
    }

	private final Action[] actions;

	public OcamlFormatterParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = implementation
			RETURN2,	// [1] $goal = $interfaces interfaces; returns 'interfaces' although none is marked
			RETURN2,	// [2] $goal = $toplevel_phrase toplevel_phrase; returns 'toplevel_phrase' although none is marked
			RETURN2,	// [3] $goal = $use_file use_file; returns 'use_file' although none is marked
			new Action() {	// [4] implementation = structure.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 
    	return s;
				}
			},
			new Action() {	// [5] interfaces = signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 
    	return s;
				}
			},
			new Action() {	// [6] toplevel_phrase = top_structure.t SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					 return new Pos(t, s);
				}
			},
			new Action() {	// [7] toplevel_phrase = seq_expr.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [8] toplevel_phrase = toplevel_directive.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [9] top_structure = structure_item.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return i;
				}
			},
			new Action() {	// [10] top_structure = structure_item.a top_structure.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [11] use_file = use_file_tail.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [12] use_file = seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [13] use_file_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [14] use_file_tail = SEMISEMI.s seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [15] use_file_tail = SEMISEMI.s structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [16] use_file_tail = SEMISEMI.s toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [17] use_file_tail = structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [18] use_file_tail = toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [19] module_expr = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [20] module_expr = STRUCT.s structure.b END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.STRUCT, s.getEnd(), e.getStart());
    	return new Pos(s, e);
				}
			},
			new Action() {	// [21] module_expr = FUNCTOR.a LPAREN UIDENT.i COLON module_type RPAREN MINUSGREATER.c module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 7];
					final Symbol b = _symbols[offset + 8];
					 
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [22] module_expr = module_expr.a LPAREN module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [23] module_expr = LPAREN.a module_expr COLON module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [24] module_expr = LPAREN.a module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [25] structure = structure_tail.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 
    	return s;
				}
			},
			new Action() {	// [26] structure = seq_expr.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [27] structure_tail = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [28] structure_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [29] structure_tail = SEMISEMI.a seq_expr.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [30] structure_tail = SEMISEMI.a structure_item.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [31] structure_tail = structure_item.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [32] structure_item = LET.a rec_flag let_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
		return new Pos(a, b);
				}
			},
			new Action() {	// [33] structure_item = EXTERNAL.a val_ident_colon core_type EQUAL.c primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [34] structure_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [35] structure_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [36] structure_item = EXCEPTION.a UIDENT.id EQUAL.e constr_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [37] structure_item = MODULE.a UIDENT.id module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
		return new Pos(a, b);
				}
			},
			new Action() {	// [38] structure_item = MODULE.a REC module_rec_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [39] structure_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [40] structure_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
		return new Pos(a, b);
				}
			},
			new Action() {	// [41] structure_item = CLASS.a class_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [42] structure_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [43] structure_item = INCLUDE.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [44] module_binding = EQUAL.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [45] module_binding = COLON.a module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [46] module_binding = LPAREN.a UIDENT COLON module_type RPAREN.c module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					 
   		addHint(IndentHint.Type.MODULECONSTRAINT, a.getStart(), c.getEnd());
   		return new Pos(a, b);
				}
			},
			new Action() {	// [47] module_rec_bindings = module_rec_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [48] module_rec_bindings = module_rec_bindings.a AND module_rec_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [49] module_rec_binding = UIDENT.a COLON module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [50] module_type = mty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [51] module_type = SIG.a signature.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.SIG, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [52] module_type = FUNCTOR.a LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [53] module_type = module_type.a WITH.c with_constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [54] module_type = LPAREN.a module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [55] signature = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [56] signature = signature.a signature_item.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [57] signature = signature.a signature_item.b SEMISEMI.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, c);
    	else
    		return new Pos(b, c);
				}
			},
			new Action() {	// [58] signature_item = VAL.a val_ident_colon core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [59] signature_item = EXTERNAL.a val_ident_colon core_type EQUAL.e primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [60] signature_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [61] signature_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [62] signature_item = MODULE.a UIDENT module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [63] signature_item = MODULE.a REC module_rec_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [64] signature_item = MODULE.a TYPE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [65] signature_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [66] signature_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [67] signature_item = INCLUDE.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [68] signature_item = CLASS.a class_descriptions.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [69] signature_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [70] module_declaration = COLON.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [71] module_declaration = LPAREN.a UIDENT COLON module_type RPAREN module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [72] module_rec_declarations = module_rec_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [73] module_rec_declarations = module_rec_declarations.a AND.n module_rec_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [74] module_rec_declaration = UIDENT.a COLON module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [75] class_declarations = class_declarations.a AND class_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [76] class_declarations = class_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 
    	return a;
				}
			},
			new Action() {	// [77] class_declaration = virtual_flag.a class_type_parameters.c LIDENT class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [78] class_fun_binding = EQUAL.a class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [79] class_fun_binding = COLON.a class_type EQUAL.e class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [80] class_fun_binding = labeled_simple_pattern.a class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [81] class_type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [82] class_type_parameters = LBRACKET.a type_parameter_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [83] class_fun_def = labeled_simple_pattern.a MINUSGREATER class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [84] class_fun_def = labeled_simple_pattern.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [85] class_expr = class_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [86] class_expr = FUN.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [87] class_expr = class_simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [88] class_expr = LET.a rec_flag let_bindings IN class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [89] class_simple_expr = LBRACKET.a core_type_comma_list RBRACKET class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [90] class_simple_expr = class_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [91] class_simple_expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
		addHint(IndentHint.Type.OBJECT, c.getStart(), c.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [92] class_simple_expr = LPAREN.a class_expr COLON class_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [93] class_simple_expr = LPAREN.a class_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [94] class_structure = class_self_pattern.a class_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [95] class_self_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [96] class_self_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [97] class_self_pattern = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [98] class_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [99] class_fields = class_fields.a INHERIT.c class_expr.d parent_binder.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, d);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c, d);
				}
			},
			new Action() {	// [100] class_fields = class_fields.a VAL.c virtual_value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [101] class_fields = class_fields.a VAL.c value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [102] class_fields = class_fields.a virtual_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [103] class_fields = class_fields.a concrete_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [104] class_fields = class_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [105] class_fields = class_fields.a INITIALIZER.c seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [106] parent_binder = AS.a LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [107] parent_binder = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [108] virtual_value = MUTABLE.a VIRTUAL label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [109] virtual_value = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [110] value = mutable_flag.a label.c EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [111] value = mutable_flag.a label.c type_constraint EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [112] virtual_method = METHOD.a PRIVATE VIRTUAL label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [113] virtual_method = METHOD.a VIRTUAL private_flag.p label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [114] concrete_method = METHOD.a private_flag.p label.id strict_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [115] concrete_method = METHOD.a private_flag.p label.id COLON poly_type EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 6];
					final Symbol b = _symbols[offset + 7];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [116] concrete_method = METHOD.a private_flag.p LABEL.id poly_type EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [117] class_type = class_signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [118] class_type = QUESTION.a LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [119] class_type = OPTLABEL.a simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [120] class_type = LIDENT.a COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [121] class_type = simple_core_type_or_tuple.a MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [122] class_signature = LBRACKET.a core_type_comma_list RBRACKET clty_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [123] class_signature = clty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [124] class_signature = OBJECT.a class_sig_body.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 	
		addHint(IndentHint.Type.OBJECT, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [125] class_sig_body = class_self_type.a class_sig_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [126] class_self_type = LPAREN.a core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [127] class_self_type = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [128] class_sig_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [129] class_sig_fields = class_sig_fields.a INHERIT.c class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, c);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c);
				}
			},
			new Action() {	// [130] class_sig_fields = class_sig_fields.a VAL.c value_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [131] class_sig_fields = class_sig_fields.a virtual_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [132] class_sig_fields = class_sig_fields.a method_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [133] class_sig_fields = class_sig_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [134] value_type = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [135] value_type = MUTABLE.a virtual_flag label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [136] value_type = label.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [137] method_type = METHOD.a private_flag label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [138] constrain = core_type.a EQUAL.e core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [139] class_descriptions = class_descriptions.a AND.n class_description.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [140] class_descriptions = class_description.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [141] class_description = virtual_flag.a class_type_parameters.c LIDENT COLON class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 5];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [142] class_type_declarations = class_type_declarations.a AND.n class_type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [143] class_type_declarations = class_type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [144] class_type_declaration = virtual_flag.a class_type_parameters.c LIDENT.id EQUAL.e class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [145] seq_expr = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [146] seq_expr = expr.a SEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [147] seq_expr = expr.a SEMI seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [148] labeled_simple_pattern = QUESTION.a LPAREN label_let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [149] labeled_simple_pattern = QUESTION.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [150] labeled_simple_pattern = OPTLABEL.a LPAREN let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [151] labeled_simple_pattern = OPTLABEL.a pattern_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [152] labeled_simple_pattern = TILDE.a LPAREN label_let_pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [153] labeled_simple_pattern = TILDE.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [154] labeled_simple_pattern = LABEL.a simple_pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [155] labeled_simple_pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [156] pattern_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 
    	return a;
				}
			},
			new Action() {	// [157] pattern_var = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 
    	return a;
				}
			},
			new Action() {	// [158] opt_default = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [159] opt_default = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [160] label_let_pattern = label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [161] label_let_pattern = label_var.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [162] label_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 
    	return new Pos(a);
				}
			},
			new Action() {	// [163] let_pattern = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [164] let_pattern = pattern.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [165] expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [166] expr = simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		addHint(IndentHint.Type.APP, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [167] expr = LET.a rec_flag let_bindings IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [168] expr = LET.a MODULE UIDENT.id module_binding IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					 
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [169] expr = FUNCTION.a opt_bar.c match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
	    if(c == Pos.NONE)
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
  		return new Pos(a, b);
				}
			},
			new Action() {	// [170] expr = FUN.a labeled_simple_pattern fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [171] expr = MATCH.a seq_expr WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());
    	
    	return new Pos(a, b);
				}
			},
			new Action() {	// [172] expr = TRY.a seq_expr.c WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.TRY, c.getStart(), c.getEnd());

    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRSTCATCH, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [173] expr = expr_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [174] expr = constr_longident.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [175] expr = name_tag.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [176] expr = IF.a seq_expr THEN.t expr.c ELSE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					 
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, c.getEnd());
    	addHint(IndentHint.Type.ELSE, b.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [177] expr = IF.a seq_expr THEN.t expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [178] expr = WHILE.a seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.WHILE, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [179] expr = FOR.a val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 8];
					final Symbol b = _symbols[offset + 9];
					
    	addHint(IndentHint.Type.FOR, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [180] expr = expr.a COLONCOLON expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [181] expr = LPAREN.a COLONCOLON RPAREN LPAREN expr COMMA expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [182] expr = expr.a INFIXOP0 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [183] expr = expr.a INFIXOP1 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [184] expr = expr.a INFIXOP2 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [185] expr = expr.a INFIXOP3 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [186] expr = expr.a INFIXOP4 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [187] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [188] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [189] expr = expr.a MINUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [190] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [191] expr = expr.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [192] expr = expr.a LESS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [193] expr = expr.a GREATER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [194] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [195] expr = expr.a BARBAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [196] expr = expr.a AMPERSAND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [197] expr = expr.a AMPERAMPER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [198] expr = expr.a COLONEQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [199] expr = subtractive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [200] expr = simple_expr.a DOT label_longident LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [201] expr = simple_expr.a DOT LPAREN seq_expr RPAREN LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [202] expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [203] expr = simple_expr.a DOT LBRACE expr RBRACE LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [204] expr = label.a LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [205] expr = ASSERT.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [206] expr = LAZY.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [207] expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
		addHint(IndentHint.Type.OBJECT, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [208] simple_expr = val_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [209] simple_expr = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [210] simple_expr = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [211] simple_expr = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [212] simple_expr = LPAREN.a seq_expr.c RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.PAREN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [213] simple_expr = BEGIN.a seq_expr.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.BEGIN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [214] simple_expr = BEGIN.a END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [215] simple_expr = LPAREN.a seq_expr type_constraint RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [216] simple_expr = simple_expr.a DOT label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [217] simple_expr = simple_expr.a DOT LPAREN seq_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [218] simple_expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [219] simple_expr = simple_expr.a DOT LBRACE expr RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [220] simple_expr = LBRACE.a record_expr.c RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [221] simple_expr = LBRACKETBAR.a expr_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [222] simple_expr = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [223] simple_expr = LBRACKET.a expr_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [224] simple_expr = PREFIXOP.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [225] simple_expr = NEW.a class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [226] simple_expr = LBRACELESS.a field_expr_list opt_semi GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [227] simple_expr = LBRACELESS.a GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [228] simple_expr = simple_expr.a SHARP label.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [229] simple_labeled_expr_list = labeled_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [230] simple_labeled_expr_list = simple_labeled_expr_list.a labeled_simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [231] labeled_simple_expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [232] labeled_simple_expr = label_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [233] label_expr = LABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [234] label_expr = TILDE.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [235] label_expr = QUESTION.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [236] label_expr = OPTLABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [237] label_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return new Pos(a);
				}
			},
			new Action() {	// [238] let_bindings = let_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [239] let_bindings = let_bindings.a AND let_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [240] let_binding = val_ident.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	return new Pos(a, b);
				}
			},
			new Action() {	// [241] let_binding = pattern.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [242] fun_binding = strict_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [243] fun_binding = type_constraint.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [244] strict_binding = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [245] strict_binding = labeled_simple_pattern.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), a.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [246] match_cases = pattern.a match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
		return new Pos(a, b);
				}
			},
			new Action() {	// [247] match_cases = match_cases.a BAR pattern match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 	
  		return new Pos(a, b);
				}
			},
			new Action() {	// [248] fun_def = match_action.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [249] fun_def = labeled_simple_pattern.a fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 	
  		return new Pos(a, b);
				}
			},
			new Action() {	// [250] match_action = MINUSGREATER.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [251] match_action = WHEN.a seq_expr MINUSGREATER seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [252] expr_comma_list = expr_comma_list.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [253] expr_comma_list = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [254] record_expr = simple_expr.a WITH lbl_expr_list.c opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [255] record_expr = lbl_expr_list.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [256] lbl_expr_list = label_longident.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [257] lbl_expr_list = lbl_expr_list.a SEMI label_longident EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [258] field_expr_list = label.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [259] field_expr_list = field_expr_list.a SEMI label EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [260] expr_semi_list = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [261] expr_semi_list = expr_semi_list.a SEMI expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [262] type_constraint = COLON.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [263] type_constraint = COLON.a core_type COLONGREATER core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [264] type_constraint = COLONGREATER.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [265] pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [266] pattern = pattern.a AS val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [267] pattern = pattern_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [268] pattern = constr_longident.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [269] pattern = name_tag.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [270] pattern = pattern.a COLONCOLON pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [271] pattern = LPAREN.a COLONCOLON RPAREN LPAREN pattern COMMA pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [272] pattern = pattern.a BAR pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [273] simple_pattern = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [274] simple_pattern = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [275] simple_pattern = signed_constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [276] simple_pattern = CHAR.a DOTDOT CHAR.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [277] simple_pattern = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [278] simple_pattern = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [279] simple_pattern = SHARP.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [280] simple_pattern = LBRACE.a lbl_pattern_list.c opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [281] simple_pattern = LBRACKET.a pattern_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [282] simple_pattern = LBRACKETBAR.a pattern_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [283] simple_pattern = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [284] simple_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [285] simple_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [286] pattern_comma_list = pattern_comma_list.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [287] pattern_comma_list = pattern.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [288] pattern_semi_list = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [289] pattern_semi_list = pattern_semi_list.a SEMI pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [290] lbl_pattern_list = label_longident.a EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [291] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [292] primitive_declaration = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [293] primitive_declaration = STRING.a primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [294] type_declarations = type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [295] type_declarations = type_declarations.a AND.n type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
  		return new Pos(a, b);
				}
			},
			new Action() {	// [296] type_declaration = type_parameters.a LIDENT.c type_kind.d constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	Pos first;
    	Pos last;
    	
    	if(a != Pos.NONE)
    		first = (Pos)a;
    	else 
    		first = new Pos(c);
    	
    	if(b != Pos.NONE)
    		last = (Pos)b;
    	else if(b == Pos.NONE && d != Pos.NONE)
    		last = (Pos)d;
    	else
    		last = new Pos(c);
    		
    	if(first == last)
    		return first;
    	else
    		return new Pos(first, last);
				}
			},
			new Action() {	// [297] constraints = constraints.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [298] constraints = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [299] type_kind = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [300] type_kind = EQUAL.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [301] type_kind = EQUAL.a constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [302] type_kind = EQUAL.a PRIVATE.c constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [303] type_kind = EQUAL.a private_flag.c BAR.d constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
	    addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [304] type_kind = EQUAL.a private_flag.c LBRACE.d label_declarations opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					 
   		addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd() + 1);
    	addHint(IndentHint.Type.RECORD, d.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [305] type_kind = EQUAL.a core_type EQUAL.c private_flag opt_bar.o constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol o = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					 
    	if(o == Pos.NONE)
    		addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    		
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [306] type_kind = EQUAL.a core_type.t EQUAL.e private_flag LBRACE.l label_declarations.c opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol l = _symbols[offset + 5];
					final Symbol c = _symbols[offset + 6];
					final Symbol b = _symbols[offset + 8];
					 
    	if(t == Pos.NONE)
    		addHint(IndentHint.Type.DEF, e.getEnd() + 1, l.getStart());
    	else
    		addHint(IndentHint.Type.DEF, t.getStart(), l.getStart());
    	
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [307] type_kind = EQUAL.a PRIVATE.c core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [308] type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [309] type_parameters = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [310] type_parameters = LPAREN.a type_parameter_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [311] type_parameter = type_variance.a QUOTE.c ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [312] type_variance = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [313] type_variance = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [314] type_variance = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [315] type_parameter_list = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [316] type_parameter_list = type_parameter_list.a COMMA type_parameter.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [317] constructor_declarations = constructor_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [318] constructor_declarations = constructor_declarations.a BAR constructor_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [319] constructor_declaration = constr_ident.a constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [320] constructor_arguments = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [321] constructor_arguments = OF.a core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [322] label_declarations = label_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [323] label_declarations = label_declarations.a SEMI label_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [324] label_declaration = mutable_flag.a label.c COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [325] with_constraints = with_constraint.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [326] with_constraints = with_constraints.a AND with_constraint.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [327] with_constraint = TYPE.a type_parameters label_longident with_type_binder core_type.c constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [328] with_constraint = MODULE.a mod_longident EQUAL.e mod_ext_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [329] with_type_binder = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [330] with_type_binder = EQUAL.a PRIVATE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [331] typevar_list = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [332] typevar_list = typevar_list.a QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [333] poly_type = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [334] poly_type = typevar_list.a DOT core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [335] core_type = core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [336] core_type = core_type2.a AS QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [337] core_type2 = simple_core_type_or_tuple.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [338] core_type2 = QUESTION.a LIDENT COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [339] core_type2 = OPTLABEL.a core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [340] core_type2 = LIDENT.a COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [341] core_type2 = core_type2.a MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [342] simple_core_type = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [343] simple_core_type = LPAREN.a core_type_comma_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [344] simple_core_type2 = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [345] simple_core_type2 = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [346] simple_core_type2 = type_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [347] simple_core_type2 = simple_core_type2.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [348] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [349] simple_core_type2 = LESS.a meth_list GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [350] simple_core_type2 = LESS.a GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [351] simple_core_type2 = SHARP.a class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [352] simple_core_type2 = simple_core_type2.a SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [353] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [354] simple_core_type2 = LBRACKET.a tag_field RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [355] simple_core_type2 = LBRACKET.a BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [356] simple_core_type2 = LBRACKET.a row_field BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [357] simple_core_type2 = LBRACKETGREATER.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [358] simple_core_type2 = LBRACKETGREATER.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [359] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [360] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list GREATER name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [361] row_field_list = row_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [362] row_field_list = row_field_list.a BAR row_field.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [363] row_field = tag_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [364] row_field = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [365] tag_field = name_tag.a OF opt_ampersand amper_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [366] tag_field = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [367] opt_ampersand = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [368] opt_ampersand = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [369] amper_type_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [370] amper_type_list = amper_type_list.a AMPERSAND core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [371] opt_present = LBRACKETGREATER.a name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [372] opt_present = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [373] name_tag_list = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [374] name_tag_list = name_tag_list.a name_tag.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [375] simple_core_type_or_tuple = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [376] simple_core_type_or_tuple = simple_core_type.a STAR core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [377] core_type_comma_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [378] core_type_comma_list = core_type_comma_list.a COMMA core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [379] core_type_list = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [380] core_type_list = core_type_list.a STAR simple_core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [381] meth_list = field.a SEMI meth_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [382] meth_list = field.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [383] meth_list = DOTDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [384] field = label.a COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [385] label = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [386] constant = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [387] constant = CHAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [388] constant = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [389] constant = FLOAT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [390] constant = INT32.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [391] constant = INT64.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [392] constant = NATIVEINT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [393] signed_constant = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [394] signed_constant = MINUS.a INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [395] signed_constant = MINUS.a FLOAT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [396] signed_constant = MINUS.a INT32.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [397] signed_constant = MINUS.a INT64.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [398] signed_constant = MINUS.a NATIVEINT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [399] ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [400] ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [401] val_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [402] val_ident = LPAREN.a operator.o RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [403] val_ident_colon = LIDENT.a COLON.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [404] val_ident_colon = LPAREN.a operator.o RPAREN COLON.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [405] val_ident_colon = LABEL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [406] operator = PREFIXOP.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [407] operator = INFIXOP0.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [408] operator = INFIXOP1.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [409] operator = INFIXOP2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [410] operator = INFIXOP3.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [411] operator = INFIXOP4.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [412] operator = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [413] operator = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [414] operator = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [415] operator = STAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [416] operator = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [417] operator = LESS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [418] operator = GREATER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [419] operator = OR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [420] operator = BARBAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [421] operator = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [422] operator = AMPERAMPER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [423] operator = COLONEQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [424] constr_ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [425] constr_ident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [426] constr_ident = COLONCOLON.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [427] constr_ident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [428] constr_ident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [429] val_longident = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [430] val_longident = mod_longident.a DOT val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [431] constr_longident = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [432] constr_longident = LBRACKET.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [433] constr_longident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [434] constr_longident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [435] constr_longident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [436] label_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [437] label_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [438] type_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [439] type_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [440] mod_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [441] mod_longident = mod_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [442] mod_ext_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [443] mod_ext_longident = mod_ext_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [444] mod_ext_longident = mod_ext_longident.a LPAREN mod_ext_longident RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [445] mty_longident = ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [446] mty_longident = mod_ext_longident.a DOT ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [447] clty_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [448] clty_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [449] class_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [450] class_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [451] toplevel_directive = SHARP.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [452] toplevel_directive = SHARP.a ident STRING.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [453] toplevel_directive = SHARP.a ident INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [454] toplevel_directive = SHARP.a ident val_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [455] toplevel_directive = SHARP.a ident FALSE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [456] toplevel_directive = SHARP.a ident TRUE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [457] name_tag = BACKQUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [458] rec_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [459] rec_flag = REC.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [460] direction_flag = TO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [461] direction_flag = DOWNTO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [462] private_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [463] private_flag = PRIVATE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [464] mutable_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [465] mutable_flag = MUTABLE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [466] virtual_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [467] virtual_flag = VIRTUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [468] opt_bar = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [469] opt_bar = BAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [470] opt_semi = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [471] opt_semi = SEMI.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [472] subtractive = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [473] subtractive = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			}
		};


	// override the default error reporting: do not print errors on stderr
	this.report = errorReporting = new ErrorReporting();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
