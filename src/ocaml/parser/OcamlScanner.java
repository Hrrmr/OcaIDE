/* The following code was generated by JFlex 1.4.1 on 7/28/07 8:32 AM */

// java -jar lib/JFlex.jar src/ocaml/parser/ocaml.flex

package ocaml.parser;

import java.util.Stack;

import beaver.Symbol;
import beaver.Scanner;

import ocaml.parser.OcamlParser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/28/07 8:32 AM from the specification file
 * <tt>src/ocaml/parser/ocaml.flex</tt>
 */
public class OcamlScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0, 55, 27,  2, 55,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    27, 69, 25, 56, 70,  9, 57,  8, 31, 30, 29, 24, 59, 60, 21,  9, 
    10, 20, 17, 17, 17, 17, 17, 17,  7,  7, 51, 62, 63, 53, 61, 52, 
    71, 14, 19, 14, 14, 23, 14,  6,  6,  6,  6,  6, 54,  6,  6, 16, 
     6,  6,  6,  6,  6,  6,  6,  6, 12,  6,  6, 64, 26, 66, 71,  5, 
    58, 32, 18, 39, 34, 22, 13, 37, 44, 38, 48,  4, 40, 47, 33, 15, 
    42,  4, 36, 35, 28, 43, 49, 41, 11, 46, 45, 67, 65, 68, 50,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\3\2\1\10\1\2\1\11\1\12\1\2\1\13"+
    "\1\14\1\15\14\2\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\1\1\43\2\1\1\44\1\0\1\5\5\0\3\2"+
    "\1\45\1\2\1\46\2\2\1\47\3\2\1\50\1\51"+
    "\3\2\1\52\1\53\1\2\1\54\1\2\1\55\3\2"+
    "\1\56\1\57\20\2\1\0\1\37\1\60\1\61\1\62"+
    "\1\0\1\1\2\0\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\40"+
    "\4\1\1\77\1\100\1\44\1\0\1\101\2\0\3\5"+
    "\1\102\1\2\1\103\5\2\1\104\2\2\1\105\2\2"+
    "\1\106\1\2\1\52\1\107\3\2\1\110\1\111\5\2"+
    "\1\7\1\112\6\2\1\7\3\2\1\113\1\2\1\114"+
    "\1\115\1\1\4\0\3\2\1\116\3\2\1\117\1\120"+
    "\1\121\1\122\1\2\1\123\7\2\1\124\1\125\1\126"+
    "\7\2\1\127\2\2\1\130\11\2\1\131\1\132\3\2"+
    "\1\133\4\2\1\134\2\2\1\135\1\136\1\137\5\2"+
    "\1\140\1\141\2\2\1\142\4\2\1\143\1\144\1\2"+
    "\1\145\1\146\1\147\1\150\1\151\3\2\1\152\3\2"+
    "\1\153\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u0120\0\u04c8\0\u0510\0\u0120\0\u0558\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20"+
    "\0\u0a68\0\u0120\0\u0120\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0120\0\u0c60\0\u0120\0\u0ca8\0\u09d8\0\u0cf0\0\u0120"+
    "\0\u0d38\0\u0120\0\u0d80\0\u0dc8\0\u0e10\0\u0e58\0\u0120\0\u0ea0"+
    "\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u0168"+
    "\0\u10e0\0\u0168\0\u1128\0\u1170\0\u0120\0\u11b8\0\u1200\0\u1248"+
    "\0\u0480\0\u0168\0\u1290\0\u12d8\0\u1320\0\u1368\0\u0120\0\u13b0"+
    "\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u0168\0\u15a8"+
    "\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8"+
    "\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28"+
    "\0\u1a70\0\u1ab8\0\u0120\0\u0120\0\u0120\0\u1b00\0\u1ab8\0\u1b48"+
    "\0\u0a20\0\u09d8\0\u0480\0\u0480\0\u0120\0\u0120\0\u09d8\0\u0120"+
    "\0\u0120\0\u0120\0\u09d8\0\u0120\0\u0120\0\u1ab8\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\u0120\0\u0120\0\u1cb0\0\u1cf8\0\u0120\0\u1d40"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u0168\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u0168\0\u20a0\0\u20e8\0\u0168"+
    "\0\u2130\0\u2178\0\u0168\0\u21c0\0\u0168\0\u0168\0\u2208\0\u2250"+
    "\0\u2298\0\u0168\0\u0168\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400"+
    "\0\u0168\0\u0168\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0"+
    "\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u0168\0\u2718\0\u0120\0\u0120"+
    "\0\u1b48\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u0168\0\u2958\0\u29a0\0\u29e8\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u2a30\0\u0168\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0"+
    "\0\u2c28\0\u0168\0\u0168\0\u0168\0\u2c70\0\u2cb8\0\u2d00\0\u2d48"+
    "\0\u2d90\0\u2dd8\0\u2e20\0\u0168\0\u2e68\0\u2eb0\0\u0168\0\u2ef8"+
    "\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138"+
    "\0\u0168\0\u0168\0\u3180\0\u31c8\0\u3210\0\u0168\0\u3258\0\u32a0"+
    "\0\u32e8\0\u3330\0\u0168\0\u3378\0\u33c0\0\u0168\0\u0168\0\u0168"+
    "\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u0168\0\u0168\0\u3570"+
    "\0\u35b8\0\u0168\0\u3600\0\u3648\0\u3690\0\u36d8\0\u0168\0\u0168"+
    "\0\u3720\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u3768\0\u37b0"+
    "\0\u37f8\0\u0168\0\u3840\0\u3888\0\u38d0\0\u0168\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\6\1\10\1\15\1\10\1\16\1\10"+
    "\1\11\1\17\1\10\1\11\1\20\1\21\1\10\1\22"+
    "\1\23\1\0\1\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\6\1\35\1\36\1\37"+
    "\1\40\1\41\4\6\1\42\1\6\1\43\1\44\1\45"+
    "\1\46\1\47\1\10\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\5\1\4\27\5\1\70"+
    "\1\71\56\5\1\4\27\5\1\72\3\5\1\73\1\5"+
    "\1\74\50\5\2\0\1\5\221\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\10\1\0\13\10\1\0\2\10\4\0\1\10"+
    "\3\0\22\10\4\0\1\10\26\0\1\11\1\0\1\11"+
    "\2\0\1\11\6\0\1\11\2\0\1\11\1\75\2\76"+
    "\11\0\1\77\6\0\1\77\15\0\1\77\21\0\10\100"+
    "\1\0\21\100\1\101\34\100\1\0\20\100\11\0\1\13"+
    "\13\0\1\13\2\0\1\13\4\0\1\13\24\0\4\13"+
    "\3\0\1\13\2\0\2\13\1\0\1\13\1\0\1\13"+
    "\3\0\3\13\5\0\1\11\1\0\1\11\2\0\1\11"+
    "\2\102\2\0\2\103\1\11\2\104\1\11\1\75\2\76"+
    "\11\0\1\77\6\0\1\77\15\0\1\77\25\0\5\6"+
    "\1\0\5\6\1\105\5\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\106\12\6\1\107\6\6\4\0\1\6\25\0"+
    "\5\6\1\0\3\6\1\110\4\6\1\111\2\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\112\5\6\1\113"+
    "\7\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\114\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\46\0\1\115\66\0\5\6\1\0\1\6\1\116\11\6"+
    "\1\0\2\6\4\0\1\6\3\0\1\6\1\117\6\6"+
    "\1\120\11\6\4\0\1\6\32\0\1\121\13\0\1\121"+
    "\2\0\1\121\4\0\1\121\24\0\4\121\3\0\1\121"+
    "\2\0\2\121\1\0\1\121\1\0\1\121\3\0\3\121"+
    "\4\0\5\6\1\0\5\6\1\122\5\6\1\0\2\6"+
    "\4\0\1\6\3\0\4\6\1\123\7\6\1\124\1\6"+
    "\1\125\3\6\4\0\1\6\32\0\1\13\13\0\1\13"+
    "\2\0\1\13\4\0\1\126\24\0\4\13\3\0\1\13"+
    "\2\0\2\13\1\0\1\13\1\0\1\13\3\0\3\13"+
    "\35\0\1\127\56\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\6\1\130\1\6\1\131\16\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\1\132"+
    "\1\6\4\0\1\6\3\0\22\6\4\0\1\6\25\0"+
    "\5\6\1\0\5\6\1\133\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\134\3\0\6\6\1\135"+
    "\13\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\136\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\3\6\1\137\7\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\6\1\140\20\6\4\0\1\6"+
    "\25\0\5\6\1\0\5\6\1\141\5\6\1\0\2\6"+
    "\4\0\1\6\3\0\10\6\1\142\11\6\4\0\1\6"+
    "\25\0\5\6\1\0\1\6\1\143\3\6\1\144\5\6"+
    "\1\0\1\145\1\6\4\0\1\6\3\0\1\146\2\6"+
    "\1\147\16\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\6\6\1\150\5\6"+
    "\1\151\5\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\152\15\6"+
    "\4\0\1\6\25\0\5\6\1\0\5\6\1\153\5\6"+
    "\1\0\1\154\1\6\4\0\1\6\3\0\1\155\12\6"+
    "\1\156\6\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\1\157\5\6\1\160"+
    "\13\6\4\0\1\6\25\0\2\161\3\0\1\162\1\0"+
    "\1\161\1\0\1\161\1\0\1\161\2\0\1\161\2\0"+
    "\1\162\1\161\1\0\1\162\3\0\1\161\1\162\2\0"+
    "\22\161\4\162\3\0\1\162\2\0\2\162\1\0\1\162"+
    "\1\0\1\162\3\0\3\162\63\0\1\163\1\0\1\164"+
    "\7\0\1\165\16\0\2\166\3\0\1\162\1\0\1\166"+
    "\1\0\1\166\1\0\1\166\2\0\1\166\2\0\1\162"+
    "\1\166\1\0\1\162\3\0\1\166\1\162\2\0\22\166"+
    "\2\162\1\167\1\162\3\0\1\162\2\0\2\162\1\0"+
    "\1\162\1\0\1\162\3\0\3\162\11\0\1\66\13\0"+
    "\1\66\2\0\1\66\4\0\1\66\24\0\4\66\3\0"+
    "\1\66\2\0\2\66\1\0\1\66\1\0\1\66\3\0"+
    "\3\66\7\0\1\170\2\0\1\170\6\0\1\170\2\0"+
    "\1\170\6\0\1\171\65\0\1\66\13\0\1\66\2\0"+
    "\1\66\4\0\1\66\24\0\4\66\3\0\1\172\2\0"+
    "\2\66\1\0\1\66\1\0\1\66\3\0\3\66\11\0"+
    "\1\121\13\0\1\173\2\0\1\121\4\0\1\121\24\0"+
    "\4\121\3\0\1\121\2\0\1\121\1\174\1\0\1\121"+
    "\1\0\1\121\3\0\3\121\11\0\1\66\13\0\1\66"+
    "\2\0\1\66\4\0\1\66\24\0\4\66\3\0\1\66"+
    "\2\0\2\66\1\0\1\66\1\0\1\66\2\0\1\175"+
    "\3\66\76\0\1\176\22\0\1\66\13\0\1\66\2\0"+
    "\1\66\4\0\1\66\24\0\4\66\3\0\1\66\2\0"+
    "\1\177\1\66\1\0\1\66\1\0\1\66\3\0\3\66"+
    "\75\0\1\200\1\0\1\201\1\0\1\202\17\0\1\66"+
    "\13\0\1\66\2\0\1\66\4\0\1\66\24\0\4\66"+
    "\3\0\1\66\2\0\2\66\1\0\1\66\1\0\1\203"+
    "\1\204\2\0\3\66\77\0\1\205\21\0\1\162\13\0"+
    "\1\162\2\0\1\162\4\0\1\162\24\0\3\162\1\206"+
    "\3\0\1\162\2\0\2\162\1\0\1\162\1\0\1\162"+
    "\3\0\3\162\11\0\1\67\13\0\1\67\2\0\1\67"+
    "\4\0\1\67\24\0\4\67\3\0\1\67\2\0\2\67"+
    "\1\0\1\67\1\0\1\67\3\0\3\67\1\5\1\207"+
    "\1\210\4\5\1\211\2\5\1\211\1\212\5\5\1\211"+
    "\2\5\1\211\63\5\36\0\1\213\106\0\1\214\57\0"+
    "\1\75\1\0\1\75\2\0\1\75\6\0\1\75\2\0"+
    "\1\75\1\0\2\76\67\0\1\215\2\0\1\215\6\0"+
    "\1\215\2\0\1\215\3\0\1\216\43\0\1\216\23\0"+
    "\1\217\106\0\1\220\1\100\1\0\1\220\1\221\5\0"+
    "\1\220\1\100\1\0\1\220\4\0\2\100\1\0\1\100"+
    "\4\0\1\100\2\0\1\100\52\0\1\222\2\0\1\222"+
    "\2\0\2\222\2\0\4\222\1\0\2\222\10\0\1\222"+
    "\1\0\1\222\4\0\1\222\52\0\1\223\6\0\1\223"+
    "\2\0\1\223\75\0\1\224\11\0\1\224\67\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\4\6"+
    "\1\225\15\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\10\6\1\226\11\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\6\1\227\20\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\20\6\1\230\1\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\1\231\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\5\6\1\232\14\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\233\3\0\7\6\1\234\12\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\2\6\1\235\17\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\3\6\1\236"+
    "\16\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\13\6\1\237\2\6\1\240"+
    "\3\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\241\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\12\6\1\242\7\6\4\0\1\6\32\0\1\126"+
    "\13\0\1\126\2\0\1\126\4\0\1\126\24\0\4\126"+
    "\3\0\1\126\2\0\2\126\1\0\1\126\1\0\1\126"+
    "\3\0\3\126\4\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\2\6\1\243\17\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\3\6\1\244\1\245\15\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\11\6\1\246\10\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\247"+
    "\7\6\1\250\10\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\4\6\1\251"+
    "\15\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\5\6\1\252\14\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\7\6\1\253\12\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\6\6\1\254\1\255\4\6\1\256\5\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\6\1\257\20\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\1\260"+
    "\21\6\4\0\1\6\25\0\5\6\1\0\5\6\1\144"+
    "\5\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\4\6\1\261\15\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\262\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\6\1\263\13\6\1\264"+
    "\4\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\245\3\6\1\245"+
    "\11\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\265\3\0\22\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\1\266\1\6\4\0\1\6"+
    "\3\0\6\6\1\267\13\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\270\13\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\2\6\1\271\17\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\272\3\0\22\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\273\3\0\22\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\274\3\0\22\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\10\6"+
    "\1\275\11\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\276\15\6"+
    "\4\0\1\6\25\0\5\161\1\0\13\161\1\0\2\161"+
    "\4\0\1\161\3\0\22\161\1\0\1\277\2\0\1\161"+
    "\32\0\1\162\13\0\1\162\2\0\1\162\4\0\1\162"+
    "\24\0\4\162\3\0\1\162\2\0\2\162\1\0\1\162"+
    "\1\0\1\162\3\0\3\162\4\0\5\166\1\0\13\166"+
    "\1\0\2\166\4\0\1\166\3\0\22\166\1\0\1\300"+
    "\2\0\1\166\21\0\1\170\2\301\64\170\1\0\20\170"+
    "\2\0\1\210\30\0\1\210\107\0\1\210\63\0\1\302"+
    "\2\0\1\302\6\0\1\302\2\0\1\302\72\0\1\303"+
    "\2\0\1\303\2\0\2\303\2\0\4\303\1\0\2\303"+
    "\10\0\1\303\1\0\1\303\4\0\1\303\45\0\1\215"+
    "\1\0\1\215\2\0\1\215\6\0\1\215\2\0\1\215"+
    "\72\0\1\215\2\0\1\215\6\0\1\215\2\0\1\215"+
    "\72\0\1\304\2\0\1\304\6\0\1\304\2\0\1\304"+
    "\72\0\1\305\2\0\1\305\2\0\2\305\2\0\4\305"+
    "\1\0\2\305\10\0\1\305\1\0\1\305\4\0\1\305"+
    "\45\0\1\222\1\0\1\222\2\0\1\222\2\0\2\222"+
    "\2\0\4\222\1\0\2\222\10\0\1\222\1\77\1\222"+
    "\4\0\1\222\1\77\15\0\1\77\26\0\1\223\4\0"+
    "\1\223\6\0\1\223\2\0\1\223\14\0\1\77\6\0"+
    "\1\77\15\0\1\77\26\0\1\224\4\0\1\224\11\0"+
    "\1\224\14\0\1\77\6\0\1\77\15\0\1\77\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\3\6\1\306\16\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\7\6\1\307"+
    "\12\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\310\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\6\1\311\20\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\312\13\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\1\313\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\1\314\1\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\1\315\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\316\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\6\1\317\20\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\1\320\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\321\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\1\322\1\6\4\0"+
    "\1\6\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\323"+
    "\20\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\13\6\1\324\6\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\325\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\10\6\1\326"+
    "\11\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\1\327\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\3\6\1\330\16\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\3\6"+
    "\1\331\16\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\2\6\1\261\17\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\16\6\1\332\3\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\14\6\1\333\5\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\1\6"+
    "\1\334\20\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\10\6\1\335\11\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\21\6\1\336\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\13\6\1\337\6\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\14\6\1\340"+
    "\5\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\7\6\1\341\12\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\342\21\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\343\3\0\22\6"+
    "\4\0\1\6\30\0\1\5\2\0\1\5\6\0\1\5"+
    "\2\0\1\5\72\0\1\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\2\5\10\0\1\5\1\0\1\5"+
    "\4\0\1\5\47\0\1\100\2\0\1\100\6\0\1\100"+
    "\2\0\1\100\72\0\1\100\2\0\1\100\2\0\2\100"+
    "\2\0\4\100\1\0\2\100\10\0\1\100\1\0\1\100"+
    "\4\0\1\100\44\0\5\6\1\0\13\6\1\0\1\344"+
    "\1\6\4\0\1\6\3\0\22\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\345\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\7\6\1\346\12\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\6\1\347\20\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\4\6\1\350\15\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\12\6\1\351"+
    "\7\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\352\15\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\353\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\7\6\1\354"+
    "\12\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\6\6\1\355\13\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\13\6\1\356\6\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\4\6\1\357\15\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\360\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\3\6\1\361\16\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\1\362\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\1\363\21\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\364\11\6\4\0\1\6\25\0"+
    "\5\6\1\0\5\6\1\365\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\14\6\1\366"+
    "\5\6\4\0\1\6\25\0\5\6\1\0\10\6\1\367"+
    "\2\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\13\6\1\370\6\6\4\0\1\6\25\0"+
    "\5\6\1\0\5\6\1\371\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\6\6\1\372\13\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\373\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\6\1\374\20\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\375\3\0\22\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\376\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\5\6\1\377\5\6\1\0"+
    "\2\6\4\0\1\6\3\0\22\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\u0100\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\u0101\21\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\2\6\1\u0102\17\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\u0103\13\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\u0104\15\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\u0105\3\0\22\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\1\u0106\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\2\6\1\u0107\17\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\u0108\11\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\1\u0109\21\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\u010a\15\6"+
    "\4\0\1\6\25\0\5\6\1\0\5\6\1\u010b\5\6"+
    "\1\0\2\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\u010c\21\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\6\6\1\u010d"+
    "\13\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\10\6\1\u010e\11\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\1\u010f\1\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\25\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\u0110\3\0\22\6"+
    "\4\0\1\6\25\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\u0111\21\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\1\u0112\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\1\u0113\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\u0114\11\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\1\6\1\u0115\20\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\10\6\1\u0116"+
    "\11\6\4\0\1\6\25\0\5\6\1\0\5\6\1\u0117"+
    "\5\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\6\6\1\u0118\13\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\6\6\1\u0119\13\6\4\0\1\6\25\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\u011a"+
    "\20\6\4\0\1\6\25\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\15\6\1\u011b\4\6\4\0"+
    "\1\6\25\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\6\1\u011c\20\6\4\0\1\6\25\0"+
    "\5\6\1\0\13\6\1\0\1\u011d\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\25\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\u011e\3\0\22\6\4\0\1\6"+
    "\25\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\4\6\1\u011f\15\6\4\0\1\6\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\15\1\1\11\2\1\1\11\23\1"+
    "\2\11\6\1\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\3\1\1\0\1\11\5\0\10\1\1\11\11\1"+
    "\1\11\31\1\1\0\1\1\3\11\1\0\1\1\2\0"+
    "\3\1\2\11\1\1\3\11\1\1\2\11\5\1\2\11"+
    "\1\1\1\0\1\11\2\0\55\1\2\11\1\1\4\0"+
    "\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[287];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	enum eStringsComments{IN_INITIAL, IN_STRING, IN_COMMENT};
	Stack<eStringsComments> stackStringsComments = new Stack<eStringsComments>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OcamlScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OcamlScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { eStringsComments type = stackStringsComments.pop();
    	if(type == eStringsComments.IN_COMMENT)
    		yybegin(COMMENT);
    	else if(type == eStringsComments.IN_INITIAL){
    		yybegin(YYINITIAL);
    		return new Symbol(Terminals.STRING);
    	}
          }
        case 109: break;
        case 64: 
          { stackStringsComments.push(eStringsComments.IN_COMMENT); yybegin(COMMENT);
          }
        case 110: break;
        case 66: 
          { return new Symbol(Terminals.FOR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 111: break;
        case 77: 
          { return new Symbol(Terminals.OPTLABEL, yyline, yycolumn, yytext().length(), yytext().substring(1,yylength()-1));
          }
        case 112: break;
        case 97: 
          { return new Symbol(Terminals.METHOD, yyline, yycolumn, yytext().length(), yytext());
          }
        case 113: break;
        case 75: 
          { return new Symbol(Terminals.VAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 114: break;
        case 36: 
          { return new Symbol(Terminals.FLOAT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 115: break;
        case 90: 
          { return new Symbol(Terminals.WHILE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 116: break;
        case 69: 
          { return new Symbol(Terminals.TRY, yyline, yycolumn, yytext().length(), yytext());
          }
        case 117: break;
        case 96: 
          { return new Symbol(Terminals.MODULE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 118: break;
        case 14: 
          { return new Symbol(Terminals.TILDE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 119: break;
        case 100: 
          { return new Symbol(Terminals.INHERIT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 120: break;
        case 53: 
          { return new Symbol(Terminals.MINUSGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 121: break;
        case 106: 
          { return new Symbol(Terminals.EXCEPTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 122: break;
        case 94: 
          { return new Symbol(Terminals.DOWNTO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 123: break;
        case 29: 
          { return new Symbol(Terminals.LBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 124: break;
        case 56: 
          { return new Symbol(Terminals.LESSMINUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 125: break;
        case 33: 
          { return new Symbol(Terminals.INFIXOP1, yyline, yycolumn, yytext().length(), yytext());
          }
        case 126: break;
        case 15: 
          { return new Symbol(Terminals.COLON, yyline, yycolumn, yytext().length(), yytext());
          }
        case 127: break;
        case 24: 
          { return new Symbol(Terminals.SEMI, yyline, yycolumn, yytext().length(), yytext());
          }
        case 128: break;
        case 65: 
          { return new Symbol(Terminals.CHAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 129: break;
        case 54: 
          { return new Symbol(Terminals.GREATERRBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 130: break;
        case 102: 
          { return new Symbol(Terminals.MUTABLE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 131: break;
        case 20: 
          { return new Symbol(Terminals.BACKQUOTE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 132: break;
        case 30: 
          { return new Symbol(Terminals.RBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 133: break;
        case 9: 
          { return new Symbol(Terminals.PLUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 134: break;
        case 27: 
          { return new Symbol(Terminals.BAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 135: break;
        case 8: 
          { return new Symbol(Terminals.DOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 136: break;
        case 57: 
          { return new Symbol(Terminals.LBRACKETGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 137: break;
        case 70: 
          { return new Symbol(Terminals.AND, yyline, yycolumn, yytext().length(), yytext());
          }
        case 138: break;
        case 52: 
          { return new Symbol(Terminals.MINUSDOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 139: break;
        case 4: 
          { return new Symbol(Terminals.UIDENT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 140: break;
        case 16: 
          { return new Symbol(Terminals.QUESTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 141: break;
        case 42: 
          { return new Symbol(Terminals.INFIXOP4, yyline, yycolumn, yytext().length(), yytext());
          }
        case 142: break;
        case 22: 
          { return new Symbol(Terminals.MINUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 143: break;
        case 2: 
          { return new Symbol(Terminals.LIDENT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 144: break;
        case 46: 
          { return new Symbol(Terminals.IF, yyline, yycolumn, yytext().length(), yytext());
          }
        case 145: break;
        case 49: 
          { return new Symbol(Terminals.COLONEQUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 146: break;
        case 25: 
          { return new Symbol(Terminals.LESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 147: break;
        case 28: 
          { return new Symbol(Terminals.RBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 148: break;
        case 105: 
          { return new Symbol(Terminals.EXTERNAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 149: break;
        case 18: 
          { return new Symbol(Terminals.SHARP, yyline, yycolumn, yytext().length(), yytext());
          }
        case 150: break;
        case 11: 
          { return new Symbol(Terminals.STAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 151: break;
        case 58: 
          { return new Symbol(Terminals.LBRACKETLESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 152: break;
        case 35: 
          { stackStringsComments.push(eStringsComments.IN_COMMENT); yybegin(STRING);
          }
        case 153: break;
        case 60: 
          { return new Symbol(Terminals.BARBAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 154: break;
        case 76: 
          { return new Symbol(Terminals.LABEL, yyline, yycolumn, yytext().length(), yytext().substring(1,yylength()-1));
          }
        case 155: break;
        case 6: 
          { return new Symbol(Terminals.QUOTE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 156: break;
        case 5: 
          { return new Symbol(Terminals.INT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 157: break;
        case 83: 
          { return new Symbol(Terminals.DONE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 158: break;
        case 61: 
          { return new Symbol(Terminals.BARRBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 159: break;
        case 51: 
          { return new Symbol(Terminals.AMPERAMPER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 160: break;
        case 95: 
          { return new Symbol(Terminals.STRUCT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 161: break;
        case 55: 
          { return new Symbol(Terminals.SEMISEMI, yyline, yycolumn, yytext().length(), yytext());
          }
        case 162: break;
        case 44: 
          { return new Symbol(Terminals.AS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 163: break;
        case 39: 
          { return new Symbol(Terminals.DOTDOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 164: break;
        case 40: 
          { return new Symbol(Terminals.INFIXOP2, yyline, yycolumn, yytext().length(), yytext());
          }
        case 165: break;
        case 98: 
          { return new Symbol(Terminals.FUNCTOR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 166: break;
        case 45: 
          { return new Symbol(Terminals.DO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 167: break;
        case 50: 
          { return new Symbol(Terminals.COLONGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 168: break;
        case 43: 
          { stackStringsComments.push(eStringsComments.IN_INITIAL); yybegin(COMMENT);
          }
        case 169: break;
        case 80: 
          { return new Symbol(Terminals.TRUE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 170: break;
        case 103: 
          { return new Symbol(Terminals.VIRTUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 171: break;
        case 68: 
          { return new Symbol(Terminals.END, yyline, yycolumn, yytext().length(), yytext());
          }
        case 172: break;
        case 26: 
          { return new Symbol(Terminals.LBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 173: break;
        case 85: 
          { return new Symbol(Terminals.WITH, yyline, yycolumn, yytext().length(), yytext());
          }
        case 174: break;
        case 62: 
          { return new Symbol(Terminals.LBRACELESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 175: break;
        case 99: 
          { return new Symbol(Terminals.INCLUDE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 176: break;
        case 37: 
          { return new Symbol(Terminals.OF, yyline, yycolumn, yytext().length(), yytext());
          }
        case 177: break;
        case 78: 
          { return new Symbol(Terminals.OPEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 178: break;
        case 71: 
          { return new Symbol(Terminals.NEW, yyline, yycolumn, yytext().length(), yytext());
          }
        case 179: break;
        case 47: 
          { return new Symbol(Terminals.IN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 180: break;
        case 19: 
          { return new Symbol(Terminals.AMPERSAND, yyline, yycolumn, yytext().length(), yytext());
          }
        case 181: break;
        case 38: 
          { return new Symbol(Terminals.OR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 182: break;
        case 73: 
          { return new Symbol(Terminals.REC, yyline, yycolumn, yytext().length(), yytext());
          }
        case 183: break;
        case 32: 
          { return new Symbol(Terminals.INFIXOP0, yyline, yycolumn, yytext().length(), yytext());
          }
        case 184: break;
        case 48: 
          { return new Symbol(Terminals.COLONCOLON, yyline, yycolumn, yytext().length(), yytext());
          }
        case 185: break;
        case 81: 
          { return new Symbol(Terminals.THEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 186: break;
        case 93: 
          { return new Symbol(Terminals.ASSERT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 187: break;
        case 87: 
          { return new Symbol(Terminals.FALSE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 188: break;
        case 72: 
          { return new Symbol(Terminals.SIG, yyline, yycolumn, yytext().length(), yytext());
          }
        case 189: break;
        case 79: 
          { return new Symbol(Terminals.ELSE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 190: break;
        case 91: 
          { return new Symbol(Terminals.MATCH, yyline, yycolumn, yytext().length(), yytext());
          }
        case 191: break;
        case 84: 
          { return new Symbol(Terminals.LAZY, yyline, yycolumn, yytext().length(), yytext());
          }
        case 192: break;
        case 86: 
          { return new Symbol(Terminals.WHEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 193: break;
        case 67: 
          { return new Symbol(Terminals.FUN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 194: break;
        case 89: 
          { return new Symbol(Terminals.CLASS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 195: break;
        case 21: 
          { return new Symbol(Terminals.COMMA, yyline, yycolumn, yytext().length(), yytext());
          }
        case 196: break;
        case 88: 
          { return new Symbol(Terminals.BEGIN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 197: break;
        case 17: 
          { return new Symbol(Terminals.EQUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 198: break;
        case 31: 
          { return new Symbol(Terminals.PREFIXOP, yyline, yycolumn, yytext().length(), yytext());
          }
        case 199: break;
        case 12: 
          { return new Symbol(Terminals.RPAREN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 200: break;
        case 74: 
          { return new Symbol(Terminals.LET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 201: break;
        case 13: 
          { return new Symbol(Terminals.LPAREN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 202: break;
        case 3: 
          { return new Symbol(Terminals.UNDERSCORE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 203: break;
        case 82: 
          { return new Symbol(Terminals.TYPE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 204: break;
        case 23: 
          { return new Symbol(Terminals.GREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 205: break;
        case 7: 
          { return new Symbol(Terminals.INFIXOP3, yyline, yycolumn, yytext().length(), yytext());
          }
        case 206: break;
        case 41: 
          { return new Symbol(Terminals.TO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 207: break;
        case 59: 
          { return new Symbol(Terminals.LBRACKETBAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 208: break;
        case 108: 
          { return new Symbol(Terminals.INITIALIZER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 209: break;
        case 10: 
          { stackStringsComments.push(eStringsComments.IN_INITIAL); yybegin(STRING);
          }
        case 210: break;
        case 104: 
          { return new Symbol(Terminals.FUNCTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 211: break;
        case 101: 
          { return new Symbol(Terminals.PRIVATE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 212: break;
        case 92: 
          { return new Symbol(Terminals.OBJECT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 213: break;
        case 63: 
          { eStringsComments type = stackStringsComments.pop();
    	if(type == eStringsComments.IN_COMMENT)
    		yybegin(COMMENT);
    	else
    		yybegin(YYINITIAL);
    		
    	//return new Symbol(Terminals.STRING);
          }
        case 214: break;
        case 107: 
          { return new Symbol(Terminals.CONSTRAINT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 215: break;
        case 1: 
          { 
          }
        case 216: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
