package ocaml.editor.newFormatter;

import ocaml.parser.ErrorReporting;
import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "OcamlFormatterParser.g".
 */
public class OcamlFormatterParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LIDENT = 1;
		static public final short UIDENT = 2;
		static public final short SHARP = 3;
		static public final short LPAREN = 4;
		static public final short LET = 5;
		static public final short LBRACKET = 6;
		static public final short END = 7;
		static public final short MODULE = 8;
		static public final short RPAREN = 9;
		static public final short TYPE = 10;
		static public final short OPEN = 11;
		static public final short EXTERNAL = 12;
		static public final short EXCEPTION = 13;
		static public final short CLASS = 14;
		static public final short INCLUDE = 15;
		static public final short SEMISEMI = 16;
		static public final short EQUAL = 17;
		static public final short MINUS = 18;
		static public final short PLUS = 19;
		static public final short VAL = 20;
		static public final short AND = 21;
		static public final short BACKQUOTE = 22;
		static public final short FALSE = 23;
		static public final short TRUE = 24;
		static public final short LBRACE = 25;
		static public final short INT = 26;
		static public final short FLOAT = 27;
		static public final short INT32 = 28;
		static public final short INT64 = 29;
		static public final short NATIVEINT = 30;
		static public final short STRING = 31;
		static public final short CHAR = 32;
		static public final short LBRACKETBAR = 33;
		static public final short BAR = 34;
		static public final short CONSTRAINT = 35;
		static public final short RBRACKET = 36;
		static public final short COLON = 37;
		static public final short COMMA = 38;
		static public final short RBRACE = 39;
		static public final short SEMI = 40;
		static public final short MINUSGREATER = 41;
		static public final short PLUSDOT = 42;
		static public final short MINUSDOT = 43;
		static public final short METHOD = 44;
		static public final short INHERIT = 45;
		static public final short LESS = 46;
		static public final short WITH = 47;
		static public final short COLONGREATER = 48;
		static public final short INITIALIZER = 49;
		static public final short GREATER = 50;
		static public final short COLONCOLON = 51;
		static public final short QUESTION = 52;
		static public final short OPTLABEL = 53;
		static public final short UNDERSCORE = 54;
		static public final short AMPERSAND = 55;
		static public final short BANG = 56;
		static public final short STAR = 57;
		static public final short PREFIXOP = 58;
		static public final short BARRBRACKET = 59;
		static public final short BEGIN = 60;
		static public final short LBRACELESS = 61;
		static public final short NEW = 62;
		static public final short AS = 63;
		static public final short IN = 64;
		static public final short COLONEQUAL = 65;
		static public final short INFIXOP0 = 66;
		static public final short INFIXOP1 = 67;
		static public final short INFIXOP2 = 68;
		static public final short INFIXOP3 = 69;
		static public final short INFIXOP4 = 70;
		static public final short OR = 71;
		static public final short BARBAR = 72;
		static public final short AMPERAMPER = 73;
		static public final short LAZY = 74;
		static public final short GREATERRBRACE = 75;
		static public final short DO = 76;
		static public final short DONE = 77;
		static public final short TILDE = 78;
		static public final short LABEL = 79;
		static public final short THEN = 80;
		static public final short TO = 81;
		static public final short DOWNTO = 82;
		static public final short ELSE = 83;
		static public final short OBJECT = 84;
		static public final short FUN = 85;
		static public final short DOT = 86;
		static public final short QUOTE = 87;
		static public final short FOR = 88;
		static public final short IF = 89;
		static public final short WHILE = 90;
		static public final short MATCH = 91;
		static public final short TRY = 92;
		static public final short FUNCTION = 93;
		static public final short ASSERT = 94;
		static public final short LBRACKETGREATER = 95;
		static public final short LBRACKETLESS = 96;
		static public final short WHEN = 97;
		static public final short FUNCTOR = 98;
		static public final short VIRTUAL = 99;
		static public final short OF = 100;
		static public final short SIG = 101;
		static public final short PRIVATE = 102;
		static public final short MUTABLE = 103;
		static public final short STRUCT = 104;
		static public final short LESSMINUS = 105;
		static public final short REC = 106;
		static public final short DOTDOT = 107;

		static public final String[] NAMES = {
			"EOF",
			"LIDENT",
			"UIDENT",
			"SHARP",
			"LPAREN",
			"LET",
			"LBRACKET",
			"END",
			"MODULE",
			"RPAREN",
			"TYPE",
			"OPEN",
			"EXTERNAL",
			"EXCEPTION",
			"CLASS",
			"INCLUDE",
			"SEMISEMI",
			"EQUAL",
			"MINUS",
			"PLUS",
			"VAL",
			"AND",
			"BACKQUOTE",
			"FALSE",
			"TRUE",
			"LBRACE",
			"INT",
			"FLOAT",
			"INT32",
			"INT64",
			"NATIVEINT",
			"STRING",
			"CHAR",
			"LBRACKETBAR",
			"BAR",
			"CONSTRAINT",
			"RBRACKET",
			"COLON",
			"COMMA",
			"RBRACE",
			"SEMI",
			"MINUSGREATER",
			"PLUSDOT",
			"MINUSDOT",
			"METHOD",
			"INHERIT",
			"LESS",
			"WITH",
			"COLONGREATER",
			"INITIALIZER",
			"GREATER",
			"COLONCOLON",
			"QUESTION",
			"OPTLABEL",
			"UNDERSCORE",
			"AMPERSAND",
			"BANG",
			"STAR",
			"PREFIXOP",
			"BARRBRACKET",
			"BEGIN",
			"LBRACELESS",
			"NEW",
			"AS",
			"IN",
			"COLONEQUAL",
			"INFIXOP0",
			"INFIXOP1",
			"INFIXOP2",
			"INFIXOP3",
			"INFIXOP4",
			"OR",
			"BARBAR",
			"AMPERAMPER",
			"LAZY",
			"GREATERRBRACE",
			"DO",
			"DONE",
			"TILDE",
			"LABEL",
			"THEN",
			"TO",
			"DOWNTO",
			"ELSE",
			"OBJECT",
			"FUN",
			"DOT",
			"QUOTE",
			"FOR",
			"IF",
			"WHILE",
			"MATCH",
			"TRY",
			"FUNCTION",
			"ASSERT",
			"LBRACKETGREATER",
			"LBRACKETLESS",
			"WHEN",
			"FUNCTOR",
			"VIRTUAL",
			"OF",
			"SIG",
			"PRIVATE",
			"MUTABLE",
			"STRUCT",
			"LESSMINUS",
			"REC",
			"DOTDOT",
		};
	}
	static public class AltGoals {
		static public final short interfaces = 108;
		static public final short toplevel_phrase = 109;
		static public final short use_file = 110;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9piNGUyrKJMdoIN1mz4UJIbF5wXIA$I7r851QaAY0sGgg20W2AozeAzOEyAOk#zzzvrxNN" +
		"jgwwhxjer#VvdIZ999hcXFH$xlNj#asbdplpdpCoPIRa9Ook#SCTk9hI5DO5yvtDt2#Tzvs" +
		"VdJUT3vzVSrjvFxbXMnEeXRypcGMmogo3VFiXkPTzXjxJBMNktfbrcjq1UJzOFUOqt3sBTs" +
		"UvkOwqTdx5txJ9h5diBULqzpstixMVVplhXECkQPr$YxMSY#sRxLl9PT#icwsRxRzQ3riFM" +
		"8zQZrcFMG$QTzean$jliMw9frapxOlO7yjR0hOORRLzjhsM$6UjRANmQDNxQwTQRR1BRnTx" +
		"J7czFjZwt$cKjj9UuRJOFOdrP7xTDj1$idTdloDrsyo2sFHleRgkrOJLRYpOiPLSXjzFcGN" +
		"psTWhQu1IwHMZ32cTBv7RSF8XLUAxRKUk77PtMQCC9JYboksmUnDU3Ba4Rt9gY7woroEsyU" +
		"H2RpgQwdRKsREKSWZPSwIn1xkWgI3DCQQp07QsD9VGBsd0$#mvvErT1gcj8knYqizO6p76q" +
		"uJ6t7lAcLpro6iJJM0Ls7DFr$GRRaO#bCkHEhOAqPJmDBQZdJhLkiswtxh3kjEvYuraxree" +
		"rP0sGktVL8sVFU1ghS9QwUrltMFTQzrdtMm$uRTW6kNjLFMA5XhGAjmZ7VcmxUm3cytb#6v" +
		"eYTy#gHwoB8Qt2xebZF$O3sZ386k6teJbozwXwn0OOqgWDUx3#R1ZRYTNMsj02kIqgZzYM6" +
		"VcsCgHX$BWjx27eWmAhZZNGNSQ6ihd8AQuyikniV6o88Qt2wetZVAihcyUEPiVmFcYBd7sg" +
		"7h76XhJZs37mErGUEHbhiziRKf#qEzCHvvnFigtT9t6ie6D0NFzN8jJ1RLzvn5PdvEjbI9l" +
		"4TdFRMqMi2QFpjr5OduljybmVUn7Ee$Unhx3tjnTOFx29hAFRtjkIo2uH$gObDYKZNt4ypJ" +
		"ufrzMQxPLM7h5U6VdA3MaZMIVuBIgFW3ORNtT3sapM3NxzoYFM8oDVRqDQ4Ji7VjlA8pOi8" +
		"zzWGnfT3shhRLjvn0Pcv1jbI7k7lGk$JUKH6vkHRzTucbkJVGM$TUKHMvEDpvrjIBlQlHf#" +
		"gyeZTsOsFhQ7eUnLxbNmoogFsBICVBFYQUurxZNmYogFs84P#GwEf$5nM#Irh3nYHsJaEpw" +
		"UvjxftWc$lFB8FImR7z36ozxXte5ZrqgaGxFniPNnD9oXrB0FzaegZzW96VbEDgJHMbRYRL" +
		"rvXDrADhvkyJIh9Ui7lrdb4Jit8zybyJIh3Ui3lsdb4RiY6vyxAvvcxS6cmj#cyeXTdP7l6" +
		"aDQV#pWjl4QLnwvepBoZOodyN7Rs6jKUSGUoiRdxcH8gsbT0hzXvH5xE1kVzNGy3MYVmh4I" +
		"xs3WF3wQjgEHSuIXx5hMnnrjByCgmOBpUEkYy7cyMs0rTVTnkrSUiIaPEOV7q#nBtHtWJwj" +
		"46fQHRsWyZLzBdEOrg3noXsJa6nnF8xJmjo2oIuI$QSaTb95lO3pDkS9PRSts2ec0jd3Jax" +
		"jzHhu1yJIooa3RfFA8FPgDpwqmfDMqZy6nMoLI$uny$U9fpdndVxURLrnvvFRDoDSddaRtQ" +
		"k4thpnYlJBoFHvFiwzYZy6lnEkcJiDeYZNEUDtq2KFgQsmxEbf3uNRsNaEyWeu1YJjIzkVE" +
		"avLwTVMvMChf9Zwdbg4iZPSMmVhDAiJwRVrNNeTNzzZAdESgSmvWL4LIdFkDVC$7q#nNhKu" +
		"unjlqKwHDBPsNAtEcEBV6viGBnfdoIZpDQcHrndo9j#aNlKtsLrPZvtLlClPc$UmIkxKtsR" +
		"x4cvn6YKyWffOIP3ziFyhUWBy6RZMSU0BnJMCzxyao3zZt#UL$PSESnxsjAe$OFpBoVMb8R" +
		"KDQzTf0gssWrVJhmKbQpNhT#P#eOmtSQZYXrTL6ld$5q#m$s42wxipHjWRQra2RVjqu2MtM" +
		"wyxVeeurSAlXE5ftIoEV6qzpjdQsWL#tyeXvsVYiceRKEfL7LgriVEwjXjHQbKVkBTduh2q" +
		"DgRKhZwojClBLDwJMgpoojid8rzoGEedF#acOzPCmwoUbKUAiJoqbY2o$rGB#6hZLS7pMMw" +
		"sDzVIJPSZoopIttSOdgoshGRwzof2xhzkEzKFU0FSU#mp4xs5dmQrrxy7nAZfg17vMmKFxi" +
		"bNklbONgw6$OzY2rM4vzZRdQhi9Q2khFVTNnFFidcvRTgpRrXhgFcMDGCfJzWxkKsoO#nHe" +
		"VtuCY4eKk4zvJtfFkllJqQUTsUFsG9pH8kIszNPE8yY#tRtTEKyzGscNkBVRPVOHwQLasVd" +
		"iEtO8$16evtPoxdvMHsULYTS#KfRvctkJdpgAxMpDHetxUQF8fP5x4zlPlSavX$MYtInAlM" +
		"y$Qx$4#gIN4iGghA7i6s#K$Petoje1SR6F#hU9rpvNrdUuVQ6Vsi4#Z72oxxqEx0klGngvN" +
		"$5drphOVxUVe3DszojhBZlAUJ2zb23d4QiRS7Pm3uPRHSxkwFwDGePw$YPyUrijlxsxIk9i" +
		"p$xqsgUHtTwj0xgP7#iu5x8#hC1UPdTEBoN8lHbpvsQllUKWV10vwtpxDpR8o7kGy9r9R8c" +
		"VEi$AMREzURRhpNDgUFFYPDUnQzWMXGWTFt$vJFRuVEioTfdtcS$P3DAcmNVicZnULwPlPV" +
		"rejNAVTP#r6xbRsONk8iXQnCx6s7aMkKsidwrVhT#jFotFBh8Rs5jJFb6kdWg1zdMVTv$tz" +
		"dLsz$Qrdl7sJIEh5VKu8MNV2AIvHauNxD9IImdArQLTCcHiXxeAu5QnhvtTd2acNlQThA#s" +
		"LUYdJhJ6MHVYk2rS4szY6jb7vTehfDPOWPHVgqaj9SjwxZ#TBr170s#YUo0vnF$ZtcRYfNm" +
		"YQxWAWIPOVO1n0Z1Em1dvX3IYkPEhvoCT8f1Quwt5wULusLPSdnESF#4Al0bkGMuhjwjzd8" +
		"dN#QSiG$gKQUuVxhz1VrXzuPeXbaPTlK#jYbnZXTJxLEeqlHGdswFdGr57F$SFvpUar77Ej" +
		"ngvjncvwmhVsrE5GByuPo7#2$iGxYFtbpHo1hhVkz#pJzYdt38DpTLs9jc$MMlJIqcgoJxE" +
		"ZNP$iU#0SzrVSWrp8#tkraHZFNDag0vwNgPvuwq1pdVUUAS1GcNU#3Io3h1QMQs43ULNF8S" +
		"vJrkDd1VIImboNdLsjahW3$F6muR2MNEiIp4A3BoKp#kZVbTfl#U6sQ#ulsEb#TqT1fT2pc" +
		"ZjUVUri9vhsLNE7zXdf9QILDCQxlt3$Tq#5U53o7d$oEs0VZVn7YByN3tlGp$jD$jkn7wpk" +
		"xc$kKFWqkZBuBy5rd3iXhxCDM9NiK5vId7AjMKLzi$kRz37R#uoSgozDSYkC78l4xxT3$sk" +
		"qdvrkbg3tLynFd$5#FmrZPpjxS7sC1gVraxsDVQ7zlRsxrOZQ2Yrb2ICJxJeLwSlmil9MOr" +
		"04usyouKF6t6zd$OpPi8uzsVW$1auVquZ#mLw1e7Fer#SmRccRasdZtqiMvrUIf3JcNtiRE" +
		"$#REs2UkR3dUfknLPZBslWPQS9tzlRVbsbUMDpvKw5DzOPvurbPtbZKsaF#ovlRxRA6SoEj" +
		"8OxYEVgE1LOTnVdAGTo2xpThBsyiTP#gB4CTVNoTdEBd9jClEnmuJjtOsLIvV#qvbkBt3#n" +
		"$$xJVitzCusifMoL$GpstxtOMckuVI6xoZeOVRSolPIWN7llUki4XBP2k13rzNAtScpdDXE" +
		"lmsHzhTWFAiqROpMmplR6G9TZi3SSaqRMnS3v8d3sjsvqVh0lT3wnrZXFM5T2dwdbY7AzlU" +
		"kzZo3ZMeGBKLylxoFhEkSh4w#pXopJ6VfKgQDptQmdlT70EHeuHwUH#pHmVW2Ssrl3kJunM" +
		"h6c5AXywp$9PVd$2vz1w7g4Uv7B5JhVvxOnrbDNodj5XP3sa$MHzQ7x4$gSkpY9VHs5ShRr" +
		"QQw0BBnzeVKbt3#jRwplh7$7Ic1Vn$swCevz7UPCgTtMRcItimljxP1wWDtBxerp8UJ7zdK" +
		"7Y7BM4tOV9TCRRlUtHth3iHuDXqw7cuZlFyaVQ#zYJu5Ezs17sdlPUzlJx7tiEVRC63$jFq" +
		"Cfre$sNES2Updo3WJEm#4VxVxNFja#nUVWE6Nv7j8$qmuG3RFFiS$pXW7ZCFi2RvY9E4xoB" +
		"mF6owqkTb$xMliw#mRxHliU#o7xmHW$uGob0ET3zYFsSyXx0pW$HNtTxVViVzYVoNofJn5Z" +
		"PqWvNpYMBsEe$RNzdJSKE8SwZZVKH1md#V#1JQeDd8FOQgUEiuK32#ZKSufY$8Gpb6Bzw3H" +
		"ochFLgAFOBdHQeBxLJhdJqcaZynLE7iEev3uiSrrVnX1dMwUjDmGuXpWTlI5fv0mXsmcSGv" +
		"r#JdzlBsUKCzoPu8n8BoNB3dR6EzDGpshWt8jyPxgpjpCpuE0u1UyiwSz5orJ#O6TVPpyS6" +
		"tY3WNLm6ZcBdSFOQc0zY1tf7EmiHrs7EYiWAxMKB7kuSxHp4lpJu4w7EzVzZtE1irRd0Kxk" +
		"spl9CbSvr$gvWvphd7kyGS0uoBdU6vH6pXt0UAVLnRc5zNFkSzvo7dQUTLvotaql9Sk#xRp" +
		"77eV$4Tm$l47MuzQhpfVEltGUu1IyCjNvnldMpnte$DVvqHi8d0EnGn#OHiulmEa2vrsEbw" +
		"lXNPShojNFDSWrJoybADSorohN6du7kp3N4NwNt7QW7W47xtV1srFwVRq$$VpjSmEzNxtjW" +
		"NFxt61l#rG2pjnGuFotzxFtOsw4Sq5kZFU7zzyyfGJzn$lU#nR#l#n2xplu$$P#P$W571md" +
		"3wdKKFu07Xi0d0F8JoCmhc8CE7zYeLzwAR#ig8VPXSAFbkKu9MzGni#luB4AuAmWFuqKpbo" +
		"d2CxKKdvPKO$0MH4lot5Atg2Cdz#Vn$e3Pt$oqyZ7sIk2CxMKNrRKuxjuMU3aFgocBAD2e7" +
		"wSknzmzYFVHDpEz#ES0cV$2CueFzdvK0hMTyafzTalNDQtypm6TFr4VIe4wikv#y9#zYNVH" +
		"1ndNy5f#iNu2MSenSVPL#Bi6oxhu#mhwb6#9hiFZ$K1pZxacuZZx2CuZJYZ$8GpbEBZx2Dn" +
		"zWcNzN7s4VKeNvFTcyTwAnSdURskj#0queoM89parvNnhHHEkv74sLil6ztNAOaXsNnEq56" +
		"uE4cSlRnU9eoYTAG4uII$hep7SVRIonfmzbBr#L9xybXFvU8aSVOKd4QSqHA4a$owCXx7sL" +
		"Cl6#3at5ihYI7Ps$7OTih5IUBSJd0QSKPB44xowyfu7ETsUbaD9t5lhII6PFVWiHxAnKdYx" +
		"24uZJWLPpFf4qxowyfu76UFe6pyUhAIgCjskGGw2XSdUNxqe$jZ4ivO2Je$8h#kZCTm1h8e" +
		"FuvJbDDbUpjnr3if5oUfpvq4fr6VYhEPz4cVvDULyRW#TmhA6lMvawfFIfZeZUInaSh5IU8" +
		"SAJYDE1LdC#aJJlBhodWSvyYWh17dI5MVZsD77jjHkJHAn9bQIYyRr9DMLgM6yaVms0ZbqY" +
		"WHPseflMnGJrfPbHhAtu77Tb0kZH9nffRIomRrf9LLgQ7yxZpMNRaqIiIPMael6zIJLbQbX" +
		"lAxyLWtvT8e4MTgARriK4zQMPKQok$8OnsLYvESxnq5fn6ducmcVPhlvDULyVXyxnYKDSxt" +
		"Zge#7qSx7ckdN1ebuamjfPSDwaahgr93#UDuR9noQPI8CxMKNZQe9wsiIWtbxyfZkogNHea" +
		"uKqlfPODwqiggr53#BZosYt9fb8WpjPHUDgWdhQnA3ULtvR6koiL9pgEkWjE8Kt4sapxD8$" +
		"BhodXy7dKDoXhdKLTLdu#Z2uzrKIvE4cSNmMd4gJYRIPzmabzNnkCukmHbZJYxgFfy79rvh" +
		"BDoSP8uEmjE8qx5sKpwX9FykZ8UnzavA6l4sLdLv#FWrpReA5oS94w4cBgAGMVXT5M5luCc" +
		"A0MSmYUSvDULyJXE$ueAScCuS#MYdCYNCcv7hHNYtQhExNPNwrLPltWwwtnsftEPSubp8r8" +
		"Jdc#pRhJEjKwtph5kiNiwDxCFd4kToncpHh2x6CkrOyFPtVPin4#ppcJtEHUpE#n3WLKyWq" +
		"k$1zXrx7fs0xkHtSJkOVUo##sLsblcg6rbrYp#RbMMAmc$MtLZOcSCs9d0ZjzTzkFsnMm5k" +
		"viYpgxPiLipM3#thYsldxbrmG$ikItWXzyBc$7$vbnAIguUSsuFndYu9Ed0UvNYtglMKEzL" +
		"yYbEnu301ntOFNc91YXUOOqW7LkTX8urtLweQX0wvg447VCtl2sqXr1za3WmqB6r718NiBk" +
		"j5UvpxdD8YUdOMcRICT8FuXAMimFa#EVZmpebh6Fl4pv2zhDdvPe1FNC#XzFU#soDTb#cDm" +
		"UpnUxBYIDa6UJszXx0aRUNlpdu0Uy1zsKw1fJhbwFdzX#mLmVeSrEy0ZxN2iZbTl4Al09x9" +
		"Hq3KkWf51dTmNyJcFnlmc$olmbEhY8trhkQFvjwjTqQxXBlwZZ9cYcKr3UCSrrD$paLerNm" +
		"gr1kMwiT$rV2iy2mnhqkQ1ruhdElGvdhTBAsuAFkElviwbgERotmhGM#jN42wrDM1nvAm9U" +
		"RJ5pUsjpat6IBsoteb9VCJQ5GRXBm05zkjzpkzXg4LpiD9Bwr1ltz8VNtFiUt9X#Xpw6NL8" +
		"vdYOjSRh9mZ8cI7EcQt1GPVoQt9s9x2sv11dokn2TuLkSZQUbJEPJJLZ#jf1uFk0N5yTdCn" +
		"qSSL#GZMKigXt8QFgsa7W#u1HdmsJu#uhWy7ybQKZcKq$1f9VLum2t8W2$duoEEo$AHh2ML" +
		"GpZlC0qVfVET1CyxJ4c2Vv$a5dGVw31#z8dpKnhokUramdPwdyHjfxMSsqvcdPHcEo7n2NS" +
		"fRC9IQJkVy9wm3gAZ8bQJvwtndWYiYztJwkJLuALhM2CevDNmQi1srj39jvqrehRJ#pY4$c" +
		"EWNwIZvoKvUfQuRidw7rExCex#CSGP7GFYijPuZzchtJh1ti3BgQDmNWxeSphvw7Cnom$ik" +
		"U59grPkLu7TcPIC7NOtX$v$bDVHKs9$r7iKkdnK9udzqK3pRXsWhIcEodarWRscJZxscZ7D" +
		"$v2EFfFcQzhqTEV3OXU5FGYXVzXx65WUriaUpj4$hA#vu77KKJZF0Nf79n#ziswQpu9TrM$" +
		"tzExYFh1RT6NjBehJCI2nOi4FiByYZjYZlKA#zmgmlwAJmcurYcAdrTOwppeE6kFsadR3Rc" +
		"stjZZ2lzFwk$LQWDswGCTkhRAkLlNxlrkPs57U9UDtMyT38vsiCzXzx6Ps1xkMfued$7#8x" +
		"zIiKnKcsxMki3ycJDO7GfJz4VSu9euk4HErGBN4X4cSFMcOWbtgoscOf9uMMgywfyAlS8jG" +
		"Iv72n7Uc2PZS8YA#hsNs48796eYKkzXB4jF5R4u84$znwOQpXXWcwCd1#PzRpwr7HnzJIjy" +
		"HB#Tax8T0JqY1dfpsXCaxFA8dx6k9m#gAd1HCtk5AJrmktLK$dClAgoTDGrJpG4FVxSyEM9" +
		"VnfDxKORjm64$kD3LKxI#vXiLxFFoGYS9v#d0Fb#IOIKFJhAxk8poTZjofeqP2Ci#HqZuGH" +
		"24PVqIlJ#LQPodEE0LIYFIpLL#cv5CoqTiJhJF9rzu5MrFkBwVATyZ84kxxWkmsxliY7jB6" +
		"1oANNHrmnYcSH#LoglpxUXqib2fymmvO8PGbtFS40U5x8Xv2#Bx8vGZVIw9mNaY7x#br#5B" +
		"VapfyJqTelHL1A4kuxmgo3t7V5V4GmlT4BaVuRXA5yu3m620yYYDyLw$3b$gkTu9r612#Qz" +
		"rWOIPw9vY8Id3$7K4ezmul$Ku8uRigbtAIA9p7#9KgvpEuJyCbVQdlU7IMljfzXom34Auq4" +
		"PNW$jk2KEvjNlhj4C9tL2xb954uBwJ3K4bVwjlUyLo7RqiT7cyYAi7zjmIXt5kyz5iXX6#h" +
		"NCf9ed1Ug7oeP93gqNfmZKhnZZCHbU3#cu9GxarU#irm3IgNSf8ed1VIOQYaB$LDxrYkmpU" +
		"j9Lo7nvg8Id3$3K4ezmOl$KO8uPigbtAIA9odho$k6rXVMC17Lo5uN5oZUCDqjSBvMDQjIh" +
		"mkY48Y7aBuXieDEECKpWiXV9qZV3sGuhrXzNPVnx6hzmRvtXkKfXEl#7rHYiluko0AYNW8u" +
		"UigD#2CKpWlLFxluJhe1uH$fsjVLYVoKoosgdTtGTRUxkuY7gv1vEgSSGhdXInsgAGlTNTf" +
		"iNVN4Jh7Hn2gUgS8igQxKqGyX71taUiS4N36APmNGZX5hyENEaKYd9AwBiiIxcw2h7tTtKG" +
		"yX72AoDKvunJE8zvSBLa#LDANkblWf$IogdUo86k1Erd4GmXt4xawPvp2UPptBXSxGyiAb$" +
		"Ib8aJ$82C$1Q6IDKcGzOOxISH322UBN9qpJk4ypZjQbf$atXRaohJsVcXIAa8gGs$kdoZ8#" +
		"WH7o7KdXX1E4hayF369mddy$NLtsKFSqT3XH6vj9WPIX2Ifmucf25MzkmgoFdDt5V4GmeaY" +
		"L#UCKpWlL7vNhiDG3gpDhk9AE$af25MzkmYold1t4V583JnNvunJE2$Kow6ICgs37zeb5I6" +
		"LeIzEJ11aVOiZzVA44C9TH2uFJqYYS9vQKuGqtiiJ0Yb2Kk2d85JrZXTaZt77YtW8uGIHgt" +
		"F6APmNMlN6SuJZ0ocybyVBNXwVYb3LEqwGFS4T9#8XXED5hiuPft1U2E4uZd1S88KZ72SHZ" +
		"aj5gEfzJP2zc$kQY8SGZXEvEcUSmdaXXAznXAy5KZZ2roJ2rr8HgdfV5MJlxhuguY64hubS" +
		"dJDEuRnG#L197#6h7645QfLNOoDt4V#kIkM$hiPhB$0h$9LVLzDsgFIzIfxp2rqJfEjgRe5" +
		"yYmfsgDuBrjVMuJWEzLx07ki5xmLx9Hq3egByck0Bfck22hiTUJP7tCENry4FJCJ#DJYR0J" +
		"$vZbsJiDjrfOJ8FNnxZVkrTXtSyAm1ybRA4ZeoVWSqXZtlrKhwUG$vxQ4hhGzHd8u18Vwal" +
		"SPxo5xjd2dlhpr9QG79yYj5QECWinxdw3vHoAm958lVYG2oE$LhmDwTtftY693GcNUdwxWE" +
		"Ui8X8cJkiDYTUSwXUE8KzBv0Hcb9o5p7Upoe3poFUu#BeoBAux8UTstNHipcHFn3OnWuXyy" +
		"JenWof2KYixtVWlgujkdguPDM3$QWLJVNmkf9ULnOBRU6MmEn6fo8VqWC0#VmUM8KGuQqH6" +
		"IyBYNBwXx79V8PzhDkpis98uZu1ySmS0wV9qR0SA54Tg$Y4p7GXVpe4t8gt1pvHBnSOCj6a" +
		"oJlGbdwGdq643TThm$NdE5EmgKIsVrg1eYOTxypcOu1mU9LsAlXyndW7112jWyqVA1zjfW1" +
		"piBet8pVISYBB79TDsgBzR2mnMfkaYr6$WjqjI08X#pPrPhLk7fZ8FFuELLmZaPnkgvhhx6" +
		"wXkySYNCqv2xduPsi5VPAwrsJFQCxct5arZlMGSczQOMkQgdUr97nM0Pay3aow$MDXEozA3" +
		"9pRreVv#tDhrDwawtx6X2qrtt1VO4Z#ogiCt6FEJhEn1D2crHd$zWWdNsTCWFO1iq0#RE#3" +
		"u#p#3Drliugz76cMmwxG$9UmzfztP7nP#eYCq3JLABLi2#IcZh4EZoBpgmNrs#SMIzPAnGo" +
		"##tr6sVsEnlNQZXNYwUGNDe$DYDa8gGJFPqLHnRlSMkBTTivEX$a7sV0qfGSHyP3EbapqUC" +
		"L4MJ1ohHK6mqRUK$BaJKXnv7na4wS8HdPYPiOsJRaE38UqYaFiaSsCJBwbzhM71aFwPG7sQ" +
		"kR5bbkE6R2149cUY8c3PbLN6MHbLPPP7jMMMGlLrLaj5vMKMITDXco2aqohUY1FTWhUKLdU" +
		"$k5zfGh#g4fA$gw8wFpW8hmUS0w8$ktHFQtZOeiyWll7BLGx3n0eZdItmCTJNl8oaV6yqnx" +
		"scDzP2TMCMGd#yWktnJ8NFuyasMbz6Pjgz28x2eVsNCR6rdul5AT1xYt1UbE3x5tZUosdoA" +
		"##BcJIC#sf#NxudNepSWrWoVzl10ofvVGbVsMTRXMVYFgp7wJFzzsaOPCinf1ZjbgKAvJeY" +
		"FpBg8qGkPTz9SZQxLfa37nJE05YSWkI4M6NATT2Da5bCQHNR1HaArAHBOg5HbodMKXPAieZ" +
		"IDRjL6GNPA8x99KPFHiyjz2o2wXD8xiaWr7vjxbNHpOimWoVWOVjsSI6NATeqB8BgOqZkpY" +
		"ZRO6LEZsZ8N$yvUs2#gY8vD#r6eCtrZ8#2yhCksfmIHazilhXypff7o9J3rVgtp3EBDTX3w" +
		"6apwEtmXazlSRRzrKoA0N0pAbDJCoJL$$JLi3x9ysQAzH4UfDlJzVJZaJtYHdA4vJ7PZVco" +
		"As8AqtVImXtH6oN6uJz2QBz2OJ#mZtHRwFMEE#QEfDTNqjrqOW8sx#tzE3DlREKOIivMwX#" +
		"v9RI5Vyt9TCEhDysm$EGlOvSQd$ddATdPaF6KgjvxcJKrS3dJZEdFgROfpbGTOu4pB3cR1#" +
		"5z6CBDDTH0qPJmlg7AGZ2zz5rBX6wkMb7xcBQC2GzovY11cb1NLE3I7ZTIbP6jSylRpqjRl" +
		"L2HYotAsclSRvciIWpdU2774dMhzRJRyWL$5uvrCQtVNrpW$kLXimvBrRxPt7QpX3IjRkO8" +
		"Tpn9teu6vrD9VulVEGVWReFBxNE4FUUJLYo73dzJGkzLGXNRUquPoerOZc4hzt6dP1fu9Eu" +
		"yXEtR2vwPtEfPvhG1RAYI6Bv1A$TpgGdGiwdICxTmEHdSEbdcr05ig98Ola4hzt3f2T3Jg7" +
		"8pjx0v6TnQMUOa0MoeaXY#GIltSMa9q2EeiZEsK3aPtCfPvaG1RAYI6Bv1A$TpAGdGGwcIC" +
		"xQGEHyNN0EzA0ZESuDHEGYTmc6h8JlHFjbKup9mT$8wnE7Z$pyLOOa8LoOiWYkSJl$GqwMq" +
		"5f6mMP#B$pmGPaePmOiaWkyNlBWEnWIjieoFZxChn33SX2EJ5aaLpYzmu2iaCfRQCWurUOl" +
		"4CCo48vCMIHNEBtbWFP8PJcDd0RYAFR866lmJaKJvmWZz#Tz9O8wOgVfuLoA4yvecWkyNjB" +
		"aRw4qjpwRdrn19anS0wV9qQGjvXBFKBMBlbvMYY7yfGZYkOIlxSOwKTGMkY99IE6zTzjnt$" +
		"cCvG8poQzWboDh1fPDR9gPDN8DZKoVczdihf3buICFwV$WTFTEjpx02iJTzu7MD4$q8cNe$" +
		"jE4sChklfkwIIt7LOkupTDgRJoJJ$9LHhdrrD4gdGB9BLp5sYn475#wHjhbLnnVZr5f0eNB" +
		"gburwF#pfjz$Ql4z#iGNaNEH9nJ#iRw9LUSNqyHgTATAccLUweM2n7dbxxffxZY$7gAI9Nk" +
		"14cdkYTeiH1nVkaRQvLSSNuzHQHAjr3I2Uv2BHOYpYzzOwsIAywlfuXKwSxa$ReJyiwac8a" +
		"ul$IDjKgkEB#U8bAbEqNIcUufMYn4d5$wnbebLvnVJn6fqgsKT8gxKek5YFDBtrYhv8hpwo" +
		"aYLRep9Arqpz1Y8UByqZVMAhdY$7gAI9NkT4bdkAThiH1nVkaRQvLSSNuzHQHATvgaqztJj" +
		"5Y8EB$qZRLAhZY$dY9IfJjPqcdkoLeiH9nV#iPQ9LUSNqyHgTAT9EbazoGj5YBEBtrZhP8h" +
		"pg#dY5JfJfHqadkY5WiHvvU#iLR95UVNKqIgTCTBEj4zNek5YFDBtrYhv8hpwoaYLRhZ91t" +
		"l7gV5GiJvfM#iLNB5#VKKaIhTCPAESu$HOY7Y$D8trYgvulnwYaYLxWX9nxX7QB4GSNxf6s" +
		"kLN75#FKMaIdUKf2FSexHOY3Y$z8srIguulvuYKgKxKj9Hxf5QB4ISN$h6MYLNd5zF4QdI7" +
		"ItfIFTeBHOYpYzzOwsIAywlfuXKwOwLTBHxh1OB4UUNlh5MoHNdzrFaEyJSOwqhUFexggJq" +
		"tx5kjVWxbXFVQnP$zn3j2sOm#lh3R263ZXPVQRoNAKv7xsNoHKWdI#og8kzRa#y52lv1$pR" +
		"7DGwoat15tZY4GWj5$Ue#84yR0rpqXZGLFuYTfBs3QBuwklEjKztv9g9t77C$h7bD1izTvl" +
		"FBD9KJbEIXrl3vVKPt7lBcSTz0acCUI$WfhZY$dY9ISTWM$XmUcuEyETmtaEIOarYhv8hpw" +
		"oaYLRgvF3ONUNEvRo39CJUnLiaLvzTJHAfq$8atzmBaNS1z0qcE2ynrgbA#Np$WroM8L3X#" +
		"fugES7NTiqmaE8Hlh55oIRz#mAzByElXzs3fw9w7lFDC93Y4RwnHSiNvzHI$7dxlaexkkSW" +
		"xrqI2mptNN9$8anB8hn$mwnByUlYTIJgwvo3l71C93k4RQvHSqgyVyEiI$7huNL0wkcSZxs" +
		"mJ2GxtR7Dz8azA8Bz#mEzBuDRFESKzsxeYN5Buph5vhJA$3cDD2Tuy6FniSKxzWTFR6Mhv#" +
		"tzlTq7k1zxk8Xuk9NATCSukYZDAYY$iHrDv7VoP1JeAPoB1GNuWEwGBoQLyuj5JtFEzkO8e" +
		"90k5LYQHor7DDPF47F6ZgPnJhapU745idATiNRXEaKzbvfX9oM5Zg0OliBLOcO9Spgdgd2q" +
		"8TSusrYdogSniCoavg7CEz$KwP#kr#7NE4eGwPndh5FbKPfQPb1pKoVb3TSxIQ$7hd2O8TK" +
		"uprYdogSmqCoavg7CMz$Kwf#cr#7LE5OGwzMU4$9$Cfp9JpQJuKESqxkjrJjMb#39d2gAGi" +
		"KwHJsLccadnYVh2KeBSW1En6O8ePAnJv5EP6MPIVBBU6U7IkXG$THz153BMAVAfp3vcKdoo" +
		"tdt2fNKfVkfqGHGorYdogSnqCoa#MU$qS6bTYfyihRdQoqP$mfhp4edlMAQVtPxN495coo$" +
		"VA6kUVsq8f94rTsi9Wjsi5PT6Fv4hV1FvxO0qkMz$dz05EQey7VEZ2yg1#tMJH8LEr9wjlH" +
		"nTJAAFNKgqFiw6CI8nmElVIGbB3FUQ#9SCtKa9Zm4kCRtE8xb4sGAdcpwYh5s3NilV0k#He" +
		"1NMwzuZ5ATZG48QqfyEMc0zdpIASrQs5kGShGKnQQe5Gbh#FY1fshYBoDD7SGQDt1Fqglsq" +
		"Tm$5wHYGrCWzkLBYT1i9eX3ANSDBtwktXdBv76ja9ZagrYJfLA46P$9ikOxN9DwTsiZu5bM" +
		"EMkIO#r7bEJrLdVdxCRtziawU6t2Qso$FyjzNysdTse$S0l6MBxPGrCOg8lSpSNxFhGNzGw" +
		"APMy1znwv9iz2kAsQXUCkNqzCwrVzIx3SI0ixlus$vqjlkq7SP$Ni6rlw1TjBQJi#iy#VM6" +
		"NyAtV2JkJvdbDYPklvasmtw2vvoD#jFlCNBwGc#o5KNJKx6MMG5zyHIsyVxW#TQrwUqZq5U" +
		"HKHIy2#E$#erwNMQDUKMsgtHj$oVM#we223#TZfm$fXutrpiDUb9kzbKcnnpGOk2$qTsZ$m" +
		"ZffdxdVjTQCpj68mv$2R8DyifYVmTTkOtouaVVrVTluH47e##gsvCH2BsccQ99CMN#6sAnE" +
		"0Bojh8DqhyLkGwEoJEUlLMliHt8if#RSJdwm$k3xa90bTkSXHNReeDYROSOJdv$ae3hhNyk" +
		"OcW$xLluJhXxuedVVFaGCgaet0c4XpUWOOtlSYM8azyQQZ0$zBGWLBUDzp$XYWtJlXHulAb" +
		"Bt#66HlAbpCMQNciEI#LEF#L1H3Ih4x9qipNR#FIigtlyIzlL4kgbbGjQTDBocUZrOx0tf7" +
		"M3jZUYT96xw7RQ7k#TMfkBxLswAjcslf6FrUjE#OL2Usq6zcjiSPT4YuLavhnEJZdel0AuV" +
		"#efZMeQRLzYRJdIH8prcIGkFdNn9AVOupyB#0gIgEZS74IfIYKFFfaUVLKKeKrHfJCDU7fy" +
		"ewUb7IjEdhNWklQE2a#6VA$MghF9b5UQ#wbn2zNrsjJpYglzQxaqgzKBavYTHMXQF$vzVEo" +
		"blxFDV3B#gzCgP$BT1iAef2fxt2krb3aACueGT8rP1VeA5oSH7aLIcY7B1$W87xPZcjIsd5" +
		"DbdsZRvMQEO$XE3LfFwlEyyAx#FGzjyFVXfrtXnoom2Q9sImmkvFTncx9qbPP#tJ3rxj4tv" +
		"uQ$igP$CM#tkNza$V6FucK7oMaVyr3NnFnc8a4tzTwTKAwVlKXd2yulA$pQGTo#Hj6lQ#ie" +
		"HJolZ8HQOVyz7CC8Gd#byYTuNt9wIlfHmWZjfny7Bzooobc8i47$mikzmjENqe$Gk1yd7mS" +
		"ltGVHwd7NNhRzECwaGoHvdtE9NxEwGlfHqXnY59YRBjFK2eTXNEVy3wdOq3Wt4#afOrjxtC" +
		"xSXvlk2fIgZ#3ZPY1L4xwzKJxMtdjebtoI82SLlm9xrP4oeyIjsqKQibhRaca$2WXlJKFjU" +
		"RKIleHud8eD9Q7ne9lBCgCDP7a64leg1HB#H90q7eXpHg58sgnnfbbapJkQyzn1izpMlx$w" +
		"FbJdQtSCuAQtR7HceFoHCvsZEbFYuQVBzLZoElDSU3ezhPsXD#RnpIId1I#n0tlhKJE5Jpl" +
		"2ZO8Zc86GlhbF7Gvk2xdCGDnQTmFhW1IMLOYxXC2ATtDF8p9TmC7r#5HghV7dwsZet0cOaD" +
		"4ZW#UtoVaLm0PQyIQiN7UCVRpR8ZMkbBYft4lNEgSeD#OO5V3Z$pQ3SyRR$#fthhYbl2I9S" +
		"ZXpaHSglJnur#yL9gmVo9DkDgxi7ZRZoP#xsWAiUxUqIPY#rAk9vvNAz7klqvWXoafGXE#r" +
		"ADuoQCen6C6adp1iu8Jk2QOfjUZf2PAtBP4WZ#fvHvlkKTIkSDnZCTq4j8eHBBCFq$qO5iz" +
		"XT9SZzVWCUdKCI1PakV8ahOw2kVPuB9r4lmgb818l2t1qrEuF8k7B1cor54ZKJ$F4J$NLKV" +
		"XNDUptD1FyAkG6P6GekSAVX5AitQA2w57CHT7qT5z5DRkKHC9FlWbx2UCkP#PVBfG$CZQ2P" +
		"xGxnFsgLl4vVAxNVAhe4MHBuDAeZ4dlm$wSNW4#pYrT$kwQt9JwKWEfTQOY4OmzzMFZpcct" +
		"gBn7xWNNLzptjFYY7tDq#uQxsaJGLuP#MuPXSYP2EdNyj2r5EAnQr7cMfraA$oGZ9VveTwS" +
		"ZrjpORsJxJeFR1lJLY$Eruj2F2QF0NctIRvUlEMtKPoE0N6#dZn4txlWJXq3alNv8JacnFq" +
		"NmhqTvwDLZJjr34XAy4CSpvcg7IhFxS53FRmpAUJsKCU0H3aUqiQfToR98dGoB$gZSLhFvi" +
		"yyQQjqlTYC4UZaiodE03LElMTulSyePoB1OU7ymtkF47ZlAOVZ63e692tjbNJdrxtIUyQbR" +
		"nrVQIAah#QXrHJYCGDnhL68NnMWexiMPTQQ28YU9zzxdeTMUy#RYBU6Gi$nq7FaKEOv4o7l" +
		"MHvwbeUUXpCGbqCX$XPDEdfFeSnJ9X8SmXVZBCkkJfJA3HAXt31#JwevkmgEjD8yDyHjhfC" +
		"sanxEZShjZEDExiCKGsX7EWR4n3UaA6JykG$nN3e#bDlUVKY4T6BY#vKy9rJo1dLqRq3k3J" +
		"AaaU9J8VsN6u2SwpdVzHJYCNaCI4hmGp7qDtA#6od4O$8OaCztOuA4#pdV$HJYCNaCoEUxF" +
		"q720#njv3x0Gt3g693YKw6OXFiWuG4ScN3g693YKw6OXCSWuJuScN3g693YKo64xrP7uN1y" +
		"aOu1AJuLGlX1THGET3S$#gJuL0ZXUzLHED23$EYJudFzPoIy0zHHEEy0zruw1iJpv$FmV0h" +
		"nc3m6nBdsv#7zASHZyXWGv$g0XxN$BujZGEvYGTP4EFzDlA5xq2MX$pSS9jx4wrucgT2zp3" +
		"7zb#bCTp6xm99N5aKTx2Bctnrtw9egxK0A7V4FJty7ubwcZG1U1soE#ChdOhZFjLoI#ddeV" +
		"ZljG0gr5Ff$m#UGyNb0Kgh$ta6hdATzx7xao#Lrk1$fTH47v$A9E3ZNHzOAEiBdxyrnNmvA" +
		"MCjGuyj1NQgEe2vL0bm1VH5MfVi5v6Zlc7G$uoK#KdKXJbTDlWY8HNx40VUPTGGTGQye7gI" +
		"Jh5VSpqBydwguy15$XNFv5CP77C3ugKQVA1uX6$5FGsN#eUB2H$mJpkLJYFiLmG4Nq8UAHy" +
		"X67EUvzh$KQBL$TF#XwfB#XvpBfn3l9ueZLE#7oeUC2K6w$Odzps2$hCkHIHE2kQHuIPRYn" +
		"4aCSOuHSyd$ORGwnuUaeKvRdFsC2TSfzzRyf#OIGYV4qVaeFN6MwQmCyKWvtblgwBrbUzvR" +
		"28sXOq2Aq$bQIkEe8fM09z$UGFiYyemy#RFpv2$AatzCdlpZykIVd2V$XZpv3#J9VoXF$ZE" +
		"6QxWlggFtelEYzw88XOY$FTHxIOJWowD6$3qQtfiY15yUDHBV0tzTENKCo1zxltFEMzNHkz" +
		"LgvDqgGY6wcNFSB4BmvL6ZcpZ7JI84Nnu3KZC3eHyzllEXet3gg17VdtatY11yUGn8jG6Xs" +
		"Dps#DqFEWgdZW4fDBajWKPy2UyMSfWzjo0qXeu1#VFibiXwgdxXQqiHDCOoyJIjd5fFrQmF" +
		"fshMmr16IniJkJ8Woes9r2rILTgOKBj4hhb4nZOOqXAqfQ5DRuF1RcdrcxMLtkfmRsfFp#K" +
		"frvsdnTkmRsAxmcqV5#CHvIwFbEEjTfS8mcgqH6kN#ecsYrIzxMCYpoGQMkwgzz8HZwmZfB" +
		"CppJgBFYt9uxm5KaAmBoIP#VfzGh33L6aST$w#I#htCUwbWY3fqiIIfZwut20jhBDBjNRBE" +
		"f9n9CmWlU#Kn41d9FDo5lv5IvhdNCQrtQuLh4rQxXYPMrlccijk8N8DELicvjHBpAcVcDCm" +
		"CQTnOiusYJbD4tEQozPcizQXD8Eq4OOhAjciOrAF#Zz3J#qQz9JHEcOR3PCITRDlOiwyn9m" +
		"34dCM9kOiJimvFZ7djCIScn9pxbt$lavDspXzdJIZupPaGzAgBjhBAnsjgKPJskQls#Izqu" +
		"QZrNxQdBjSp3ddRCr6cLOrGrfyvZgF9irfvwd4dESJSrv9p7ajCUUDiEtmtkV$vtrVENNKY" +
		"7#FXOx2gMD0aPR7TElnjvBGKJXr34WlxhsjZiBXE8QE0V7$youAbLb4SJfgj238WR#0udJK" +
		"wEuW1$xT5AUZHWj5JcvBxY#aE1qrUZ38WVyWnUceqUqY9zUT#xTJd8uQtH7amB#3udGCIBQ" +
		"IGlhkFYaiVbIVIkskMVdkpFJh7ket2e$JmzeNrABdEEB7KoFNb31R$UkpD7FLRDN3p0$xSv" +
		"kkARaNyIjI9#Z$BtFf6kw5xaKiz7FES2#afqlS2$dJ9JBNlIWSSYyK8PINtxWtXUJJ9VANe" +
		"s#bMinc3ikn6go0rMIrM26hpUgmBLXTjYNRYjLZHQm#Qy0QOgGtPbkpRLWJrXHZlZahPYqm" +
		"nqfP6IjdBLahrfgrOTkojgmTQyywi8wi4#lCkh2kh1iqtuDjntgoNgmtwyFwidxejGesW6t" +
		"F1h91R30RmeQY5tTWmza8jYFRYOraezZER3JqDHPQ7u#Us0KeQx19R3Bm5KJmJUSjcBdPjA" +
		"GjMy9Rie0jP8lOWMmnMm6v1x63DxkMD6PBqPAW7LUngtaxhaDBwFjpbTUIMzYjA1bjINbgI" +
		"mYPQickR29xbxt7TcDJsEvi3xOdsuj$usppw0T2cTGFcsiRB12r8RSPjs66RCESpQWDT5re" +
		"KiWspU1jcBqPjI7Q3wraFxJTZDf0AqHuFbJjVcXhQ4DtzdIa3NQLdWzMfduGRR2gQ1jc6EV" +
		"qaiYSNi7RCAEAji7K3qkGEachUGNx6pkC7SwEgA9jCFV3ZCsg3OiI#y76MCfnn5Mz3OyRsx" +
		"0FRyDi8CsnkLM#3PCIso2mjluBsp0vOnkEJrodgG$EPnS0PJbmjc9JAnN$6nlS1#Li5cfwY" +
		"xqj#w1oyM#8JINCaoeLRL56jAqDQ1aaJGBEfS3PckDS4i4fzD#G$bLIYMsoChPfWQ5DTCv9" +
		"bgWTUqTRdskZZRG#BsE7iENysjOfbTocUHdRrCxGfjVOVfKygXPi0DfJs5rL56rZ8zg5bOp" +
		"s#0smZyA#LoPQEoFQ9PiLshiCQEaQJzKS2TqDQ4bovQ8zURD2stq3riNAHvjr99Z6RUMZ$I" +
		"8Zsikg1Dh2Z6XhLmaBzh#9rhHNfZEKghbNDetRojTjuune5rO9j5ajMFbcXTQqbedhbvM9T" +
		"bL6j8LLGhTPRKBLGBje0z1M$bhMEYFQawi4slXvVE4wZWHn7IiuZ$ybTXv$JHKzZpUrwJMa" +
		"Li$5QhIxyEFcWxRoTPjrfrOrhFA6wFRVxBlD26tbZuIir$PAZDVsRgzaj4jZQ5SQqTvkl1g" +
		"$a5#D9vohKwx67$wNNur$tDYc$sHuRcH9PFqExh5LRflYesgGiKsV6qVLf2hPfhZDVDZOfY" +
		"93cxgmDpErwQjARjCbiJPTPcpJWrN2LcMrhARTUMNYt3Q6qpBYN5ebj1e$vp6ZDMdrl#p7I" +
		"aORrwrv34p#YyT0rYiWVpNEh4z3s7ynpWSpudpcByRvPaQS$$YBSJuSmpdfB#tt1UmfZlD5" +
		"mzCYXS1f0sSEDNy0VJfOFsi00zMSYzHCE9VmcbjX3hPX9x0JjHt3aUmtNlEcUUB8GitKXa9" +
		"36$P16nh9DipbRIX4pJQlkR6X3TkYPifh5SgZ$uYsHjc6A3iz3sgRjp3OSr2DjEV8CaBAsH" +
		"pm2Cst0kes22rXPnj7I1SvGWf1mGXfm$VQhO2pJHwShS3HXZq6fEgQ5FM8dGdd4d1V39od0" +
		"6SXSAgUDk6yrCUvHiFfSPmFeSv7yk0ib2E6$db1eIBKtGL8i#1iWj5DECjzVNQ5l7P6d8ry" +
		"d7qrd0CpuspDqHLAFLBuQOIxPiBP2Xfj8$kz73XRGQEauxHhztt07#ttKr7twNbmAZqoYRG" +
		"SUQrG9WlE1JolDyehd9DuZwJXF2U4ayexx3RKV7OUd0jyf1TBfFVnM1QSBtFEtf3H5#Nwew" +
		"w7sB$OjqQSSoHEgZV0kP9z1forK6$jF3WV0pg5TBL4IiYouDmLSWbdQr#VHQXdSge#5uJqc" +
		"GCs1sLg074wJi9tZe$qJ8bqTSP#5$eyH#fpM$I5az3l#ndrAVhTpj3lNS1To9xpaTRqnsaM" +
		"VT9rTQ7FRu2Jda3kag1Fov$l1HhE8f30cSixtma7hL24DCVUm8nSah7V#tETziOAqHTpjZ$" +
		"cx44eqIZr#V0vA17WRCTnpW3EeZmu1w7S0cb3LSzdjvyM4FL62JK#pmQTape#e$Ee5Ufj0v" +
		"o5UN3sqjPvYw#YEOo2N4RxIVzRxeryXRCcUoBFFA8lh0SubwA40ztanrceuIIz5c4kv3BYV" +
		"1aZXDRtDfgThurQqt0MXlgzaCtCE3vluZi36fyrsQV0TIQV2zd7PmuuN$5nTW6PnsTWbzfg" +
		"E9UWvxFX7CHxct2UYj1gICjXZ5cPS4w2kmauh$Tnqhy1NyoZpmyqdEVmUVGAS2x9s##Zu8w" +
		"7$1FGrXnVDOk0BWjEAbaar$UNW7C1ObP2lz$juvoZuRoUNIRttwVamNavC5xAzzyMwba3f8" +
		"k0f30JpXoVTM9zB#0uBVPz0iu$$NwVhU5iZHrwDfpR#ZWNi2U1yq1sClgzLIQSppABp$UJV" +
		"PmrSVndwleUrkVNABlkE4cVD5gx83KBJkBTLkfp0STP06sQzMbUZsZtwm1ZVfoN0iEblCOr" +
		"GB06u#Lok2uPSIvbLyhnIVlvnXW5XDo4ivN4sGiozVMeKAv7#UPHJPJQ6JeT3PqkGlf7Y1K" +
		"YbcryBk9N8$S5pcs1ysGSJuQVDezgieyrdBUnJqBdiSauJmR6LhpVwGhSKhupiDY76VNv8M" +
		"PiRzJG5s7I9zdYrgdwRCSr4#YpdSJvGnwSxO3pOZdVbwAESwIV1MThTWc$3x8KE5lp$T9Id" +
		"fOsFgtG#5pApukNP5WtRvAsyqJsAjU62$#cZ7R90j$5SXujzN5UcNeVu69mHN5c6P#tSPqS" +
		"Zn8dIFqivUTsMN2AKI9m5ihnkIZXkcvWvsqDvpqWeSz1UQyp70yqf4#wsh08s0hvYfIjtsz" +
		"d9S1f0#U3VDqiHBrswfMe9qFp$NY#RYxnhwMadSSTp#wGuvDcq1tSlpuJJk9jBN7I#7m68H" +
		"lMF#s9v#D3#xfwz2eJZhDU7fpKfdeS9vKw7XgTn5zzaWMd#D4NAVeoUjCCNU30puGJgHmdp" +
		"$TnyXZ72JyL9$AFXmDEB$JBWbDozeRh2zVVBrkDSvFZLFOJkGMRBSuPMN2QVvNQxvi9JhXg" +
		"dDKugt5Muwp6MOsp6cSrpcgSrJYhSLRZhCRvFuQJBP6oRRWS77zcPkFZPESOSD9TWINoFZe" +
		"zCL2ewfTFPmcKHKXDUkOgU9vf7s1zXr22UoxhZEDBx0g1aXt5ZbRFjo76ds$ZE4nlClGbSW" +
		"vwGcfNDX6XdoBlLjs8sC7J6evZXz#PlmqMs7biNR2$8EvForueWADd06h3Nw$tmd8fYK#x8" +
		"KyV7pbjZ7VbH$Mq6#c0qVYGDGwa6X4FrpYIws0V$hJR38IMe1Vr9y0qtI9tEgyXFqgIG6zw" +
		"6yGbrj9qNCubTXVuQHH7TGpy1XqZVI2NS26xIBPMZ8z2euvl5EYH7sznEHyXNm914leUN2E" +
		"akrcy9fg3r5i3Oxsr4kWRXj2VeLi1TXulDp9SJg7dL$72wFMn6VvlmdosFpiW$mWYAm2Nyh" +
		"maSblIoATdO#1R70rPc08UwWPvHNm4NODO7zJejovX13t0opNa8oWBljVHlsdFSwwK#5Q29" +
		"d7PPn0#xfy1VESXHFZE0$L1k1#RuUDBrj$CpFZecQ4qVDS8V70hXHFwaqYxiJCalWS87vok" +
		"lqHyY6V49xMTjtz3gv$4H$tBZy37VQw$QdoR8pvMCunFx2G87qhx#EBp5$kBw8YdqcB#MbA" +
		"AH6UsdKXDjPsqxeXrAiLsTkVeDDl9tucehjZFzNTGsMqdYwB7dDVAyfBvrgr14htQbKdqKJ" +
		"r8tG8zwWps1l7zNtRqshWmhLe2EnzlITZfVcrEOjX7q$pS9Eo#vcVmDizUR#mi7NqspQF$#" +
		"LF8d6jkakPPmoZwJQlvBDZ5ckl9FOFK$5o18uPVh5WDuzW9GHxiNPAmUvvSlMathC#2l3ir" +
		"XTst9FvEJSR5Jdv9yBvGdgfsXQRTiDBdgQZ$TC94Es5Uwbn#53jqQayofXcSSpQRau29dpr" +
		"fxp3Lpm1IC0azmKPpJ6YLckS24qb96fyYrGfP1dhpR6TshyJ4TwPXFI4kx65UJ4fFMWtvTz" +
		"ayLMWgq1DXaXAwYpL2nyGjGmys2oCmhUzQAZtnyaiykG9cq9EFdvUiPUWxw6d3nfC$LhNnb" +
		"Agdo3bJQBo7pfbyszaV6gBz$q3TfiJcCbPCpzElEXZwjAKuPvBv4YkRb$dyJjzHnB3oECx$" +
		"#TdgGFZ1UVb9aVqlnneWPCS45aF3DrtsyAfrqoPxD4cR2Y7tGmYzw0vzao6i#ZhCWX1h8qV" +
		"8ZcN7UKbNbsWFf$xT4LaNuWXvE7Cl#tQf81aXZdy7GaYiV8IRWmwrydbqAEFLEemYrDONrf" +
		"NRPDrso#jTPBCJhbOKoReZSxdo46ANI5VaPYKXv5mpDoN2VEEG4E8u2#TZ0pUUnTxOut0JM" +
		"Enhgph2TUtbob#NrncXEbj9rY7rp5#9q54wP9DZCwKekmwvH0qXFvlRADQ6$qjd4lztSQsg" +
		"gKE$l4c7qjhynUFGx#NuEAmQlSndoIJJcg9wEHl2JQF3z5MlAlHoDS9At3aimTv6lmuLkel" +
		"eoRrDtjgdU$mQifHz2R$cehVwAdOrpxdEarVY$RUeqBhBQ8UQwRgQyPgWZxsc5$h9lO8uZx" +
		"yp4JjT#su3H$Su2JUvq3Kr7kBty5aVu0wknXgUDK3UI5b2HyRlWCQmvxtYntEPtvx4QzpGe" +
		"BZ6hRHgk3PAoEYQxCP29lfRkuwQTEqbT6SZWOVh32s88EDNITT3PniBcUhDlngPPxZQ$LSX" +
		"y$JxQ0QD2MJywlz6GARcT82C#sGZ6iPqjYIuNi$ll8MVYA1xPq9dtMB8ujVhDrjafkkw8Lk" +
		"iXyEz2LkCiBXQu8TrUyPMQSXMRHHauhfrSDP5pyBGTTq#M9j2Cy37LCx3jDADP2UPx1c$3n" +
		"93nYx7IfVScpTxsa$rPbXRsP3HQaB8#9MuJOBCt9lO9Mn0R$AqTPq1GNjfpq78xepqfbezG" +
		"yWyiIlQB7KMGhRECy17T6TudCMVgLCwW#NGnbdCSYGXEsqzUlCMTcjq1cYQIhOQBsYQog2p" +
		"s7DW6SSPpNY$DwDM8#CusnHMWp#59AvZyZkDNdJ5lCQ8BFuKvGFhjdDah#SVPvwNYeoUebm" +
		"IwSt8$bzAsSXxsdp8U7uricfarSYgaLKZM$zpz2MQP4AcFtsJlAAVvfSvA$#Alkx8r3y3fB" +
		"nQLGUP5$c5TuxwVocyo7c0QG#qQSPPEZAUbx2d$V#9J3utdqj6vZ#lMOd88dfHvm6J8sV2T" +
		"7KqZ4piNGtdJYPavZsjvwNjQUEz6KRBdlVpmiYUrtNbysnCdUNuysqr0sIHiw662SYurU3N" +
		"NSxIaSadvSWQTVjVHIRMW6fa$pl88AUcPiyCo0psh1AG#LANwFRCYrwnsA1T4BjYOo7ZyIg" +
		"0pFztwH9fQLMjqZUEirCHekThfU$nvslvLVTpDuwbpO9CQis8JDFNkSawG$YA3TbhA6Ic$g" +
		"pitRPujjoCZDsRrfi#LqXtcwetrGpG4Vd$06g3FMrRKs$wrzVKEEilhSR0ZRrpbA5oo6u5s" +
		"VA#R5nd2X52GdP$YMoWH5QUz$fPZ$nhW8uiOGHLiREwQcIR8x9rtsl8j9PUwBTHzxJY7oaQ" +
		"Ch#MXi4nZanWqf69#vlysAqQMJMoQcHL5zc6shDDWMpZMDfgPDN8$dyZ2$$2vqwHFECPIeH" +
		"darv1haPMZQmQMJMoQcIR6bduJbGIClqvVMz3tZooDlcDUxpqEhmPaAU9rL6#SS$dL6$SKx" +
		"KEtD1QFIzxhNvyeAhVItdFO7BzR6fr$UjJ$r$JwzMrLjTQNMjrhTMrLjTQNMjrhLM$LlzVn" +
		"xrnFa6rodyT###qMPzt3rcHTw3m#xIPt$aY$WKNbI7#xT7PRvduNsylDdqTS2tqnFjsrLCD" +
		"TFTtCcIiO7$ZSRf$F9LDKsttGcygn7cE#Uqvz8QqM1y4xn6JPomthalFYrehUxnLrxe9QzL" +
		"7qi3g6gjhp6gLGoK7IZ#JLVRy$yj5wZU$lKVLET3q$WdVuj9RKzAVCfBlOZQzVyBpvDlkCt" +
		"nx8T2YUaD6cXQ5nSsdnV2gakLzgvbRr3bS0r9IwioYHQnCq$Kw#SfKNUTVNcVujp7hz7CYU" +
		"v$rhrFEYfHnMrtdvbPdR6SSgNDTh9fwYxmsXmmjoFoFzeWqRRUkdm7alti#KjDDkv34oP6s" +
		"OWvbnUU$PwcTgJzyYTEpjpYGgE4D$hiJbXZMSknVCkit1jXQVKIn6xGtL#RNCjDwhPtnJ4n" +
		"OGhcJsRIZEDOF6pIAezBMHIFoRLVhh17Ynh5Eg3LvD99Ffmerwio7MZj7NVT#fBqKz$VBWj" +
		"elbT9#MMUMVu6gkJtJjC$BttwFplB5s5iehnqiYVopZfwcfJ4bTelz$RTyqVtCpl9$VUBD#" +
		"Vj1Wv4lTV7pUzENjWFaQt6yqKTyGxRnjk5zZrxJKOnCai7RdlyjNll5ttAloSauYm8KwUtZ" +
		"c4Jx#gTUmHd9$#saZxFOyzWPnfdGrCYaz$9wykrqa7HTfh4wKhTGKa9W#Hj7xfkhCnJZcFF" +
		"eErlYpNBgVVF2WXlVB2VhqjvL9oJ8T2LnSaIYM2UDtyNB9j4BhfteUZ1$QK$K#NEApHBpDU" +
		"NxE$uO4UV8nyX$hAoCjVGCdDsDL7USwMjJPjsfvoPC$I#idXzBwlzrE6TDVjCBpbcZNnfIv" +
		"woCVmr8VDlaZwnN5epMFFmr9D4RNV9Qyq7fSrRVLx19#NPlUNSBUUUiv4knITMIgYLLIzfa" +
		"alBOQ7z7eDx9PRJHi64ZoKPxygaWRL#VihxnV7dbCk4RHzJEth2LVIFd3t7Bd$KvkCWAeQU" +
		"pFgYf7zOxiPudhH3hK5DOukPV4vUQy1nZP3UKTnsLfMWTJHvzugjw2oNl4em#iOxILnwxgJ" +
		"jwCZVlDVkWHku7NotLzpgHxmoo6$cp#M8zx9Qo7WxCqcA#rudVHOpL7xesah7#g2HZtsMm2" +
		"$pUxSXyFHUSQQQrmzEkycHlH$vzes#Li6yCR5BKUl1sX7R8CZTrpqqIa#mH3mc9uRCLqmuv" +
		"cmNEt5R9RsYhz4U6ltAMr5R3j#qCEr3iKsbcfdBn$esC0dgBRMGaXFQfdjY1TibxBZSe8yv" +
		"UwHQ4or1tTXZNdzXxTydRya7vMwvZp2PHS7dnztglaqIbTwvBCOBYrgTrh8usa4Xrf8njOD" +
		"IUwqqQGUfPNvwVVewKVdsWjPWd$BcD58l4pqYpZOHr7jtvjBoEFJ99p85yPxsyn2JWwEAFo" +
		"9K9OssIhacbSr$6QZzKn2KsrCv2kyHiYVpFcVosmJ5Uy9Naq3rmdX9zldkIhuNtaxwH995E" +
		"KbVmG$8OlvUx4UoEfcsjhO7LGVtyIgN$b5FmZgykR6QMCtobSnyxdobq1T1JrpnRiXl4bx3" +
		"zrj7wbldvTpOvsDNmexXs4tbZ#BfAzUIknjV45LmJqNS7Q58nwymQADUmXkxsY2l093Lo$s" +
		"kTiGgzXk$sGAhGHF1$0fAQPxHeTKwES0bfn1MwXnVIXxWgheztiSkazQ9RwjSc1yLQ51zTI" +
		"Tzsfl7RBHMHzXNOgeg8Xxgbxb$yCchzvUCkmTefz0btUbR7HxEdtWlJ9TnMM1lpoExiMu$8" +
		"ip7XjYhCx7rVOeBrv###qZKknjolCZQR95h1jptMQS#GFfiCN5tIpdby35sqzd6hd3oYmXA" +
		"YkuCi4cIBbGJpDynRnjkIZYJS5lvrldLiYuof$s$Fv4UEHFPGmpGvu8kCKpb7P$8PKPuuJW" +
		"VoSB1obSTcZ42YTcV7g76wZizJCOualsradDl1o5ctaPPtnvGsPy8Ii#x1AbkYFbQoxke4B" +
		"#sjU6YblnRNuF5Qx0pJc9GpYKQ8Wnsmqd79kZrro2sid07iYUHlRHhEtNLzjCm##sJgx#ix" +
		"#y8OgYMihuGigtpLBfFD$cyiBdzMDeBT3conRiqZppt8imXLhZ4uJZBq7NrzlfNQyqYxtLk" +
		"pvbUAC5Al3JXugBCcHJqVSp#FqVv2lvD9pnGMwUTOd8DRSusZ7FO#$Cy8IWs#r3wRNs4lqb" +
		"Buin186HXkaHVzXqNq6tdYMfic1olMT5sE$YN4PCc6Pv5xXBxKNiZ$kp5ToP5dAGdVmXCrG" +
		"4AeXW09brCKl5qmg250cbu3br15QWYDt8YsZTydLRpYkRKGHhs$q8#6SIbZiJqwnhxnoJX$" +
		"rkpAvz9aCPTyEJGkJue#KyXsvNcJ8tNge$nADMkYSodKbbt5MQQSIw5d2iEs2Po9koJaYzs" +
		"hH1MfWrgGxpc7G3F7LEUlQtweduv9ESjmOD7JpqCoSAIlBjfeYEqYDmagVQtAYp2$lA0DyR" +
		"cTGNu2cdop9#6CtlWaiO$6zDoBmUf4omMpFfBgMmzZcU19PgFLGMfuJo1IbJucH#ueaqqmb" +
		"iZSXbHzcEroUXjCTYkeF#6vwzHMf$HckhOQyxHu2ykJsXMv2jahoYDNWicHSecz4EX2hWyY" +
		"LMjxbfRx#xh6eLhzacYFiQJUIbuYlGLv#Zsfz$AtOCDAPiPXrDdwjq0hdzBh4Gr7IffnUEk" +
		"njcihr#J8ymkfPV$dSZ9PwyWeodH59PjrJEfHBIszfqmzlqwZuVzHpdhqTLhQnkdhf1aTjo" +
		"4RabQDzlydMY$qsvXeGtB#zssKsXinhjiCvpB9796MhyVvJAXy$4gbuNn6$QTEbbc$ErwR3" +
		"OTiPVHUL#ALKixTs8liz8Fq#0ySUh$ngwDwM9iHiIkbF2vImzUKw8heILfOdNaPhfHw#hd0" +
		"bLmBrClNXaPm4Kzlw8L#x7vMnF$hqv0$NQ8zNID3ueuWFTL1Rog8fFEG$zIDUBh4btm3Oxb" +
		"fHp3wTTgPCQiJO$r$OCmfPApYNSQwRWN$LCPiv1KymDZICKWxWB7TLoB#30fDPspF7PdupK" +
		"B#5EGz0lSROpN$mrWjp8obS#5V0Fz0nlRe0Vzcn7#2Vo$YyndRPIZ2a5Ku6lxVaNObOrCkW" +
		"aFPAMz2$j6GLv#nNRU7EmJrF8aoXo5yEyhS1Sor4FutOqrsGNW5yfzbhEGZuFiA#IyYxHzm" +
		"Q4FDaV2$OsmRu2i0durwcxHaR3zWg0tiDI6$zls87mLtDcFpEo0V#fdO7WxvDd3jyY32bm4" +
		"doO5pzaKSUfhK66uyseMysZyZV3BSKy1o1cFrZc6i3lHM1#4wjp9s4EGwVp2sucBu1q7$FU" +
		"7w8Ht#YciGFXVrk8nDjf4s2BXQ8Jo0iNqkH$XmX9U1hmjZnTtXZcEi#GUCTVcMiKN0VD08n" +
		"fgU2HzOcdwEDE1P0RbDJaUvsy3$3jBM8luOT81o1SMCRV4Gyb2#wTO8lyfONRIb2VgqRZku" +
		"$U5EW8DU3aA$Dzq3$jMGsP#n5fqPsmqyMsx9M2d6msup6PjQbx5zLuFl3kW1Osc$wnZR7pZ" +
		"sUnioqVRTBcMi6VhY8EXdIyXUCHoywA$TWAiszBGVSDIy5ddeszqn7XoapyNOs6exwAK2$i" +
		"5m9y5z3BqU2uTsrSDOAwe11nqLeTr5Py41Oz7NSB2rzOV0JO93NzP7dpN0Yj00Ucg0jZHnK" +
		"1vZ$I1Wgu$#QO1nr$LvfCFwrfh8M9yd69jMcx4TeFTzaTvm3cCBCBPwB69iuQSeX$pznp7M" +
		"Q232Bp4sumh4CLOMMenrnzmOYVdGV0d62lgp#76aju0yj74X#FV4VDh$LyOEQ8ho$uKFdHu" +
		"m5GxJyO0ru046vpMCcIqOQumnk10occ0Urfc1EEGsnhmuw1l4COyQOqvjKOGweUy3xa4VRm" +
		"F#8ncRXpwQ1#mBWSj2sHQKZhvl1drjWNdP#2tmOXnjyHdIzaPVOFpLXPwR5w0ku6sCVg#BU" +
		"TG4EjqQLdnhjBNfYT05i6oDUZe1TpUCvreFepp6IN$efYRweHlwg1dc#m7GTpF8MT0CkiHS" +
		"st8mPD$7sC7G#Vx0jp$w#k06o0VEHRSWt0QoeBjjq5zRdeVmF8GnbZgz3mmON$F6miVudhS" +
		"F$EzHRXZSP8GnDWTiYp36L3FqLnVOaKuObmEWgsQOXyrBuRf1FylXOrmslmHzM0Vyq7KnT5" +
		"CCNHSq0Hxek#1Gj17ZOb$Wce7vq0NjBtu3SM1h#YNi8UPUSyofhZiX33jI39rKO8mMmnPCn" +
		"xYRWJxPfJLZCr6#qocmPx1XNQ6ZWxkYJR231rC$d0Piq5TNwB8fsIZ8R5QESR0GxKKR6W5p" +
		"hTUH1tqLTWGlwcznFiBeysdGsSm#m82nkZrqsWmsP3hgdxaNmfXBCs6$jb#5V8orujxGA$f" +
		"svbMC7GYTpyGOFX2sT2PqTo3iwu7GtO4OqxCmvm$479w2iNOWz3vbD$ZetswFebwg6$qu2#" +
		"Ep2#RnBEYg4y87eivzeVy3ePyUQ4SFsC7jWBK7vceBZ8lj$WQ7jlKimNp5FE#9jcq5cxSLq" +
		"ahGnprXXqkWtwRlGIRcSaVCu#cOimviPGdMdLx0ENqKOpl1jky3NJR7M2XfX7JqQI$OXv7G" +
		"GKVeqvu0XtXlZEaQ67kzCNPwexszVy6OGn$r0KyDs9q#aDqNOxil#gGlR5y$w3o7SO1Yh0R" +
		"6KmsCqmBqSG7qu40VzT279R019MXloLBWXCsU1TqFnBZfZZOFmXpkX$5py7x8nxphzmhAmJ" +
		"ONmuuM0#lsQ6zpp85fpy4kGYVDiMuLOwvFHJyLOxnsXwvBC1TAO7kcmeuNGzVRmoQKO0mDn" +
		"1Xk0Gm3qJybQCi#VL4tx4iBr3KGuxS5rg61i14broCFytOMz5q2VPNCHZhwjWGsOH3MirBC" +
		"WK6OYwLeto3CzT8x6HkCTfL1$c1WAqFPmR3$PS0m17ZACU#7mBQKxmuVwqJvZV2nZhV4MZG" +
		"KQr5Bw7OezDSIUXWAszmITc0OvbqhzC4msBbMA3CC$TeAVRa3wcwDljm1ThOrvjWEQ5ThhF" +
		"ix$CXO6wp5ZM4Jcc0TB$aNnZNPVypFsj1zxGzXqp0sEsACDOKUww2#ad$2XxrT1fqtnHvY6" +
		"Vgr6MGkmvfVZFcw3UneSxIp26EZ1Fsy1SgM07S9wYj1kLw85sFzAy5Qr07bziMOxzOMzGDR" +
		"Bwn5nIyZ3Mj97zZ6OlJZWdCGn$WVZhLZDkPD4VHPMXDfM7SQGszDC6xxemzBQVs4FTe2#8P" +
		"ZJfTWpWx7U6w3SJK2QsCRxAL6O7wMe7qZ8Bi4SsHRp8LYp9TIZ8KTOLEBeAyTCIPAi4$P4N" +
		"ejGHtROinsWCqhHL#LeXztn9vYNuovdJ3VPcCiROirP2UiLss1RoUCvRR0MmB#aR0pRS4t6" +
		"xQzASPoNVHPFRIt8tHS2XtKnTvY7upPkYW$6#LBos2JTa1xO5lgeqnz#ANORpH37pJ3$1c9" +
		"yRmFqcPZtZQ5xUoFyLeCLugnjYNiJt$Wxu$zqt2iTQMOA#s0TG1inm3ibPf2dqrW2m$0sZ7" +
		"yT#H3voEmh#Y4yfqnXnh3VbHWxrQCjQsKx3twQphMlzcO9xEXtwqmHXh05cw5VKyBZ8TYwB" +
		"WKVRyLSBL0lvSk03wil$jWtem2db4eEmhpOHJ6GZsi4$NGVqMaNzHRYhcuC$I#3yR6R60fm" +
		"lmfnVgpDVflQwpbfTWxRGrPSz37zM5Zji5QC1s6OGxAJ4FPfh2XSx2Epa1$pBaGMD2kPjYp" +
		"pS7SEGHhGNDWQWWRrXdZgJDimN3CcrBOuCweQmxwV13qCm9r78BnMug#6e4#ReRnKennTU2" +
		"VI4E$T86jsmwOIo6$5ElAdkZpqkCPMmpRrnFpTI$CZrBidHR3flT4FVjX7Eo5#L4AEOknfl" +
		"H4sqknzrgCETqJCkTZdrEClcw4SJSFMEQXpSMO8uqnRkT1bqrX2#StX1t2cb2ASJSVsBe0p" +
		"sZCaMReZp5Ohmx1FBE1QmpqtW9pl1Jpf1HjEmJw7mFxdaERIx7Mbi9#789vD8PE9QXleCj3" +
		"qCunM8$6lC3OMDZ4Gx0N7OinRvDkq0#bi8k7eDwnMDTpr6ROhLBOk4C#GHhwh01xbJAimwL" +
		"V80tZTops1uT09sNeex6mzyMmUSsmFiw7pUk2ybsnDky0cJkZhTsmlyDmPdEnFhQ0tiempb" +
		"j0PsNexpqnZdV6FgKCwsDps8lbM8jQO5#v9$PFUq9kSzYkkT152vnhb65DtXDpPNkCW#Nex" +
		"nPeqrwm6tl1dkw5yTy2wt4PrfmoZC#zi4xkZV6s7tIsDyRktjZFTeDkcyEUZY9S65SjOFjg" +
		"8ByCkCk0RJdcyyxKJip1MfYles7RTuRiCfoRZ2QSs4ks09uopAaopD$biASxtmG7VU#CzMW" +
		"vqdV67dSqzWkZ8RShy3YmJpLs1J$Mh3BCoUMOvwDfpu5rf0osiWnubaDVez6MCjZVgTYxZS" +
		"OSNuuvMuQzmnYCYT7eWp4Oi$EXWxqnRkR3Ti$7F2k3$37el$deg#uO8sKOqsKOVtjZVkoFE" +
		"LqVjg0vy8$1k9#1STeCSxGCwq9ppAMcgAy#nc8VuEkBTit0MAa0lWhOfmgiyGCm7iV2Feo5" +
		"pEuOAsNGRnd6yrJqVplOs3BCgmxKRx19Op5$sc6STgHz0$PiVR6kDOBjwm8zTADsm8QKmU#" +
		"7iT82#ke8kpG5EYv3FpH4syTXxM#F$Xo7ULQ6UTC0ut8SxD5SZDq6i0VDOOiRFCtOUAp1xJ" +
		"7dncESb27U47lbyTXhjqVzup77og2BXi0v0VtT0MDW0kRnNCXiX7Lq0jQT3h3pBR3kbi767" +
		"mhPPQH3r7Ce#cq4shK0#CemRdjXZXsA$UDs6D#7eamPvaqPpKFCZuxedqDX0ykWeyLO5yem" +
		"7fPW3fTXdUa7ESrn3jmLTh8$pdsMm4Qrm1wi37BwOI#$13Qu7BQZ5p1sX2rP0ZdDCRUMmCw" +
		"qmDfKZdtnDCoD9QYl6V0kWQrQWhbPZhdG77kE9U2PXZvPYdbOZ3r02$HREUP42NIw57ufnj" +
		"uYZAqIp8zoh1lb6EFDi2TO15ky2Fsy53AweayQDaV$GfSba3KTzdukzlIBq7UTCCwcORwsn" +
		"FxiKCoz4gmpvUYNSjYBfT3reR0ZBR4k78gvTIZqLOunKevzmm2qhmHxenQOcnMOI#LmXy86" +
		"bsCzN87rkXnZONlChGE0RGNwjWJZjXFwTHZg7u3#wmQRKuwnLmwzb#y9XpryEUnyESPkEUO" +
		"DepZiIWdcnGBePX3QEmZpRJ3cs62Cuy70NOxvMqpd0PXNvPYhvPXRGs0pop5Ukj4#2lQn77" +
		"DZ2CgNen#6eatb6CT3gMwiYKDXpyeXg$nSSVrb$el2twQry9qvv8jmZOjbtiKgJSGBRWZ7S" +
		"n$fSLbsYFJNo385qfyRy3HiAlrZWhIQNqc$lV3PSE7NGb$NUbRAnDmfrEGKdX2jFul3dgzc" +
		"FAt3VE7RPybwCGvgDnFX0POiTsgu3Bis8lSZuFyqd3Rqn72ypYefSuni0#PodOD5kDkt0L$" +
		"7ouDmzwE2SEumAGVpjkCo4HvqeKo3NPpI8D8kgRiSvchn7#6yWkU3SCqsuRn1Nmg$BiRwT2" +
		"T8Rt03qfxMUINVVwDfSPxPVmJXBKUPUROy9v#SzNNOoyqM$k2UiYtrfR#ty3ljAFs$1sKQa" +
		"ZjMXBiz5wGFFahu$QJk6s5lsGZdaUnm4QyjwsZuX$0xTCoFhmdsLusE3U9DBvEolnF#q3VZ" +
		"PQP$5OwFU3m8MqEbNEmR6tSDynLS6uIt#3q8DtvUvmkNsNg05fRpSvjJPJkFaUboJDRRKkm" +
		"vjyOQFnZxhAq$4Ub3cgVhO9iLqdz7OjynpaFNXvgy8i9DlnP#Yp5nlXPNQE6VmddD9Wg$#O" +
		"Hm#dwJm$46iZzdOq$OzD#oh1mdT2rdgjJ3XCk5lwYJy0VEa#tTL$YzZWjazdfJ#1smBh9RW" +
		"$Jc1mY$TriDD$RZqmjb#Y4ohHJZxWKHxedrlqKFcIvjsC2RX3zKsl6XaJ4oh9lqUqbVsfG1" +
		"gpIUewMlZVaEf#joaXpqr5$wM6ktkbDhtm8fysNXRzS7cAyCydVOHgQ$GzSSijIriHpgUo#" +
		"UjaEny0US7wGDkTDSlhUqipsmRnZmIP2#VLVfBzVI96yVkRxqaVtMvm7Xbq0lsn#XmiBlkw" +
		"MCOxyoi64WAxoMmlzM#9qgfF#Uy3jtbBwSNvsV5twNviAVCLxu1syl$T7ItrFwSXmVV93qv" +
		"VWu#7Jfox5syBNIlqlwZmkVoVMknDU3xg0tx8jAHeNJXZhI7oVy4Qy9l$b7KjPbPbabFmJX" +
		"OgdZObb$wV0Wh$I2SBc3fIqf$Iv8isHx#quDy$QzMVZBogM$W$3xoRr2lma1Ryazmf#3FMC" +
		"9zeXpvJpVTqkj$JS4uMKJf3zLIvDZPDaXMjfn4kDRMbslGfORnEr#mc$YsnGHRuhpWf87HR" +
		"XOsgvbSczYNoJyMZZdAdbOgq#kHzkKQVLX7reVvwWbsESsmHwqvCXmFGDnBZD8Zg5w6Bibt" +
		"uJpRUpVdMaYt42ETJedBla#u2cjBUiFxJ$J77Zl5RxpgCIvHiDyj$1phOAq7IJ67N0YtwAt" +
		"vFk6iNcoxXOd2N$78k4td16KBJvUatDR4DwnD0Yt#53utOususrmY$2xNoVbotcyunu1JvC" +
		"pPPesBdQyMlZpvaWigytoYxj877M2j1ASApIYQ#B3f2mwDpr1X4lf#izU8ZoohKoZQxpJPL" +
		"h$iFoHIyFn7N#LPKR3oNLh1srUbierP$X06PzCrwfasibIvafJMyBrx7TME5wAywxYTl1t2" +
		"T8EqCvjHZuQuSVvuJv3gVv8UrwFrrMAiLuSEIVgy6qutdInnhzQ#Yy9VzHMCWwTbwx1#VMu" +
		"W7Und0EbTBrJdWkDAW$Btgccv5qeUN6UNoht4cNILWv$M#QzZxHQ8ZoYZUGfnjxZOPcsMCg" +
		"IwynYQSSFV2rSvs8vvmSs3T8E$JFCito9bA$Pix8EOPxSSNeyd3VmTYsisQxItoG6QMjRR2" +
		"rbotFC5lF2Siha#2dzNSQdolAopOjVrZ2V6uHRoBLh#Hh9zv769#VbOcrDM2xjvd9jRxJyB" +
		"LcdF9SO9Ur9cToR3TfQmzbPrXlRuo1FsfuMSsMydvOdnqL9VIrDzb#vNBVBRX1#CxbUg3rN" +
		"cLo$UyXrgaJk0NUI#zSIYREtj6$DxWtgQ2hNcMOxIraBWhpcBSBuIne8lrYE9xe6kAAl27U" +
		"G68jVbtdQkSvEfqbvh#hoPDkatIjJ#zyLIhR6ytaGBfDxuvPoxLim92epBB#vNFVAlgFhKC" +
		"byvJLXAzuBuXtbE9jr8$PPLufmfskaB$T1dUGOxgIT#zBFSYqSu6pbsA$COh$1$OwmSayW$" +
		"WJyF#3$0Vyy#ESnHtCsTsSY$Kp4psIru79mDMIyWBsFlFV1inhLhaPuDTA5izbA#2l1iz8F" +
		"vwHFhePCLtaskuUx75m1#oTa$HFfJuBlH8HFHFX4r2$y7FVfgPIdKEOfX9z6sjCezpJYJ$E" +
		"uxch8TDlFVmR#C#3$6hA$HlnPk6#uizXpaFKeyX#L$XsevmxaFS#TpIu5pwNS9rU3hG7V6g" +
		"IjGVuQ7dVO1yXx4VwBYB#8yXzpLmFEaSwMJiG$GVWJyFmBcFu5lc#vAs3$PZMv#mxnxz3#S" +
		"r7FkKW$5tMUYxHpKVPqX4z7#ka8$mavtyF$7h9#uCwHpfREOVz1EU4SzYFy$q8UkNiH$uax" +
		"Yxs4z9SHVXdX#$W$o2mucxzxwIJ4Jq8uy7FIj$c$4btfi1B1sUmLX5z1kPlW$yoTmvR1NuQ" +
		"yPP2n37KBtv5EnMjeVBPCpydqGibRIokteKxLG$9hQaxFSzZ1m1HsZdGsN4w6QqIS8$DipR" +
		"SZSU8fO2z0vWk8tmAVtAq8w#v3fDt07NqpseQh2UUm#v5sF$nhaIPS3NOd$3iX$sRatOpmp" +
		"KYx7FxbI3iKlEJekzaUqXv3#37mFGOU2d$ANGts6j9UG$XAy5m9NlAFHTgnI1E#BHt5QqdV" +
		"PaSXBt2E5gQydEPicL#3lg7DtT$1ztVudt5dmTNWuLyG$WN#xV1lHxdNuR#E#0EGyp3yXp7" +
		"cFkVEXdCqFmTN85qjTWruha7PQv1t0TpvY9#FEBatk7FOTV2lWtyLP3o8$0VXFuAqHv3s4E" +
		"HzXV1N2By9cMy2tvj88$T$hTov3W5H583XS#SEhskN4Ck8GYIM2AQnH5GgZO87y12sWeh7y" +
		"C#PAw4HXUBFT#uslSQD$Hjt#vgL4UiHDh31UO01RmAT4sIbnbuDgxofCiT5iq#lVUlMoRSv" +
		"uVJUpdpPyNx7dIFpWVd0lCOrJZ1gojaKxvh80n#SRpMHFUiztwrZdRqbBl649xne7XavCnS" +
		"mzwMcvlrKYxjH6StA4F$PIlESSKNDIXQpdCKPRQnPgM05KvZ2w5$uywelRUOsSmzxsCKk3l" +
		"ZEGFqipJw$YiZ8rJLdFSSPpZ3443UumGKki8CTBBdASSOy0MOx38y=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	public ErrorReporting errorReporting;
	public ArrayList<IndentHint> indentHints = new ArrayList<IndentHint>();


	private void addHint(IndentHint.Type type, int indentPos, int dedentPos)
	{
    	IndentHint hint1 = new IndentHint( type, true, indentPos );
    	IndentHint hint2 = new IndentHint( type, false, dedentPos );

    	hint1.counterpart = hint2;
    	hint2.counterpart = hint1;
    	indentHints.add(hint1);
    	indentHints.add(hint2);
    }

	private final Action[] actions;

	public OcamlFormatterParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = implementation
			RETURN2,	// [1] $goal = $interfaces interfaces; returns 'interfaces' although none is marked
			RETURN2,	// [2] $goal = $toplevel_phrase toplevel_phrase; returns 'toplevel_phrase' although none is marked
			RETURN2,	// [3] $goal = $use_file use_file; returns 'use_file' although none is marked
			new Action() {	// [4] implementation = structure.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [5] interfaces = signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [6] toplevel_phrase = top_structure.t SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					 return new Pos(t, s);
				}
			},
			new Action() {	// [7] toplevel_phrase = seq_expr.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [8] toplevel_phrase = toplevel_directive.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [9] top_structure = structure_item.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return i;
				}
			},
			new Action() {	// [10] top_structure = structure_item.a top_structure.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [11] use_file = use_file_tail.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [12] use_file = seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [13] use_file_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [14] use_file_tail = SEMISEMI.s seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [15] use_file_tail = SEMISEMI.s structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [16] use_file_tail = SEMISEMI.s toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [17] use_file_tail = structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [18] use_file_tail = toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [19] module_expr = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [20] module_expr = STRUCT.s structure.b END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.STRUCT, s.getEnd(), e.getStart());
    	return new Pos(s, e);
				}
			},
			new Action() {	// [21] module_expr = FUNCTOR.a LPAREN UIDENT.i COLON module_type RPAREN MINUSGREATER.c module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 7];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [22] module_expr = module_expr.a LPAREN module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [23] module_expr = LPAREN.a module_expr COLON module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [24] module_expr = LPAREN.a module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [25] module_expr = LPAREN.a VAL expr COLON package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [26] structure = structure_tail.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [27] structure = seq_expr.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [28] structure_tail = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [29] structure_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [30] structure_tail = SEMISEMI.a seq_expr.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [31] structure_tail = SEMISEMI.a structure_item.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [32] structure_tail = structure_item.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [33] structure_item = LET.a rec_flag let_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [34] structure_item = EXTERNAL.a val_ident COLON core_type EQUAL.c primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [35] structure_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [36] structure_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [37] structure_item = EXCEPTION.a UIDENT.id EQUAL.e constr_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [38] structure_item = MODULE.a UIDENT.id module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [39] structure_item = MODULE.a REC module_rec_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [40] structure_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [41] structure_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [42] structure_item = CLASS.a class_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [43] structure_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [44] structure_item = INCLUDE.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [45] module_binding = EQUAL.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [46] module_binding = COLON.a module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [47] module_binding = LPAREN.a UIDENT COLON module_type RPAREN.c module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
   		addHint(IndentHint.Type.MODULECONSTRAINT, a.getStart(), c.getEnd());
   		return new Pos(a, b);
				}
			},
			new Action() {	// [48] module_rec_bindings = module_rec_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [49] module_rec_bindings = module_rec_bindings.a AND module_rec_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [50] module_rec_binding = UIDENT.a COLON module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [51] module_type = mty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [52] module_type = SIG.a signature.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.SIG, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [53] module_type = FUNCTOR.a LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [54] module_type = module_type.a WITH.c with_constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [55] module_type = MODULE.a TYPE OF module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [56] module_type = LPAREN.a module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [57] signature = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [58] signature = signature.a signature_item.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [59] signature = signature.a signature_item.b SEMISEMI.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, c);
    	else
    		return new Pos(b, c);
				}
			},
			new Action() {	// [60] signature_item = VAL.a val_ident COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [61] signature_item = EXTERNAL.a val_ident COLON core_type EQUAL.e primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [62] signature_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [63] signature_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [64] signature_item = MODULE.a UIDENT module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [65] signature_item = MODULE.a REC module_rec_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [66] signature_item = MODULE.a TYPE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [67] signature_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [68] signature_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [69] signature_item = INCLUDE.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [70] signature_item = CLASS.a class_descriptions.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [71] signature_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [72] module_declaration = COLON.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [73] module_declaration = LPAREN.a UIDENT COLON module_type RPAREN module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [74] module_rec_declarations = module_rec_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [75] module_rec_declarations = module_rec_declarations.a AND.n module_rec_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [76] module_rec_declaration = UIDENT.a COLON module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [77] class_declarations = class_declarations.a AND class_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [78] class_declarations = class_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [79] class_declaration = virtual_flag.a class_type_parameters.c LIDENT class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [80] class_fun_binding = EQUAL.a class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [81] class_fun_binding = COLON.a class_type EQUAL.e class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [82] class_fun_binding = labeled_simple_pattern.a class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [83] class_type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [84] class_type_parameters = LBRACKET.a type_parameter_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [85] class_fun_def = labeled_simple_pattern.a MINUSGREATER class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [86] class_fun_def = labeled_simple_pattern.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [87] class_expr = class_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [88] class_expr = FUN.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [89] class_expr = class_simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [90] class_expr = LET.a rec_flag let_bindings IN class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [91] class_simple_expr = LBRACKET.a core_type_comma_list RBRACKET class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [92] class_simple_expr = class_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [93] class_simple_expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
		return new Pos(a, b);
				}
			},
			new Action() {	// [94] class_simple_expr = LPAREN.a class_expr COLON class_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [95] class_simple_expr = LPAREN.a class_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [96] class_structure = class_self_pattern.a class_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [97] class_self_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [98] class_self_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [99] class_self_pattern = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [100] class_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [101] class_fields = class_fields.a INHERIT.c override_flag class_expr.d parent_binder.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, d);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c, d);
				}
			},
			new Action() {	// [102] class_fields = class_fields.a VAL.c virtual_value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [103] class_fields = class_fields.a VAL.c value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [104] class_fields = class_fields.a virtual_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [105] class_fields = class_fields.a concrete_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [106] class_fields = class_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [107] class_fields = class_fields.a INITIALIZER.c seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [108] parent_binder = AS.a LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [109] parent_binder = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [110] virtual_value = override_flag.o MUTABLE.a VIRTUAL.c label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [111] virtual_value = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [112] value = override_flag.o mutable_flag.a label.c EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [113] value = override_flag.o mutable_flag.a label.c type_constraint EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [114] virtual_method = METHOD.a override_flag PRIVATE VIRTUAL label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [115] virtual_method = METHOD.a override_flag VIRTUAL private_flag.p label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 4];
					final Symbol id = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [116] concrete_method = METHOD.a override_flag private_flag.p label.id strict_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [117] concrete_method = METHOD.a override_flag private_flag.p label.id COLON poly_type EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 7];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [118] class_type = class_signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [119] class_type = QUESTION.a LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [120] class_type = OPTLABEL.a simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [121] class_type = LIDENT.a COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [122] class_type = simple_core_type_or_tuple.a MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [123] class_signature = LBRACKET.a core_type_comma_list RBRACKET clty_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [124] class_signature = clty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [125] class_signature = OBJECT.a class_sig_body.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [126] class_sig_body = class_self_type.a class_sig_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [127] class_self_type = LPAREN.a core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [128] class_self_type = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [129] class_sig_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [130] class_sig_fields = class_sig_fields.a INHERIT.c class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, c);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c);
				}
			},
			new Action() {	// [131] class_sig_fields = class_sig_fields.a VAL.c value_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [132] class_sig_fields = class_sig_fields.a virtual_method_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [133] class_sig_fields = class_sig_fields.a method_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [134] class_sig_fields = class_sig_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [135] value_type = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [136] value_type = MUTABLE.a virtual_flag label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [137] value_type = label.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [138] method_type = METHOD.a private_flag label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [139] virtual_method_type = METHOD.a PRIVATE VIRTUAL label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [140] virtual_method_type = METHOD.a VIRTUAL private_flag label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [141] constrain = core_type.a EQUAL.e core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [142] class_descriptions = class_descriptions.a AND.n class_description.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [143] class_descriptions = class_description.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [144] class_description = virtual_flag.a class_type_parameters.c LIDENT COLON class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 5];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [145] class_type_declarations = class_type_declarations.a AND.n class_type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [146] class_type_declarations = class_type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [147] class_type_declaration = virtual_flag.a class_type_parameters.c LIDENT.id EQUAL.e class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [148] seq_expr = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [149] seq_expr = expr.a SEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [150] seq_expr = expr.a SEMI seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [151] labeled_simple_pattern = QUESTION.a LPAREN label_let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [152] labeled_simple_pattern = QUESTION.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [153] labeled_simple_pattern = OPTLABEL.a LPAREN let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [154] labeled_simple_pattern = OPTLABEL.a pattern_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [155] labeled_simple_pattern = TILDE.a LPAREN label_let_pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [156] labeled_simple_pattern = TILDE.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [157] labeled_simple_pattern = LABEL.a simple_pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [158] labeled_simple_pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [159] pattern_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [160] pattern_var = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [161] opt_default = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [162] opt_default = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [163] label_let_pattern = label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [164] label_let_pattern = label_var.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [165] label_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return new Pos(a);
				}
			},
			new Action() {	// [166] let_pattern = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [167] let_pattern = pattern.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [168] expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [169] expr = simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		addHint(IndentHint.Type.APP, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [170] expr = LET.a rec_flag let_bindings IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [171] expr = LET.a MODULE UIDENT.id module_binding IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [172] expr = LET.a OPEN mod_longident.id IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [173] expr = FUNCTION.a opt_bar.c match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
	    if(c == Pos.NONE)
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
  		return new Pos(a, b);
				}
			},
			new Action() {	// [174] expr = FUN.a labeled_simple_pattern fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [175] expr = FUN.a LPAREN TYPE LIDENT.id RPAREN fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [176] expr = MATCH.a seq_expr WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [177] expr = TRY.a seq_expr.c WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.TRY, c.getStart(), c.getEnd());

    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRSTCATCH, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [178] expr = expr_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [179] expr = constr_longident.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [180] expr = name_tag.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [181] expr = IF.a seq_expr THEN.t expr.c ELSE.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, c.getEnd());
    	addHint(IndentHint.Type.ELSE, e.getEnd() + 1, b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [182] expr = IF.a seq_expr THEN.t expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [183] expr = WHILE.a seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.WHILE, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [184] expr = FOR.a val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 8];
					final Symbol b = _symbols[offset + 9];
					
    	addHint(IndentHint.Type.FOR, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [185] expr = expr.a COLONCOLON expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [186] expr = LPAREN.a COLONCOLON RPAREN LPAREN expr COMMA expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [187] expr = expr.a INFIXOP0 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [188] expr = expr.a INFIXOP1 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [189] expr = expr.a INFIXOP2 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [190] expr = expr.a INFIXOP3 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [191] expr = expr.a INFIXOP4 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [192] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [193] expr = expr.a PLUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [194] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [195] expr = expr.a MINUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [196] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [197] expr = expr.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [198] expr = expr.a LESS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [199] expr = expr.a GREATER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [200] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [201] expr = expr.a BARBAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [202] expr = expr.a AMPERSAND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [203] expr = expr.a AMPERAMPER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [204] expr = expr.a COLONEQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [205] expr = subtractive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [206] expr = additive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [207] expr = simple_expr.a DOT label_longident LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [208] expr = simple_expr.a DOT LPAREN seq_expr RPAREN LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [209] expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [210] expr = simple_expr.a DOT LBRACE expr RBRACE LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [211] expr = label.a LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [212] expr = ASSERT.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [213] expr = LAZY.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [214] expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [215] simple_expr = val_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [216] simple_expr = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [217] simple_expr = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [218] simple_expr = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [219] simple_expr = LPAREN.a seq_expr.c RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.PAREN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [220] simple_expr = BEGIN.a seq_expr.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.BEGIN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [221] simple_expr = BEGIN.a END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [222] simple_expr = LPAREN.a seq_expr type_constraint RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [223] simple_expr = simple_expr.a DOT label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [224] simple_expr = mod_longident.a DOT LPAREN seq_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [225] simple_expr = simple_expr.a DOT LPAREN seq_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [226] simple_expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [227] simple_expr = simple_expr.a DOT LBRACE expr RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [228] simple_expr = LBRACE.a record_expr.c RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [229] simple_expr = LBRACKETBAR.a expr_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [230] simple_expr = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [231] simple_expr = LBRACKET.a expr_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [232] simple_expr = PREFIXOP.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [233] simple_expr = BANG.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [234] simple_expr = NEW.a class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [235] simple_expr = LBRACELESS.a field_expr_list opt_semi GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [236] simple_expr = LBRACELESS.a GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [237] simple_expr = simple_expr.a SHARP label.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [238] simple_expr = LPAREN.a MODULE module_expr COLON package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [239] simple_labeled_expr_list = labeled_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [240] simple_labeled_expr_list = simple_labeled_expr_list.a labeled_simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [241] labeled_simple_expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [242] labeled_simple_expr = label_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [243] label_expr = LABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [244] label_expr = TILDE.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [245] label_expr = QUESTION.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [246] label_expr = OPTLABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [247] label_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return new Pos(a);
				}
			},
			new Action() {	// [248] let_bindings = let_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [249] let_bindings = let_bindings.a AND let_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [250] let_binding = val_ident.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [251] let_binding = val_ident.a COLON typevar_list DOT core_type EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [252] let_binding = pattern.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [253] fun_binding = strict_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [254] fun_binding = type_constraint.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [255] strict_binding = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [256] strict_binding = labeled_simple_pattern.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), a.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [257] strict_binding = LPAREN.a TYPE LIDENT RPAREN.b fun_binding.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), b.getEnd());
  		return new Pos(a, c);
				}
			},
			new Action() {	// [258] match_cases = pattern.a match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [259] match_cases = match_cases.a BAR pattern match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [260] fun_def = match_action.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [261] fun_def = labeled_simple_pattern.a fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [262] fun_def = LPAREN.a TYPE LIDENT RPAREN.b fun_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), b.getEnd());
  		return new Pos(a, c);
				}
			},
			new Action() {	// [263] match_action = MINUSGREATER.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [264] match_action = WHEN.a seq_expr MINUSGREATER seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [265] expr_comma_list = expr_comma_list.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [266] expr_comma_list = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [267] record_expr = simple_expr.a WITH lbl_expr_list.c opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [268] record_expr = lbl_expr_list.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [269] lbl_expr_list = label_longident.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [270] lbl_expr_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [271] lbl_expr_list = lbl_expr_list.a SEMI label_longident EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [272] lbl_expr_list = lbl_expr_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a,b);
				}
			},
			new Action() {	// [273] field_expr_list = label.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [274] field_expr_list = field_expr_list.a SEMI label EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [275] expr_semi_list = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [276] expr_semi_list = expr_semi_list.a SEMI expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [277] type_constraint = COLON.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [278] type_constraint = COLON.a core_type COLONGREATER core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [279] type_constraint = COLONGREATER.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [280] pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [281] pattern = pattern.a AS val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [282] pattern = pattern_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [283] pattern = constr_longident.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [284] pattern = name_tag.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [285] pattern = pattern.a COLONCOLON pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [286] pattern = LPAREN.a COLONCOLON RPAREN LPAREN pattern COMMA pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [287] pattern = pattern.a BAR pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [288] pattern = LAZY.a simple_pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [289] simple_pattern = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [290] simple_pattern = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [291] simple_pattern = signed_constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [292] simple_pattern = CHAR.a DOTDOT CHAR.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [293] simple_pattern = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [294] simple_pattern = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [295] simple_pattern = SHARP.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [296] simple_pattern = LBRACE.a lbl_pattern_list.c record_pattern_end RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [297] simple_pattern = LBRACKET.a pattern_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [298] simple_pattern = LBRACKETBAR.a pattern_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [299] simple_pattern = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [300] simple_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [301] simple_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [302] pattern_comma_list = pattern_comma_list.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [303] pattern_comma_list = pattern.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [304] pattern_semi_list = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [305] pattern_semi_list = pattern_semi_list.a SEMI pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [306] lbl_pattern_list = label_longident.a EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [307] lbl_pattern_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [308] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [309] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a,b);
				}
			},
			new Action() {	// [310] record_pattern_end = opt_semi.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [311] record_pattern_end = SEMI.a UNDERSCORE.c opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [312] primitive_declaration = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [313] primitive_declaration = STRING.a primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [314] type_declarations = type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [315] type_declarations = type_declarations.a AND.n type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [316] type_declaration = type_parameters.a LIDENT.c type_kind.d constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	Pos first;
    	Pos last;

    	if(a != Pos.NONE)
    		first = (Pos)a;
    	else
    		first = new Pos(c);

    	if(b != Pos.NONE)
    		last = (Pos)b;
    	else if(b == Pos.NONE && d != Pos.NONE)
    		last = (Pos)d;
    	else
    		last = new Pos(c);

    	if(first == last)
    		return first;
    	else
    		return new Pos(first, last);
				}
			},
			new Action() {	// [317] constraints = constraints.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [318] constraints = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [319] type_kind = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [320] type_kind = EQUAL.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [321] type_kind = EQUAL.a PRIVATE.c core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [322] type_kind = EQUAL.a constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [323] type_kind = EQUAL.a PRIVATE.c constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [324] type_kind = EQUAL.a private_flag.c BAR.d constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
	    addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [325] type_kind = EQUAL.a private_flag.c LBRACE.d label_declarations opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					
   		addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd() + 1);
    	addHint(IndentHint.Type.RECORD, d.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [326] type_kind = EQUAL.a core_type EQUAL.c private_flag opt_bar.o constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol o = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	if(o == Pos.NONE)
    		addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);

    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [327] type_kind = EQUAL.a core_type.t EQUAL.e private_flag LBRACE.l label_declarations.c opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol l = _symbols[offset + 5];
					final Symbol c = _symbols[offset + 6];
					final Symbol b = _symbols[offset + 8];
					
    	if(t == Pos.NONE)
    		addHint(IndentHint.Type.DEF, e.getEnd() + 1, l.getStart());
    	else
    		addHint(IndentHint.Type.DEF, t.getStart(), l.getStart());

    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [328] type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [329] type_parameters = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [330] type_parameters = LPAREN.a type_parameter_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [331] type_parameter = type_variance.a QUOTE.c ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [332] type_variance = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [333] type_variance = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [334] type_variance = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [335] type_parameter_list = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [336] type_parameter_list = type_parameter_list.a COMMA type_parameter.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [337] constructor_declarations = constructor_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [338] constructor_declarations = constructor_declarations.a BAR constructor_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [339] constructor_declaration = constr_ident.a constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [340] constructor_arguments = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [341] constructor_arguments = OF.a core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [342] label_declarations = label_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [343] label_declarations = label_declarations.a SEMI label_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [344] label_declaration = mutable_flag.a label.c COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [345] with_constraints = with_constraint.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [346] with_constraints = with_constraints.a AND with_constraint.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [347] with_constraint = TYPE.a type_parameters label_longident with_type_binder core_type.c constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [348] with_constraint = TYPE.a type_parameters label_longident COLONEQUAL core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [349] with_constraint = MODULE.a mod_longident EQUAL.e mod_ext_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [350] with_constraint = MODULE.a mod_longident COLONEQUAL mod_ext_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [351] with_type_binder = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [352] with_type_binder = EQUAL.a PRIVATE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [353] typevar_list = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [354] typevar_list = typevar_list.a QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [355] poly_type = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [356] poly_type = typevar_list.a DOT core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [357] core_type = core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [358] core_type = core_type2.a AS QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [359] core_type2 = simple_core_type_or_tuple.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [360] core_type2 = QUESTION.a LIDENT COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [361] core_type2 = OPTLABEL.a core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [362] core_type2 = LIDENT.a COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [363] core_type2 = core_type2.a MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [364] simple_core_type = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [365] simple_core_type = LPAREN.a core_type_comma_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [366] simple_core_type2 = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [367] simple_core_type2 = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [368] simple_core_type2 = type_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [369] simple_core_type2 = simple_core_type2.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [370] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [371] simple_core_type2 = LESS.a meth_list GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [372] simple_core_type2 = LESS.a GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [373] simple_core_type2 = SHARP.a class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [374] simple_core_type2 = simple_core_type2.a SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [375] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [376] simple_core_type2 = LBRACKET.a tag_field RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [377] simple_core_type2 = LBRACKET.a BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [378] simple_core_type2 = LBRACKET.a row_field BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [379] simple_core_type2 = LBRACKETGREATER.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [380] simple_core_type2 = LBRACKETGREATER.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [381] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [382] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list GREATER name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [383] simple_core_type2 = LPAREN.a MODULE package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [384] package_type = mty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [385] package_type = mty_longident.a WITH package_type_cstrs.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [386] package_type_cstr = TYPE.a LIDENT EQUAL core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [387] package_type_cstrs = package_type_cstr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [388] package_type_cstrs = package_type_cstr.a AND package_type_cstrs.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [389] row_field_list = row_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [390] row_field_list = row_field_list.a BAR row_field.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [391] row_field = tag_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [392] row_field = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [393] tag_field = name_tag.a OF opt_ampersand amper_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [394] tag_field = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [395] opt_ampersand = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [396] opt_ampersand = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [397] amper_type_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [398] amper_type_list = amper_type_list.a AMPERSAND core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [399] opt_present = LBRACKETGREATER.a name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [400] opt_present = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [401] name_tag_list = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [402] name_tag_list = name_tag_list.a name_tag.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [403] simple_core_type_or_tuple = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [404] simple_core_type_or_tuple = simple_core_type.a STAR core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [405] core_type_comma_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [406] core_type_comma_list = core_type_comma_list.a COMMA core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [407] core_type_list = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [408] core_type_list = core_type_list.a STAR simple_core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [409] meth_list = field.a SEMI meth_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [410] meth_list = field.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [411] meth_list = DOTDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [412] field = label.a COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [413] label = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [414] constant = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [415] constant = CHAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [416] constant = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [417] constant = FLOAT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [418] constant = INT32.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [419] constant = INT64.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [420] constant = NATIVEINT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [421] signed_constant = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [422] signed_constant = MINUS.a INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [423] signed_constant = MINUS.a FLOAT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [424] signed_constant = MINUS.a INT32.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [425] signed_constant = MINUS.a INT64.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [426] signed_constant = MINUS.a NATIVEINT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [427] signed_constant = PLUS.a INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [428] signed_constant = PLUS.a FLOAT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [429] signed_constant = PLUS.a INT32.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [430] signed_constant = PLUS.a INT64.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [431] signed_constant = PLUS.a NATIVEINT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [432] ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [433] ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [434] val_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [435] val_ident = LPAREN.a operator.o RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [436] operator = PREFIXOP.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [437] operator = INFIXOP0.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [438] operator = INFIXOP1.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [439] operator = INFIXOP2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [440] operator = INFIXOP3.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [441] operator = INFIXOP4.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [442] operator = BANG.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [443] operator = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [444] operator = PLUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [445] operator = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [446] operator = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [447] operator = STAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [448] operator = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [449] operator = LESS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [450] operator = GREATER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [451] operator = OR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [452] operator = BARBAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [453] operator = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [454] operator = AMPERAMPER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [455] operator = COLONEQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [456] constr_ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [457] constr_ident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [458] constr_ident = COLONCOLON.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [459] constr_ident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [460] constr_ident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [461] val_longident = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [462] val_longident = mod_longident.a DOT val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [463] constr_longident = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [464] constr_longident = LBRACKET.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [465] constr_longident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [466] constr_longident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [467] constr_longident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [468] label_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [469] label_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [470] type_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [471] type_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [472] mod_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [473] mod_longident = mod_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [474] mod_ext_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [475] mod_ext_longident = mod_ext_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [476] mod_ext_longident = mod_ext_longident.a LPAREN mod_ext_longident RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [477] mty_longident = ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [478] mty_longident = mod_ext_longident.a DOT ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [479] clty_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [480] clty_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [481] class_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [482] class_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [483] toplevel_directive = SHARP.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [484] toplevel_directive = SHARP.a ident STRING.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [485] toplevel_directive = SHARP.a ident INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [486] toplevel_directive = SHARP.a ident val_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [487] toplevel_directive = SHARP.a ident FALSE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [488] toplevel_directive = SHARP.a ident TRUE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [489] name_tag = BACKQUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [490] rec_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [491] rec_flag = REC.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [492] direction_flag = TO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [493] direction_flag = DOWNTO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [494] private_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [495] private_flag = PRIVATE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [496] mutable_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [497] mutable_flag = MUTABLE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [498] virtual_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [499] virtual_flag = VIRTUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [500] override_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [501] override_flag = BANG.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [502] opt_bar = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [503] opt_bar = BAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [504] opt_semi = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [505] opt_semi = SEMI.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [506] subtractive = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [507] subtractive = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [508] additive = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [509] additive = PLUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			}
		};


	// override the default error reporting: do not print errors on stderr
	this.report = errorReporting = new ErrorReporting();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
